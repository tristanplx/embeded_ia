
rabier_panhelleux_embeded.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b8c  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0004d810  08007d60  08007d60  00008d60  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08055570  08055570  00057b64  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08055570  08055570  00056570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08055578  08055578  00057b64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08055578  08055578  00056578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0805557c  0805557c  0005657c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000b64  20000000  08055580  00057000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001460  20000b80  080560e4  00057b80  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  20040000  20040000  00058000  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00057b64  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b1d4  00000000  00000000  00057b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005e35  00000000  00000000  00082d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00011b6b  00000000  00000000  00088b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001958  00000000  00000000  0009a708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000172c  00000000  00000000  0009c060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00037aaa  00000000  00000000  0009d78c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002da9d  00000000  00000000  000d5236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0013e85d  00000000  00000000  00102cd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000086  00000000  00000000  00241530  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004edc  00000000  00000000  002415b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000094  00000000  00000000  00246494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000b80 	.word	0x20000b80
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08007d34 	.word	0x08007d34

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000b84 	.word	0x20000b84
 80001fc:	08007d34 	.word	0x08007d34

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <MX_FMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80005cc:	b510      	push	{r4, lr}
 80005ce:	b088      	sub	sp, #32
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80005d0:	2214      	movs	r2, #20
 80005d2:	2100      	movs	r1, #0
 80005d4:	a803      	add	r0, sp, #12
 80005d6:	f006 fd75 	bl	80070c4 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80005da:	4818      	ldr	r0, [pc, #96]	@ (800063c <MX_FMC_Init+0x70>)
 80005dc:	f04f 4320 	mov.w	r3, #2684354560	@ 0xa0000000
 80005e0:	6003      	str	r3, [r0, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80005e2:	f503 7382 	add.w	r3, r3, #260	@ 0x104
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80005e6:	2110      	movs	r1, #16
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80005e8:	6043      	str	r3, [r0, #4]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80005ea:	2304      	movs	r3, #4
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80005ec:	2200      	movs	r2, #0
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80005ee:	e9c0 3104 	strd	r3, r1, [r0, #16]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_ENABLE;
 80005f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80005f6:	e9c0 3206 	strd	r3, r2, [r0, #24]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_ENABLE;
 80005fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80005fe:	e9c0 320a 	strd	r3, r2, [r0, #40]	@ 0x28
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_ENABLE;
 8000602:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000606:	e9c0 320d 	strd	r3, r2, [r0, #52]	@ 0x34
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
  hsram1.Init.NBLSetupTime = 0;
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
  /* Timing */
  Timing.AddressSetupTime = 15;
 800060a:	230f      	movs	r3, #15
  Timing.AddressHoldTime = 15;
  Timing.DataSetupTime = 255;
  Timing.DataHoldTime = 0;
  Timing.BusTurnAroundDuration = 15;
  Timing.CLKDivision = 16;
 800060c:	e9cd 3104 	strd	r3, r1, [sp, #16]
  Timing.AddressHoldTime = 15;
 8000610:	e9cd 3300 	strd	r3, r3, [sp]
  Timing.DataSetupTime = 255;
 8000614:	24ff      	movs	r4, #255	@ 0xff
  Timing.DataLatency = 2;
 8000616:	2302      	movs	r3, #2
  Timing.AccessMode = FMC_ACCESS_MODE_A;
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000618:	4669      	mov	r1, sp
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800061a:	e9c0 2202 	strd	r2, r2, [r0, #8]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 800061e:	e9c0 2208 	strd	r2, r2, [r0, #32]
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000622:	e9c0 2210 	strd	r2, r2, [r0, #64]	@ 0x40
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000626:	6302      	str	r2, [r0, #48]	@ 0x30
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000628:	63c2      	str	r2, [r0, #60]	@ 0x3c
  Timing.DataSetupTime = 255;
 800062a:	9402      	str	r4, [sp, #8]
  Timing.DataLatency = 2;
 800062c:	9306      	str	r3, [sp, #24]
  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800062e:	f003 f980 	bl	8003932 <HAL_SRAM_Init>
 8000632:	b108      	cbz	r0, 8000638 <MX_FMC_Init+0x6c>
  {
    Error_Handler( );
 8000634:	f000 face 	bl	8000bd4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000638:	b008      	add	sp, #32
 800063a:	bd10      	pop	{r4, pc}
 800063c:	20000ba0 	.word	0x20000ba0

08000640 <HAL_SRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000642:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000644:	2300      	movs	r3, #0
 8000646:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 8000648:	4b24      	ldr	r3, [pc, #144]	@ (80006dc <HAL_SRAM_MspInit+0x9c>)
 800064a:	681e      	ldr	r6, [r3, #0]
 800064c:	2e00      	cmp	r6, #0
 800064e:	d142      	bne.n	80006d6 <HAL_SRAM_MspInit+0x96>
  FMC_Initialized = 1;
 8000650:	2201      	movs	r2, #1
 8000652:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 8000654:	4b22      	ldr	r3, [pc, #136]	@ (80006e0 <HAL_SRAM_MspInit+0xa0>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000656:	4823      	ldr	r0, [pc, #140]	@ (80006e4 <HAL_SRAM_MspInit+0xa4>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8000658:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800065a:	f042 0201 	orr.w	r2, r2, #1
 800065e:	651a      	str	r2, [r3, #80]	@ 0x50
 8000660:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000668:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800066a:	2503      	movs	r5, #3
 800066c:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 800066e:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000670:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000672:	f64f 739b 	movw	r3, #65435	@ 0xff9b
 8000676:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800067a:	e9cd 5404 	strd	r5, r4, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800067e:	f000 fea7 	bl	80013d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D2_Pin|PSRAM_OE_Pin|D3_Pin|PSRAM_WE_Pin
 8000682:	f64f 73fb 	movw	r3, #65531	@ 0xfffb
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000686:	4818      	ldr	r0, [pc, #96]	@ (80006e8 <HAL_SRAM_MspInit+0xa8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000688:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800068a:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000690:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000694:	f000 fe9c 	bl	80013d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PSRAM_ADV_Pin;
 8000698:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 800069a:	4814      	ldr	r0, [pc, #80]	@ (80006ec <HAL_SRAM_MspInit+0xac>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800069c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 800069e:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a0:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a4:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 80006a8:	f000 fe92 	bl	80013d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 80006ac:	f24f 033f 	movw	r3, #61503	@ 0xf03f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006b0:	480f      	ldr	r0, [pc, #60]	@ (80006f0 <HAL_SRAM_MspInit+0xb0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006b2:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006b4:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b6:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ba:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006be:	f000 fe87 	bl	80013d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A15_Pin|PSRAM_A11_Pin
 80006c2:	233f      	movs	r3, #63	@ 0x3f
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006c4:	480b      	ldr	r0, [pc, #44]	@ (80006f4 <HAL_SRAM_MspInit+0xb4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006c6:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006c8:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ca:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ce:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006d2:	f000 fe7d 	bl	80013d0 <HAL_GPIO_Init>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80006d6:	b007      	add	sp, #28
 80006d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000b9c 	.word	0x20000b9c
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48001000 	.word	0x48001000
 80006e8:	48000c00 	.word	0x48000c00
 80006ec:	48000400 	.word	0x48000400
 80006f0:	48001400 	.word	0x48001400
 80006f4:	48001800 	.word	0x48001800

080006f8 <MX_GPIO_Init>:
     PB0   ------> ADCx_IN15
     PH8   ------> OCTOSPIM_P2_IO3
     PB12   ------> S_DATAIN1DFSDM1
*/
void MX_GPIO_Init(void)
{
 80006f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80006fc:	4cbd      	ldr	r4, [pc, #756]	@ (80009f4 <MX_GPIO_Init+0x2fc>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80006fe:	f8df a300 	ldr.w	sl, [pc, #768]	@ 8000a00 <MX_GPIO_Init+0x308>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOY_SEL_GPIO_Port, JOY_SEL_Pin, GPIO_PIN_RESET);
 8000702:	f8df 8300 	ldr.w	r8, [pc, #768]	@ 8000a04 <MX_GPIO_Init+0x30c>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 8000706:	f8df 9300 	ldr.w	r9, [pc, #768]	@ 8000a08 <MX_GPIO_Init+0x310>
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO1_Pin|OCTOSPIM_P2_IO2_Pin|OCTOSPIM_P2_CLK_Pin|OCTOSPIM_P2_IO0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800070a:	f8df b300 	ldr.w	fp, [pc, #768]	@ 8000a0c <MX_GPIO_Init+0x314>
{
 800070e:	b08f      	sub	sp, #60	@ 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	2214      	movs	r2, #20
 8000712:	2100      	movs	r1, #0
 8000714:	a809      	add	r0, sp, #36	@ 0x24
 8000716:	f006 fcd5 	bl	80070c4 <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800071a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800071c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000720:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8000722:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800072e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000732:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8000734:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800073a:	9301      	str	r3, [sp, #4]
 800073c:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800073e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000740:	f043 0310 	orr.w	r3, r3, #16
 8000744:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8000746:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000748:	f003 0310 	and.w	r3, r3, #16
 800074c:	9302      	str	r3, [sp, #8]
 800074e:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000750:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000752:	f043 0302 	orr.w	r3, r3, #2
 8000756:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8000758:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800075a:	f003 0302 	and.w	r3, r3, #2
 800075e:	9303      	str	r3, [sp, #12]
 8000760:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800076a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	9304      	str	r3, [sp, #16]
 8000772:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000774:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000776:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800077a:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800077c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800077e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000782:	9305      	str	r3, [sp, #20]
 8000784:	9b05      	ldr	r3, [sp, #20]
  HAL_PWREx_EnableVddIO2();
 8000786:	f001 f893 	bl	80018b0 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800078a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800078c:	f043 0308 	orr.w	r3, r3, #8
 8000790:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8000792:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000794:	f003 0308 	and.w	r3, r3, #8
 8000798:	9306      	str	r3, [sp, #24]
 800079a:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800079e:	f043 0304 	orr.w	r3, r3, #4
 80007a2:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80007a4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	9307      	str	r3, [sp, #28]
 80007ac:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ae:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80007b0:	f043 0320 	orr.w	r3, r3, #32
 80007b4:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80007b6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80007b8:	f003 0320 	and.w	r3, r3, #32
 80007bc:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80007be:	4650      	mov	r0, sl
 80007c0:	2200      	movs	r2, #0
 80007c2:	f244 0114 	movw	r1, #16404	@ 0x4014
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007c6:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80007c8:	f000 fed8 	bl	800157c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(JOY_SEL_GPIO_Port, JOY_SEL_Pin, GPIO_PIN_RESET);
 80007cc:	4640      	mov	r0, r8
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007d4:	f000 fed2 	bl	800157c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	2140      	movs	r1, #64	@ 0x40
 80007dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007e0:	f000 fecc 	bl	800157c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	4648      	mov	r0, r9
 80007e8:	2104      	movs	r1, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ea:	2502      	movs	r5, #2
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 80007ec:	f000 fec6 	bl	800157c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f0:	f44f 6364 	mov.w	r3, #3648	@ 0xe40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f4:	2400      	movs	r4, #0
 80007f6:	2603      	movs	r6, #3
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f8:	e9cd 3509 	strd	r3, r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80007fc:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 80007fe:	2305      	movs	r3, #5
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000800:	4658      	mov	r0, fp

  /*Configure GPIO pins : MIC_VDD_Pin DSI_SPI_USART_CS_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2701      	movs	r7, #1
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000804:	930d      	str	r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000806:	e9cd 460b 	strd	r4, r6, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800080a:	f000 fde1 	bl	80013d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	f244 0214 	movw	r2, #16404	@ 0x4014
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000812:	a909      	add	r1, sp, #36	@ 0x24
 8000814:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	e9cd 2709 	strd	r2, r7, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800081e:	f000 fdd7 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000822:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000824:	a909      	add	r1, sp, #36	@ 0x24
 8000826:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000828:	e9cd 3509 	strd	r3, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000830:	950d      	str	r5, [sp, #52]	@ 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000832:	f000 fdcd 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D7_Pin DCMI_D5_Pin DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8000836:	22b0      	movs	r2, #176	@ 0xb0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000838:	230a      	movs	r3, #10
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800083a:	a909      	add	r1, sp, #36	@ 0x24
 800083c:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	e9cd 2509 	strd	r2, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000842:	930d      	str	r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000848:	f000 fdc2 	bl	80013d0 <HAL_GPIO_Init>
  /*Configure GPIO pins : OCTOSPIM_P2_IO6_Pin OCTOSPIM_P2_DQS_Pin OCTOSPIM_P2_IO7_Pin OCTOSPIM_P2_CS_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO6_Pin|OCTOSPIM_P2_DQS_Pin|OCTOSPIM_P2_IO7_Pin|OCTOSPIM_P2_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 800084c:	2305      	movs	r3, #5
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO6_Pin|OCTOSPIM_P2_DQS_Pin|OCTOSPIM_P2_IO7_Pin|OCTOSPIM_P2_CS_Pin;
 800084e:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000852:	a909      	add	r1, sp, #36	@ 0x24
 8000854:	4868      	ldr	r0, [pc, #416]	@ (80009f8 <MX_GPIO_Init+0x300>)
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000856:	930d      	str	r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000858:	e9cd 2509 	strd	r2, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085c:	e9cd 460b 	strd	r4, r6, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000860:	f000 fdb6 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000864:	f44f 1288 	mov.w	r2, #1114112	@ 0x110000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8000868:	a909      	add	r1, sp, #36	@ 0x24
 800086a:	4658      	mov	r0, fp
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	e9cd 240a 	strd	r2, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8000870:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8000872:	f000 fdad 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D3_Pin DCMI_PIXCLK_Pin DCMI_D2_Pin */
  GPIO_InitStruct.Pin = DCMI_D3_Pin|DCMI_PIXCLK_Pin|DCMI_D2_Pin;
 8000876:	f44f 51c1 	mov.w	r1, #6176	@ 0x1820
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 800087a:	230a      	movs	r3, #10
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	e9cd 1509 	strd	r1, r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000880:	4650      	mov	r0, sl
 8000882:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000884:	930d      	str	r3, [sp, #52]	@ 0x34

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8000886:	f44f 5b00 	mov.w	fp, #8192	@ 0x2000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800088e:	f000 fd9f 	bl	80013d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8000892:	a909      	add	r1, sp, #36	@ 0x24
 8000894:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	e9cd b509 	strd	fp, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800089a:	960d      	str	r6, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f000 fd96 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOPSIM_P2_IO4_Pin OCTOSPIM_P2_IO5_Pin OCTOSPI_P2_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOPSIM_P2_IO4_Pin|OCTOSPIM_P2_IO5_Pin|OCTOSPI_P2_IO3_Pin;
 80008a4:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 80008a8:	2305      	movs	r3, #5
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	e9cd 1509 	strd	r1, r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008ae:	4650      	mov	r0, sl
 80008b0:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 80008b2:	930d      	str	r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b4:	e9cd 460b 	strd	r4, r6, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008b8:	f000 fd8a 	bl	80013d0 <HAL_GPIO_Init>
  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 80008bc:	a909      	add	r1, sp, #36	@ 0x24
 80008be:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c0:	e9cd b709 	strd	fp, r7, [sp, #36]	@ 0x24
  /*Configure GPIO pins : ARD_14_Pin ARD_15_Pin */
  GPIO_InitStruct.Pin = ARD_14_Pin|ARD_15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80008c4:	f04f 0a04 	mov.w	sl, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f000 fd80 	bl	80013d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008d0:	2312      	movs	r3, #18
 80008d2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008d6:	a909      	add	r1, sp, #36	@ 0x24
 80008d8:	4847      	ldr	r0, [pc, #284]	@ (80009f8 <MX_GPIO_Init+0x300>)
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80008da:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008de:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e2:	e9cd 460b 	strd	r4, r6, [sp, #44]	@ 0x2c

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e6:	f04f 0b40 	mov.w	fp, #64	@ 0x40
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008ea:	f000 fd71 	bl	80013d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ee:	f44f 1288 	mov.w	r2, #1114112	@ 0x110000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 80008f2:	a909      	add	r1, sp, #36	@ 0x24
 80008f4:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008f6:	e9cd b209 	strd	fp, r2, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f000 fd68 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFDATIN3_Pin DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFDATIN3_Pin|DF_CKOUT_Pin;
 8000900:	2384      	movs	r3, #132	@ 0x84
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	e9cd 3509 	strd	r3, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000906:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000908:	2306      	movs	r3, #6
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090a:	4640      	mov	r0, r8
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800090c:	930d      	str	r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000912:	f000 fd5d 	bl	80013d0 <HAL_GPIO_Init>
  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000916:	2208      	movs	r2, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000918:	a909      	add	r1, sp, #36	@ 0x24
 800091a:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	e9cd 6509 	strd	r6, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000920:	e9cd 460b 	strd	r4, r6, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000924:	920d      	str	r2, [sp, #52]	@ 0x34

  /*Configure GPIO pins : ARD_A2_Pin ARD_A1_Pin */
  GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000926:	260b      	movs	r6, #11
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000928:	f000 fd52 	bl	80013d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800092c:	2218      	movs	r2, #24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092e:	a909      	add	r1, sp, #36	@ 0x24
 8000930:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000932:	e9cd 2609 	strd	r2, r6, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000938:	f000 fd4a 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A4_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A4_Pin|ARD_A0_Pin;
 800093c:	2281      	movs	r2, #129	@ 0x81
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093e:	a909      	add	r1, sp, #36	@ 0x24
 8000940:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000944:	e9cd 2609 	strd	r2, r6, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	f000 fd41 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_PWM_Pin */
  GPIO_InitStruct.Pin = STMOD_PWM_Pin;
 800094e:	2220      	movs	r2, #32
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
  HAL_GPIO_Init(STMOD_PWM_GPIO_Port, &GPIO_InitStruct);
 8000950:	a909      	add	r1, sp, #36	@ 0x24
 8000952:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000956:	e9cd 2509 	strd	r2, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800095e:	970d      	str	r7, [sp, #52]	@ 0x34
  HAL_GPIO_Init(STMOD_PWM_GPIO_Port, &GPIO_InitStruct);
 8000960:	f000 fd36 	bl	80013d0 <HAL_GPIO_Init>
  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000964:	a909      	add	r1, sp, #36	@ 0x24
 8000966:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096a:	e9cd b709 	strd	fp, r7, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000972:	f000 fd2d 	bl	80013d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000976:	a909      	add	r1, sp, #36	@ 0x24
 8000978:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	e9cd 5509 	strd	r5, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000984:	950d      	str	r5, [sp, #52]	@ 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000986:	f000 fd23 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TE_Pin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 800098a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 800098e:	a909      	add	r1, sp, #36	@ 0x24
 8000990:	481a      	ldr	r0, [pc, #104]	@ (80009fc <MX_GPIO_Init+0x304>)
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8000992:	960d      	str	r6, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000994:	e9cd 2509 	strd	r2, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 800099c:	f000 fd18 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 80009a0:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	e9cd 3509 	strd	r3, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 80009a6:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80009a8:	230a      	movs	r3, #10
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80009ae:	930d      	str	r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f000 fd0c 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A3_Pin */
  GPIO_InitStruct.Pin = ARD_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 80009b8:	a909      	add	r1, sp, #36	@ 0x24
 80009ba:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009bc:	e9cd 7609 	strd	r7, r6, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f000 fd05 	bl	80013d0 <HAL_GPIO_Init>
  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 80009c6:	a909      	add	r1, sp, #36	@ 0x24
 80009c8:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	e9cd a709 	strd	sl, r7, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f000 fcfd 	bl	80013d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 80009d6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80009da:	2306      	movs	r3, #6
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 80009dc:	a909      	add	r1, sp, #36	@ 0x24
 80009de:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	e9cd 2509 	strd	r2, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80009e8:	930d      	str	r3, [sp, #52]	@ 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f000 fcf1 	bl	80013d0 <HAL_GPIO_Init>

}
 80009ee:	b00f      	add	sp, #60	@ 0x3c
 80009f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009f4:	40021000 	.word	0x40021000
 80009f8:	48001800 	.word	0x48001800
 80009fc:	48001400 	.word	0x48001400
 8000a00:	48001c00 	.word	0x48001c00
 8000a04:	48000800 	.word	0x48000800
 8000a08:	48000400 	.word	0x48000400
 8000a0c:	48002000 	.word	0x48002000

08000a10 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a10:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a12:	4814      	ldr	r0, [pc, #80]	@ (8000a64 <MX_I2C1_Init+0x54>)
 8000a14:	4b14      	ldr	r3, [pc, #80]	@ (8000a68 <MX_I2C1_Init+0x58>)
 8000a16:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000a18:	f1a3 6378 	sub.w	r3, r3, #260046848	@ 0xf800000
 8000a1c:	f5a3 237d 	sub.w	r3, r3, #1036288	@ 0xfd000
 8000a20:	f6a3 634f 	subw	r3, r3, #3663	@ 0xe4f
 8000a24:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a26:	2201      	movs	r2, #1
 8000a28:	2300      	movs	r3, #0
 8000a2a:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
 8000a2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a32:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a36:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a38:	f000 fda5 	bl	8001586 <HAL_I2C_Init>
 8000a3c:	b108      	cbz	r0, 8000a42 <MX_I2C1_Init+0x32>
  {
    Error_Handler();
 8000a3e:	f000 f8c9 	bl	8000bd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a42:	4808      	ldr	r0, [pc, #32]	@ (8000a64 <MX_I2C1_Init+0x54>)
 8000a44:	2100      	movs	r1, #0
 8000a46:	f000 fdf3 	bl	8001630 <HAL_I2CEx_ConfigAnalogFilter>
 8000a4a:	b108      	cbz	r0, 8000a50 <MX_I2C1_Init+0x40>
  {
    Error_Handler();
 8000a4c:	f000 f8c2 	bl	8000bd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a50:	4804      	ldr	r0, [pc, #16]	@ (8000a64 <MX_I2C1_Init+0x54>)
 8000a52:	2100      	movs	r1, #0
 8000a54:	f000 fe12 	bl	800167c <HAL_I2CEx_ConfigDigitalFilter>
 8000a58:	b118      	cbz	r0, 8000a62 <MX_I2C1_Init+0x52>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000a5e:	f000 b8b9 	b.w	8000bd4 <Error_Handler>
}
 8000a62:	bd08      	pop	{r3, pc}
 8000a64:	20000bf0 	.word	0x20000bf0
 8000a68:	40005400 	.word	0x40005400

08000a6c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a70:	b0b0      	sub	sp, #192	@ 0xc0
 8000a72:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	2214      	movs	r2, #20
 8000a76:	2100      	movs	r1, #0
 8000a78:	a804      	add	r0, sp, #16
 8000a7a:	f006 fb23 	bl	80070c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a7e:	229c      	movs	r2, #156	@ 0x9c
 8000a80:	2100      	movs	r1, #0
 8000a82:	a809      	add	r0, sp, #36	@ 0x24
 8000a84:	f006 fb1e 	bl	80070c4 <memset>
  if(i2cHandle->Instance==I2C1)
 8000a88:	6822      	ldr	r2, [r4, #0]
 8000a8a:	4b23      	ldr	r3, [pc, #140]	@ (8000b18 <HAL_I2C_MspInit+0xac>)
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d13f      	bne.n	8000b10 <HAL_I2C_MspInit+0xa4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a90:	2340      	movs	r3, #64	@ 0x40
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a92:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a94:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a96:	f001 fcdb 	bl	8002450 <HAL_RCCEx_PeriphCLKConfig>
 8000a9a:	b108      	cbz	r0, 8000aa0 <HAL_I2C_MspInit+0x34>
    {
      Error_Handler();
 8000a9c:	f000 f89a 	bl	8000bd4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa0:	4c1e      	ldr	r4, [pc, #120]	@ (8000b1c <HAL_I2C_MspInit+0xb0>)
 8000aa2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8000aaa:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000aac:	f003 0302 	and.w	r3, r3, #2
 8000ab0:	9301      	str	r3, [sp, #4]
 8000ab2:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ab4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000ab6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000aba:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8000abc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8000abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ac2:	9302      	str	r3, [sp, #8]
 8000ac4:	9b02      	ldr	r3, [sp, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PG13     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ac6:	f04f 0812 	mov.w	r8, #18
    HAL_PWREx_EnableVddIO2();
 8000aca:	f000 fef1 	bl	80018b0 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ace:	2701      	movs	r7, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ad0:	2340      	movs	r3, #64	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	4813      	ldr	r0, [pc, #76]	@ (8000b20 <HAL_I2C_MspInit+0xb4>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad4:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ad6:	2504      	movs	r5, #4
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ada:	e9cd 3804 	strd	r3, r8, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ade:	e9cd 7606 	strd	r7, r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ae2:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	f000 fc74 	bl	80013d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_SDA_Pin;
 8000ae8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 8000aec:	480d      	ldr	r0, [pc, #52]	@ (8000b24 <HAL_I2C_MspInit+0xb8>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aee:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 8000af0:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af2:	e9cd 3804 	strd	r3, r8, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af6:	e9cd 7606 	strd	r7, r6, [sp, #24]
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f000 fc69 	bl	80013d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000afe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000b00:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b04:	65a3      	str	r3, [r4, #88]	@ 0x58
 8000b06:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000b08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b0c:	9303      	str	r3, [sp, #12]
 8000b0e:	9b03      	ldr	r3, [sp, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b10:	b030      	add	sp, #192	@ 0xc0
 8000b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b16:	bf00      	nop
 8000b18:	40005400 	.word	0x40005400
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	48000400 	.word	0x48000400
 8000b24:	48001800 	.word	0x48001800

08000b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b28:	b510      	push	{r4, lr}
 8000b2a:	b096      	sub	sp, #88	@ 0x58
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2c:	2244      	movs	r2, #68	@ 0x44
 8000b2e:	2100      	movs	r1, #0
 8000b30:	a805      	add	r0, sp, #20
 8000b32:	f006 fac7 	bl	80070c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b36:	2214      	movs	r2, #20
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4668      	mov	r0, sp
 8000b3c:	f006 fac2 	bl	80070c4 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000b40:	2000      	movs	r0, #0
 8000b42:	f000 fe55 	bl	80017f0 <HAL_PWREx_ControlVoltageScaling>
 8000b46:	b108      	cbz	r0, 8000b4c <SystemClock_Config+0x24>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b48:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <SystemClock_Config+0x22>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 8000b4c:	2330      	movs	r3, #48	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b4e:	2260      	movs	r2, #96	@ 0x60
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 8000b50:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b52:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b54:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b56:	2202      	movs	r2, #2
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b58:	e9cd 300b 	strd	r3, r0, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b5c:	e9cd 230f 	strd	r2, r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b60:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b62:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8000b64:	2405      	movs	r4, #5
 8000b66:	233c      	movs	r3, #60	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b68:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8000b6a:	e9cd 3412 	strd	r3, r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b6e:	e9cd 2214 	strd	r2, r2, [sp, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b72:	f000 ff29 	bl	80019c8 <HAL_RCC_OscConfig>
 8000b76:	b108      	cbz	r0, 8000b7c <SystemClock_Config+0x54>
 8000b78:	b672      	cpsid	i
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <SystemClock_Config+0x52>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b7c:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b80:	220f      	movs	r2, #15
 8000b82:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b84:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b86:	4621      	mov	r1, r4
 8000b88:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b8a:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b8e:	f001 f9c1 	bl	8001f14 <HAL_RCC_ClockConfig>
 8000b92:	b108      	cbz	r0, 8000b98 <SystemClock_Config+0x70>
 8000b94:	b672      	cpsid	i
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <SystemClock_Config+0x6e>
}
 8000b98:	b016      	add	sp, #88	@ 0x58
 8000b9a:	bd10      	pop	{r4, pc}

08000b9c <main>:
{
 8000b9c:	b508      	push	{r3, lr}
  HAL_Init();
 8000b9e:	f000 fb89 	bl	80012b4 <HAL_Init>
  SystemClock_Config();
 8000ba2:	f7ff ffc1 	bl	8000b28 <SystemClock_Config>
  MX_GPIO_Init();
 8000ba6:	f7ff fda7 	bl	80006f8 <MX_GPIO_Init>
  MX_FMC_Init();
 8000baa:	f7ff fd0f 	bl	80005cc <MX_FMC_Init>
  MX_I2C1_Init();
 8000bae:	f7ff ff2f 	bl	8000a10 <MX_I2C1_Init>
  MX_SAI1_Init();
 8000bb2:	f000 f811 	bl	8000bd8 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 8000bb6:	f000 f899 	bl	8000cec <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8000bba:	f000 f90d 	bl	8000dd8 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000bbe:	f000 f9c7 	bl	8000f50 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000bc2:	f000 f9f7 	bl	8000fb4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000bc6:	f000 faad 	bl	8001124 <MX_USB_OTG_FS_PCD_Init>
  MX_X_CUBE_AI_Init();
 8000bca:	f004 f827 	bl	8004c1c <MX_X_CUBE_AI_Init>
  MX_X_CUBE_AI_Process();
 8000bce:	f004 f85f 	bl	8004c90 <MX_X_CUBE_AI_Process>
  while (1)
 8000bd2:	e7fc      	b.n	8000bce <main+0x32>

08000bd4 <Error_Handler>:
 8000bd4:	b672      	cpsid	i
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <Error_Handler+0x2>

08000bd8 <MX_SAI1_Init>:

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8000bd8:	4817      	ldr	r0, [pc, #92]	@ (8000c38 <MX_SAI1_Init+0x60>)
{
 8000bda:	b508      	push	{r3, lr}
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000bdc:	4b17      	ldr	r3, [pc, #92]	@ (8000c3c <MX_SAI1_Init+0x64>)
 8000bde:	6003      	str	r3, [r0, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000be0:	2240      	movs	r2, #64	@ 0x40
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000be2:	2300      	movs	r3, #0
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000be4:	e9c0 2311 	strd	r2, r3, [r0, #68]	@ 0x44
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000be8:	4a15      	ldr	r2, [pc, #84]	@ (8000c40 <MX_SAI1_Init+0x68>)
 8000bea:	61c2      	str	r2, [r0, #28]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 0;
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000bec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bf0:	63c2      	str	r2, [r0, #60]	@ 0x3c
  hsai_BlockA1.FrameInit.FrameLength = 8;
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000bf2:	f04f 0c08 	mov.w	ip, #8
 8000bf6:	2201      	movs	r2, #1
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000bf8:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000bfc:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000c00:	e9c0 c214 	strd	ip, r2, [r0, #80]	@ 0x50
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000c04:	e9c0 3316 	strd	r3, r3, [r0, #88]	@ 0x58
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000c08:	e9c0 3318 	strd	r3, r3, [r0, #96]	@ 0x60
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000c0c:	e9c0 321a 	strd	r3, r2, [r0, #104]	@ 0x68
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000c10:	6403      	str	r3, [r0, #64]	@ 0x40
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000c12:	6043      	str	r3, [r0, #4]
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000c14:	64c3      	str	r3, [r0, #76]	@ 0x4c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000c16:	6083      	str	r3, [r0, #8]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000c18:	6243      	str	r3, [r0, #36]	@ 0x24
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000c1a:	6183      	str	r3, [r0, #24]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000c1c:	60c3      	str	r3, [r0, #12]
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000c1e:	6303      	str	r3, [r0, #48]	@ 0x30
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8000c20:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 0;
 8000c24:	6383      	str	r3, [r0, #56]	@ 0x38
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000c26:	6703      	str	r3, [r0, #112]	@ 0x70
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000c28:	f002 f8a0 	bl	8002d6c <HAL_SAI_Init>
 8000c2c:	b118      	cbz	r0, 8000c36 <MX_SAI1_Init+0x5e>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000c2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000c32:	f7ff bfcf 	b.w	8000bd4 <Error_Handler>
}
 8000c36:	bd08      	pop	{r3, pc}
 8000c38:	20000c48 	.word	0x20000c48
 8000c3c:	40015404 	.word	0x40015404
 8000c40:	0002ee00 	.word	0x0002ee00

08000c44 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8000c44:	b570      	push	{r4, r5, r6, lr}
 8000c46:	4604      	mov	r4, r0
 8000c48:	b0ae      	sub	sp, #184	@ 0xb8

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c4a:	229c      	movs	r2, #156	@ 0x9c
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	a807      	add	r0, sp, #28
 8000c50:	f006 fa38 	bl	80070c4 <memset>
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8000c54:	6822      	ldr	r2, [r4, #0]
 8000c56:	4b20      	ldr	r3, [pc, #128]	@ (8000cd8 <HAL_SAI_MspInit+0x94>)
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d13b      	bne.n	8000cd4 <HAL_SAI_MspInit+0x90>

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c62:	e9cd 2307 	strd	r2, r3, [sp, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000c66:	9309      	str	r3, [sp, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000c68:	2110      	movs	r1, #16
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	e9cd 130a 	strd	r1, r3, [sp, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c70:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c74:	a807      	add	r0, sp, #28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000c76:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c7a:	930e      	str	r3, [sp, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c7c:	f001 fbe8 	bl	8002450 <HAL_RCCEx_PeriphCLKConfig>
 8000c80:	b108      	cbz	r0, 8000c86 <HAL_SAI_MspInit+0x42>
    {
      Error_Handler();
 8000c82:	f7ff ffa7 	bl	8000bd4 <Error_Handler>
    }

    if (SAI1_client == 0)
 8000c86:	4815      	ldr	r0, [pc, #84]	@ (8000cdc <HAL_SAI_MspInit+0x98>)
 8000c88:	6803      	ldr	r3, [r0, #0]
 8000c8a:	b94b      	cbnz	r3, 8000ca0 <HAL_SAI_MspInit+0x5c>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8000c8c:	4a14      	ldr	r2, [pc, #80]	@ (8000ce0 <HAL_SAI_MspInit+0x9c>)
 8000c8e:	6e11      	ldr	r1, [r2, #96]	@ 0x60
 8000c90:	f441 1100 	orr.w	r1, r1, #2097152	@ 0x200000
 8000c94:	6611      	str	r1, [r2, #96]	@ 0x60
 8000c96:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8000c98:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8000c9c:	9201      	str	r2, [sp, #4]
 8000c9e:	9a01      	ldr	r2, [sp, #4]
    }
    SAI1_client ++;
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	6003      	str	r3, [r0, #0]
    PB9     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PE5     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin|SAI1_FSA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2602      	movs	r6, #2
 8000ca6:	f44f 7308 	mov.w	r3, #544	@ 0x220
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000caa:	480e      	ldr	r0, [pc, #56]	@ (8000ce4 <HAL_SAI_MspInit+0xa0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2400      	movs	r4, #0
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000cae:	250d      	movs	r5, #13
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	e9cd 3602 	strd	r3, r6, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	e9cd 4404 	strd	r4, r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000cba:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbc:	f000 fb88 	bl	80013d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCKA_Pin|SAI1_SDA_Pin|SAI1_SCKA_Pin;
 8000cc0:	2364      	movs	r3, #100	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cc2:	4809      	ldr	r0, [pc, #36]	@ (8000ce8 <HAL_SAI_MspInit+0xa4>)
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000cc4:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cc6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	e9cd 3602 	strd	r3, r6, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	e9cd 4404 	strd	r4, r4, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cd0:	f000 fb7e 	bl	80013d0 <HAL_GPIO_Init>

    }
}
 8000cd4:	b02e      	add	sp, #184	@ 0xb8
 8000cd6:	bd70      	pop	{r4, r5, r6, pc}
 8000cd8:	40015404 	.word	0x40015404
 8000cdc:	20000c44 	.word	0x20000c44
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	48000400 	.word	0x48000400
 8000ce8:	48001000 	.word	0x48001000

08000cec <MX_SDMMC1_SD_Init>:
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000cec:	480a      	ldr	r0, [pc, #40]	@ (8000d18 <MX_SDMMC1_SD_Init+0x2c>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000cee:	4a0b      	ldr	r2, [pc, #44]	@ (8000d1c <MX_SDMMC1_SD_Init+0x30>)
{
 8000cf0:	b508      	push	{r3, lr}
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e9c0 2300 	strd	r2, r3, [r0]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000cf8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000cfc:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hsd1.Init.ClockDiv = 0;
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 8000d00:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000d04:	6083      	str	r3, [r0, #8]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000d06:	f002 fd53 	bl	80037b0 <HAL_SD_Init>
 8000d0a:	b118      	cbz	r0, 8000d14 <MX_SDMMC1_SD_Init+0x28>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000d0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000d10:	f7ff bf60 	b.w	8000bd4 <Error_Handler>
}
 8000d14:	bd08      	pop	{r3, pc}
 8000d16:	bf00      	nop
 8000d18:	20000cdc 	.word	0x20000cdc
 8000d1c:	50062400 	.word	0x50062400

08000d20 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d22:	b0b1      	sub	sp, #196	@ 0xc4
 8000d24:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d26:	2214      	movs	r2, #20
 8000d28:	2100      	movs	r1, #0
 8000d2a:	a804      	add	r0, sp, #16
 8000d2c:	f006 f9ca 	bl	80070c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d30:	229c      	movs	r2, #156	@ 0x9c
 8000d32:	2100      	movs	r1, #0
 8000d34:	a809      	add	r0, sp, #36	@ 0x24
 8000d36:	f006 f9c5 	bl	80070c4 <memset>
  if(sdHandle->Instance==SDMMC1)
 8000d3a:	6822      	ldr	r2, [r4, #0]
 8000d3c:	4b22      	ldr	r3, [pc, #136]	@ (8000dc8 <HAL_SD_MspInit+0xa8>)
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d140      	bne.n	8000dc4 <HAL_SD_MspInit+0xa4>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8000d42:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000d46:	9309      	str	r3, [sp, #36]	@ 0x24
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d48:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8000d4a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d4e:	9327      	str	r3, [sp, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d50:	f001 fb7e 	bl	8002450 <HAL_RCCEx_PeriphCLKConfig>
 8000d54:	b108      	cbz	r0, 8000d5a <HAL_SD_MspInit+0x3a>
    {
      Error_Handler();
 8000d56:	f7ff ff3d 	bl	8000bd4 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000d5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dcc <HAL_SD_MspInit+0xac>)
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8000d5c:	481c      	ldr	r0, [pc, #112]	@ (8000dd0 <HAL_SD_MspInit+0xb0>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000d5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d60:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8000d64:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000d66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d68:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 8000d6c:	9201      	str	r2, [sp, #4]
 8000d6e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d70:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d72:	f042 0208 	orr.w	r2, r2, #8
 8000d76:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000d78:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d7a:	f002 0208 	and.w	r2, r2, #8
 8000d7e:	9202      	str	r2, [sp, #8]
 8000d80:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d84:	f042 0204 	orr.w	r2, r2, #4
 8000d88:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8c:	f003 0304 	and.w	r3, r3, #4
 8000d90:	9303      	str	r3, [sp, #12]
 8000d92:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2702      	movs	r7, #2
 8000d96:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d98:	2600      	movs	r6, #0
 8000d9a:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000d9c:	240c      	movs	r4, #12
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	e9cd 3704 	strd	r3, r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	e9cd 6506 	strd	r6, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000da8:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8000daa:	f000 fb11 	bl	80013d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D0_Pin
 8000dae:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
                          |uSD_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db2:	4808      	ldr	r0, [pc, #32]	@ (8000dd4 <HAL_SD_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000db4:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	e9cd 3704 	strd	r3, r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbc:	e9cd 6506 	strd	r6, r5, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc0:	f000 fb06 	bl	80013d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8000dc4:	b031      	add	sp, #196	@ 0xc4
 8000dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dc8:	50062400 	.word	0x50062400
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	48000c00 	.word	0x48000c00
 8000dd4:	48000800 	.word	0x48000800

08000dd8 <MX_SPI2_Init>:
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000dd8:	4810      	ldr	r0, [pc, #64]	@ (8000e1c <MX_SPI2_Init+0x44>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000dda:	4a11      	ldr	r2, [pc, #68]	@ (8000e20 <MX_SPI2_Init+0x48>)
{
 8000ddc:	b508      	push	{r3, lr}
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000dde:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000de2:	e9c0 2300 	strd	r2, r3, [r0]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f44f 7240 	mov.w	r2, #768	@ 0x300
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000dec:	f44f 7100 	mov.w	r1, #512	@ 0x200
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000df0:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000df4:	2208      	movs	r2, #8
 8000df6:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
 8000dfa:	2107      	movs	r1, #7
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dfc:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e00:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e04:	e9c0 130b 	strd	r1, r3, [r0, #44]	@ 0x2c
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e08:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e0a:	6342      	str	r2, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e0c:	f002 fd27 	bl	800385e <HAL_SPI_Init>
 8000e10:	b118      	cbz	r0, 8000e1a <MX_SPI2_Init+0x42>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000e16:	f7ff bedd 	b.w	8000bd4 <Error_Handler>
}
 8000e1a:	bd08      	pop	{r3, pc}
 8000e1c:	20000d5c 	.word	0x20000d5c
 8000e20:	40003800 	.word	0x40003800

08000e24 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e24:	b570      	push	{r4, r5, r6, lr}
 8000e26:	4604      	mov	r4, r0
 8000e28:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2a:	2214      	movs	r2, #20
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	a803      	add	r0, sp, #12
 8000e30:	f006 f948 	bl	80070c4 <memset>
  if(spiHandle->Instance==SPI2)
 8000e34:	6822      	ldr	r2, [r4, #0]
 8000e36:	4b1d      	ldr	r3, [pc, #116]	@ (8000eac <HAL_SPI_MspInit+0x88>)
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d134      	bne.n	8000ea6 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e3c:	f503 33ec 	add.w	r3, r3, #120832	@ 0x1d800
    GPIO_InitStruct.Pin = ARD_10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 8000e40:	481b      	ldr	r0, [pc, #108]	@ (8000eb0 <HAL_SPI_MspInit+0x8c>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e42:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000e44:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000e48:	659a      	str	r2, [r3, #88]	@ 0x58
 8000e4a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000e4c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000e50:	9200      	str	r2, [sp, #0]
 8000e52:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e54:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000e5a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000e5c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e5e:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8000e62:	9201      	str	r2, [sp, #4]
 8000e64:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e68:	f042 0202 	orr.w	r2, r2, #2
 8000e6c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000e6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	9302      	str	r3, [sp, #8]
 8000e76:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2602      	movs	r6, #2
 8000e7a:	2301      	movs	r3, #1
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e7c:	2503      	movs	r5, #3
 8000e7e:	2405      	movs	r4, #5
    HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 8000e80:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e86:	e9cd 5406 	strd	r5, r4, [sp, #24]
    HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	f000 faa1 	bl	80013d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MOSI_Pin|SPI2_MISO_Pin|SPI2_CLK_Pin;
 8000e8e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e96:	4807      	ldr	r0, [pc, #28]	@ (8000eb4 <HAL_SPI_MspInit+0x90>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e98:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9e:	e9cd 3505 	strd	r3, r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea2:	f000 fa95 	bl	80013d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000ea6:	b008      	add	sp, #32
 8000ea8:	bd70      	pop	{r4, r5, r6, pc}
 8000eaa:	bf00      	nop
 8000eac:	40003800 	.word	0x40003800
 8000eb0:	48002000 	.word	0x48002000
 8000eb4:	48000400 	.word	0x48000400

08000eb8 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee4 <HAL_MspInit+0x2c>)
 8000eba:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000ebc:	f042 0201 	orr.w	r2, r2, #1
{
 8000ec0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	661a      	str	r2, [r3, #96]	@ 0x60
 8000ec4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000ec6:	f002 0201 	and.w	r2, r2, #1
 8000eca:	9200      	str	r2, [sp, #0]
 8000ecc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ece:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000ed0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000ed4:	659a      	str	r2, [r3, #88]	@ 0x58
 8000ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000edc:	9301      	str	r3, [sp, #4]
 8000ede:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee0:	b002      	add	sp, #8
 8000ee2:	4770      	bx	lr
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <NMI_Handler>

08000eea <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <HardFault_Handler>

08000eec <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <MemManage_Handler>

08000eee <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <BusFault_Handler>

08000ef0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <UsageFault_Handler>

08000ef2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef2:	4770      	bx	lr

08000ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8000ef4:	4770      	bx	lr

08000ef6 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000ef6:	4770      	bx	lr

08000ef8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef8:	f000 b9ec 	b.w	80012d4 <HAL_IncTick>

08000efc <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000efc:	4a0b      	ldr	r2, [pc, #44]	@ (8000f2c <_sbrk+0x30>)
 8000efe:	6811      	ldr	r1, [r2, #0]
{
 8000f00:	b510      	push	{r4, lr}
 8000f02:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8000f04:	b909      	cbnz	r1, 8000f0a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8000f06:	490a      	ldr	r1, [pc, #40]	@ (8000f30 <_sbrk+0x34>)
 8000f08:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f0a:	6810      	ldr	r0, [r2, #0]
 8000f0c:	4909      	ldr	r1, [pc, #36]	@ (8000f34 <_sbrk+0x38>)
 8000f0e:	4c0a      	ldr	r4, [pc, #40]	@ (8000f38 <_sbrk+0x3c>)
 8000f10:	4403      	add	r3, r0
 8000f12:	1b09      	subs	r1, r1, r4
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d906      	bls.n	8000f26 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8000f18:	f006 f932 	bl	8007180 <__errno>
 8000f1c:	230c      	movs	r3, #12
 8000f1e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000f24:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8000f26:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8000f28:	e7fc      	b.n	8000f24 <_sbrk+0x28>
 8000f2a:	bf00      	nop
 8000f2c:	20000dc0 	.word	0x20000dc0
 8000f30:	20040000 	.word	0x20040000
 8000f34:	200a0000 	.word	0x200a0000
 8000f38:	00000800 	.word	0x00000800

08000f3c <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f3c:	4a03      	ldr	r2, [pc, #12]	@ (8000f4c <SystemInit+0x10>)
 8000f3e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8000f42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f46:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f50:	4816      	ldr	r0, [pc, #88]	@ (8000fac <MX_USART2_UART_Init+0x5c>)
  huart2.Init.BaudRate = 115200;
 8000f52:	4a17      	ldr	r2, [pc, #92]	@ (8000fb0 <MX_USART2_UART_Init+0x60>)
{
 8000f54:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 115200;
 8000f56:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000f5a:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f5e:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f60:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f62:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f66:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f6a:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f6e:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f72:	6103      	str	r3, [r0, #16]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f74:	f003 f819 	bl	8003faa <HAL_UART_Init>
 8000f78:	b108      	cbz	r0, 8000f7e <MX_USART2_UART_Init+0x2e>
  {
    Error_Handler();
 8000f7a:	f7ff fe2b 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f7e:	480b      	ldr	r0, [pc, #44]	@ (8000fac <MX_USART2_UART_Init+0x5c>)
 8000f80:	2100      	movs	r1, #0
 8000f82:	f003 f880 	bl	8004086 <HAL_UARTEx_SetTxFifoThreshold>
 8000f86:	b108      	cbz	r0, 8000f8c <MX_USART2_UART_Init+0x3c>
  {
    Error_Handler();
 8000f88:	f7ff fe24 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f8c:	4807      	ldr	r0, [pc, #28]	@ (8000fac <MX_USART2_UART_Init+0x5c>)
 8000f8e:	2100      	movs	r1, #0
 8000f90:	f003 f899 	bl	80040c6 <HAL_UARTEx_SetRxFifoThreshold>
 8000f94:	b108      	cbz	r0, 8000f9a <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8000f96:	f7ff fe1d 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000f9a:	4804      	ldr	r0, [pc, #16]	@ (8000fac <MX_USART2_UART_Init+0x5c>)
 8000f9c:	f003 f858 	bl	8004050 <HAL_UARTEx_DisableFifoMode>
 8000fa0:	b118      	cbz	r0, 8000faa <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fa2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000fa6:	f7ff be15 	b.w	8000bd4 <Error_Handler>
}
 8000faa:	bd08      	pop	{r3, pc}
 8000fac:	20000e58 	.word	0x20000e58
 8000fb0:	40004400 	.word	0x40004400

08000fb4 <MX_USART3_UART_Init>:
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fb4:	4816      	ldr	r0, [pc, #88]	@ (8001010 <MX_USART3_UART_Init+0x5c>)
  huart3.Init.BaudRate = 115200;
 8000fb6:	4a17      	ldr	r2, [pc, #92]	@ (8001014 <MX_USART3_UART_Init+0x60>)
{
 8000fb8:	b508      	push	{r3, lr}
  huart3.Init.BaudRate = 115200;
 8000fba:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000fbe:	e9c0 2300 	strd	r2, r3, [r0]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc2:	2300      	movs	r3, #0
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fc4:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fc6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fca:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fce:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fd2:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fd6:	6103      	str	r3, [r0, #16]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fd8:	f002 ffe7 	bl	8003faa <HAL_UART_Init>
 8000fdc:	b108      	cbz	r0, 8000fe2 <MX_USART3_UART_Init+0x2e>
  {
    Error_Handler();
 8000fde:	f7ff fdf9 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fe2:	480b      	ldr	r0, [pc, #44]	@ (8001010 <MX_USART3_UART_Init+0x5c>)
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	f003 f84e 	bl	8004086 <HAL_UARTEx_SetTxFifoThreshold>
 8000fea:	b108      	cbz	r0, 8000ff0 <MX_USART3_UART_Init+0x3c>
  {
    Error_Handler();
 8000fec:	f7ff fdf2 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ff0:	4807      	ldr	r0, [pc, #28]	@ (8001010 <MX_USART3_UART_Init+0x5c>)
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	f003 f867 	bl	80040c6 <HAL_UARTEx_SetRxFifoThreshold>
 8000ff8:	b108      	cbz	r0, 8000ffe <MX_USART3_UART_Init+0x4a>
  {
    Error_Handler();
 8000ffa:	f7ff fdeb 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ffe:	4804      	ldr	r0, [pc, #16]	@ (8001010 <MX_USART3_UART_Init+0x5c>)
 8001000:	f003 f826 	bl	8004050 <HAL_UARTEx_DisableFifoMode>
 8001004:	b118      	cbz	r0, 800100e <MX_USART3_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001006:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800100a:	f7ff bde3 	b.w	8000bd4 <Error_Handler>
}
 800100e:	bd08      	pop	{r3, pc}
 8001010:	20000dc4 	.word	0x20000dc4
 8001014:	40004800 	.word	0x40004800

08001018 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800101a:	b0b3      	sub	sp, #204	@ 0xcc
 800101c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101e:	2214      	movs	r2, #20
 8001020:	2100      	movs	r1, #0
 8001022:	a806      	add	r0, sp, #24
 8001024:	f006 f84e 	bl	80070c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001028:	229c      	movs	r2, #156	@ 0x9c
 800102a:	2100      	movs	r1, #0
 800102c:	a80b      	add	r0, sp, #44	@ 0x2c
 800102e:	f006 f849 	bl	80070c4 <memset>
  if(uartHandle->Instance==USART2)
 8001032:	6823      	ldr	r3, [r4, #0]
 8001034:	4a37      	ldr	r2, [pc, #220]	@ (8001114 <HAL_UART_MspInit+0xfc>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d12b      	bne.n	8001092 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800103a:	2302      	movs	r3, #2
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800103c:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800103e:	930b      	str	r3, [sp, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001040:	f001 fa06 	bl	8002450 <HAL_RCCEx_PeriphCLKConfig>
 8001044:	b108      	cbz	r0, 800104a <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 8001046:	f7ff fdc5 	bl	8000bd4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800104a:	4b33      	ldr	r3, [pc, #204]	@ (8001118 <HAL_UART_MspInit+0x100>)
 800104c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800104e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001052:	659a      	str	r2, [r3, #88]	@ 0x58
 8001054:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001056:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800105a:	9201      	str	r2, [sp, #4]
 800105c:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001060:	f042 0201 	orr.w	r2, r2, #1
 8001064:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	9302      	str	r3, [sp, #8]
 800106e:	9b02      	ldr	r3, [sp, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	220c      	movs	r2, #12
 8001072:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001074:	2100      	movs	r1, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107a:	2303      	movs	r3, #3
 800107c:	e9cd 1308 	strd	r1, r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001080:	2307      	movs	r3, #7
 8001082:	930a      	str	r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001084:	a906      	add	r1, sp, #24
 8001086:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108a:	f000 f9a1 	bl	80013d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800108e:	b033      	add	sp, #204	@ 0xcc
 8001090:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(uartHandle->Instance==USART3)
 8001092:	4a22      	ldr	r2, [pc, #136]	@ (800111c <HAL_UART_MspInit+0x104>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d1fa      	bne.n	800108e <HAL_UART_MspInit+0x76>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001098:	2304      	movs	r3, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800109a:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800109c:	930b      	str	r3, [sp, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800109e:	f001 f9d7 	bl	8002450 <HAL_RCCEx_PeriphCLKConfig>
 80010a2:	b108      	cbz	r0, 80010a8 <HAL_UART_MspInit+0x90>
      Error_Handler();
 80010a4:	f7ff fd96 	bl	8000bd4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001118 <HAL_UART_MspInit+0x100>)
 80010aa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80010ac:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80010b0:	659a      	str	r2, [r3, #88]	@ 0x58
 80010b2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80010b4:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 80010b8:	9203      	str	r2, [sp, #12]
 80010ba:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010bc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80010be:	f042 0201 	orr.w	r2, r2, #1
 80010c2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80010c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80010c6:	f002 0201 	and.w	r2, r2, #1
 80010ca:	9204      	str	r2, [sp, #16]
 80010cc:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80010d0:	f042 0202 	orr.w	r2, r2, #2
 80010d4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80010d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	9305      	str	r3, [sp, #20]
 80010de:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e0:	2702      	movs	r7, #2
 80010e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e6:	2600      	movs	r6, #0
 80010e8:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010ea:	2407      	movs	r4, #7
    HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 80010ec:	a906      	add	r1, sp, #24
 80010ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f2:	e9cd 3706 	strd	r3, r7, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f6:	e9cd 6508 	strd	r6, r5, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010fa:	940a      	str	r4, [sp, #40]	@ 0x28
    HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f000 f968 	bl	80013d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 8001100:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	e9cd 3706 	strd	r3, r7, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001108:	e9cd 6508 	strd	r6, r5, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110c:	4804      	ldr	r0, [pc, #16]	@ (8001120 <HAL_UART_MspInit+0x108>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800110e:	940a      	str	r4, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001110:	a906      	add	r1, sp, #24
 8001112:	e7ba      	b.n	800108a <HAL_UART_MspInit+0x72>
 8001114:	40004400 	.word	0x40004400
 8001118:	40021000 	.word	0x40021000
 800111c:	40004800 	.word	0x40004800
 8001120:	48000400 	.word	0x48000400

08001124 <MX_USB_OTG_FS_PCD_Init>:
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001124:	480a      	ldr	r0, [pc, #40]	@ (8001150 <MX_USB_OTG_FS_PCD_Init+0x2c>)
{
 8001126:	b508      	push	{r3, lr}
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001128:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800112c:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800112e:	2306      	movs	r3, #6
 8001130:	7103      	strb	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001132:	2302      	movs	r3, #2
 8001134:	71c3      	strb	r3, [r0, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001136:	7243      	strb	r3, [r0, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001138:	2300      	movs	r3, #0
 800113a:	8143      	strh	r3, [r0, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800113c:	60c3      	str	r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800113e:	f000 fac2 	bl	80016c6 <HAL_PCD_Init>
 8001142:	b118      	cbz	r0, 800114c <MX_USB_OTG_FS_PCD_Init+0x28>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001144:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001148:	f7ff bd44 	b.w	8000bd4 <Error_Handler>
}
 800114c:	bd08      	pop	{r3, pc}
 800114e:	bf00      	nop
 8001150:	20000eec 	.word	0x20000eec

08001154 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001154:	b530      	push	{r4, r5, lr}
 8001156:	b0b1      	sub	sp, #196	@ 0xc4
 8001158:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115a:	2214      	movs	r2, #20
 800115c:	2100      	movs	r1, #0
 800115e:	a804      	add	r0, sp, #16
 8001160:	f005 ffb0 	bl	80070c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001164:	229c      	movs	r2, #156	@ 0x9c
 8001166:	2100      	movs	r1, #0
 8001168:	a809      	add	r0, sp, #36	@ 0x24
 800116a:	f005 ffab 	bl	80070c4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800116e:	6823      	ldr	r3, [r4, #0]
 8001170:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001174:	d147      	bne.n	8001206 <HAL_PCD_MspInit+0xb2>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001176:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800117a:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800117c:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800117e:	f001 f967 	bl	8002450 <HAL_RCCEx_PeriphCLKConfig>
 8001182:	b108      	cbz	r0, 8001188 <HAL_PCD_MspInit+0x34>
    {
      Error_Handler();
 8001184:	f7ff fd26 	bl	8000bd4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001188:	4c21      	ldr	r4, [pc, #132]	@ (8001210 <HAL_PCD_MspInit+0xbc>)
 800118a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001192:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	9301      	str	r3, [sp, #4]
    PA12     ------> USB_OTG_FS_DP
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_OTGFS_ID_Pin|USB_OTG_FS_DP_Pin|USB_OTGFS_DM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	f44f 52e0 	mov.w	r2, #7168	@ 0x1c00
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a6:	2500      	movs	r5, #0
 80011a8:	2303      	movs	r3, #3
 80011aa:	e9cd 5306 	strd	r5, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ae:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011b0:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011b6:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b8:	f000 f90a 	bl	80013d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTGFS_VBUS_Pin;
 80011bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_OTGFS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80011c0:	a904      	add	r1, sp, #16
 80011c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c6:	e9cd 3504 	strd	r3, r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(USB_OTGFS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f000 f900 	bl	80013d0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011d0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80011d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011d6:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80011d8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80011da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011de:	9302      	str	r3, [sp, #8]
 80011e0:	9b02      	ldr	r3, [sp, #8]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80011e4:	00d9      	lsls	r1, r3, #3
 80011e6:	d410      	bmi.n	800120a <HAL_PCD_MspInit+0xb6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80011ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ee:	65a3      	str	r3, [r4, #88]	@ 0x58
 80011f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f6:	9303      	str	r3, [sp, #12]
 80011f8:	9b03      	ldr	r3, [sp, #12]
      HAL_PWREx_EnableVddUSB();
 80011fa:	f000 fb51 	bl	80018a0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011fe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001200:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001204:	65a3      	str	r3, [r4, #88]	@ 0x58
    }
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001206:	b031      	add	sp, #196	@ 0xc4
 8001208:	bd30      	pop	{r4, r5, pc}
      HAL_PWREx_EnableVddUSB();
 800120a:	f000 fb49 	bl	80018a0 <HAL_PWREx_EnableVddUSB>
}
 800120e:	e7fa      	b.n	8001206 <HAL_PCD_MspInit+0xb2>
 8001210:	40021000 	.word	0x40021000

08001214 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001214:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800124c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001218:	f7ff fe90 	bl	8000f3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800121c:	480c      	ldr	r0, [pc, #48]	@ (8001250 <LoopForever+0x6>)
  ldr r1, =_edata
 800121e:	490d      	ldr	r1, [pc, #52]	@ (8001254 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001220:	4a0d      	ldr	r2, [pc, #52]	@ (8001258 <LoopForever+0xe>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001224:	e002      	b.n	800122c <LoopCopyDataInit>

08001226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800122a:	3304      	adds	r3, #4

0800122c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800122c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800122e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001230:	d3f9      	bcc.n	8001226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001232:	4a0a      	ldr	r2, [pc, #40]	@ (800125c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001234:	4c0a      	ldr	r4, [pc, #40]	@ (8001260 <LoopForever+0x16>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001238:	e001      	b.n	800123e <LoopFillZerobss>

0800123a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800123a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800123c:	3204      	adds	r2, #4

0800123e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800123e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001240:	d3fb      	bcc.n	800123a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001242:	f005 ffa3 	bl	800718c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001246:	f7ff fca9 	bl	8000b9c <main>

0800124a <LoopForever>:

LoopForever:
    b LoopForever
 800124a:	e7fe      	b.n	800124a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800124c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001254:	20000b64 	.word	0x20000b64
  ldr r2, =_sidata
 8001258:	08055580 	.word	0x08055580
  ldr r2, =_sbss
 800125c:	20000b80 	.word	0x20000b80
  ldr r4, =_ebss
 8001260:	20001fe0 	.word	0x20001fe0

08001264 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001264:	e7fe      	b.n	8001264 <ADC1_IRQHandler>
	...

08001268 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001268:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800126a:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <HAL_InitTick+0x40>)
 800126c:	781a      	ldrb	r2, [r3, #0]
{
 800126e:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8001270:	b90a      	cbnz	r2, 8001276 <HAL_InitTick+0xe>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8001272:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8001274:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001276:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800127a:	fbb3 f3f2 	udiv	r3, r3, r2
 800127e:	4a0b      	ldr	r2, [pc, #44]	@ (80012ac <HAL_InitTick+0x44>)
 8001280:	6810      	ldr	r0, [r2, #0]
 8001282:	fbb0 f0f3 	udiv	r0, r0, r3
 8001286:	f000 f88f 	bl	80013a8 <HAL_SYSTICK_Config>
 800128a:	4604      	mov	r4, r0
 800128c:	2800      	cmp	r0, #0
 800128e:	d1f0      	bne.n	8001272 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001290:	2d0f      	cmp	r5, #15
 8001292:	d8ee      	bhi.n	8001272 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001294:	4602      	mov	r2, r0
 8001296:	4629      	mov	r1, r5
 8001298:	f04f 30ff 	mov.w	r0, #4294967295
 800129c:	f000 f852 	bl	8001344 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012a0:	4b03      	ldr	r3, [pc, #12]	@ (80012b0 <HAL_InitTick+0x48>)
 80012a2:	4620      	mov	r0, r4
 80012a4:	601d      	str	r5, [r3, #0]
  return status;
 80012a6:	e7e5      	b.n	8001274 <HAL_InitTick+0xc>
 80012a8:	20000004 	.word	0x20000004
 80012ac:	20000000 	.word	0x20000000
 80012b0:	20000008 	.word	0x20000008

080012b4 <HAL_Init>:
{
 80012b4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b6:	2003      	movs	r0, #3
 80012b8:	f000 f832 	bl	8001320 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012bc:	2000      	movs	r0, #0
 80012be:	f7ff ffd3 	bl	8001268 <HAL_InitTick>
 80012c2:	4604      	mov	r4, r0
 80012c4:	b918      	cbnz	r0, 80012ce <HAL_Init+0x1a>
    HAL_MspInit();
 80012c6:	f7ff fdf7 	bl	8000eb8 <HAL_MspInit>
}
 80012ca:	4620      	mov	r0, r4
 80012cc:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80012ce:	2401      	movs	r4, #1
 80012d0:	e7fb      	b.n	80012ca <HAL_Init+0x16>
	...

080012d4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80012d4:	4a03      	ldr	r2, [pc, #12]	@ (80012e4 <HAL_IncTick+0x10>)
 80012d6:	4b04      	ldr	r3, [pc, #16]	@ (80012e8 <HAL_IncTick+0x14>)
 80012d8:	6811      	ldr	r1, [r2, #0]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	440b      	add	r3, r1
 80012de:	6013      	str	r3, [r2, #0]
}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	200013d0 	.word	0x200013d0
 80012e8:	20000004 	.word	0x20000004

080012ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80012ec:	4b01      	ldr	r3, [pc, #4]	@ (80012f4 <HAL_GetTick+0x8>)
 80012ee:	6818      	ldr	r0, [r3, #0]
}
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	200013d0 	.word	0x200013d0

080012f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012f8:	b538      	push	{r3, r4, r5, lr}
 80012fa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80012fc:	f7ff fff6 	bl	80012ec <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001300:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 8001302:	bf1c      	itt	ne
 8001304:	4b05      	ldrne	r3, [pc, #20]	@ (800131c <HAL_Delay+0x24>)
 8001306:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001308:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 800130a:	bf18      	it	ne
 800130c:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800130e:	f7ff ffed 	bl	80012ec <HAL_GetTick>
 8001312:	1b43      	subs	r3, r0, r5
 8001314:	42a3      	cmp	r3, r4
 8001316:	d3fa      	bcc.n	800130e <HAL_Delay+0x16>
  {
  }
}
 8001318:	bd38      	pop	{r3, r4, r5, pc}
 800131a:	bf00      	nop
 800131c:	20000004 	.word	0x20000004

08001320 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001320:	4907      	ldr	r1, [pc, #28]	@ (8001340 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001322:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001324:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001328:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132a:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800132c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001330:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001334:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001338:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800133c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800133e:	4770      	bx	lr
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001344:	4b16      	ldr	r3, [pc, #88]	@ (80013a0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001346:	b530      	push	{r4, r5, lr}
 8001348:	68dc      	ldr	r4, [r3, #12]
 800134a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800134e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001352:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001354:	2b04      	cmp	r3, #4
 8001356:	bf28      	it	cs
 8001358:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001360:	bf8c      	ite	hi
 8001362:	3c03      	subhi	r4, #3
 8001364:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001366:	fa05 f303 	lsl.w	r3, r5, r3
 800136a:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800136e:	40a5      	lsls	r5, r4
 8001370:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001374:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8001376:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137c:	bfac      	ite	ge
 800137e:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001382:	4a08      	ldrlt	r2, [pc, #32]	@ (80013a4 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001384:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001388:	bfb8      	it	lt
 800138a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138e:	b2db      	uxtb	r3, r3
 8001390:	bfaa      	itet	ge
 8001392:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001396:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001398:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800139c:	bd30      	pop	{r4, r5, pc}
 800139e:	bf00      	nop
 80013a0:	e000ed00 	.word	0xe000ed00
 80013a4:	e000ed14 	.word	0xe000ed14

080013a8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a8:	3801      	subs	r0, #1
 80013aa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80013ae:	d20b      	bcs.n	80013c8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b4:	4a05      	ldr	r2, [pc, #20]	@ (80013cc <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b6:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b8:	21f0      	movs	r1, #240	@ 0xf0
 80013ba:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013be:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c0:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c2:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80013c8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80013ca:	4770      	bx	lr
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d4:	f8df 91a0 	ldr.w	r9, [pc, #416]	@ 8001578 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013d8:	4c65      	ldr	r4, [pc, #404]	@ (8001570 <HAL_GPIO_Init+0x1a0>)
  uint32_t position = 0x00u;
 80013da:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013dc:	680a      	ldr	r2, [r1, #0]
 80013de:	fa32 f503 	lsrs.w	r5, r2, r3
 80013e2:	d102      	bne.n	80013ea <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 80013e4:	b003      	add	sp, #12
 80013e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013ea:	2501      	movs	r5, #1
 80013ec:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 80013f0:	ea18 0202 	ands.w	r2, r8, r2
 80013f4:	f000 80ac 	beq.w	8001550 <HAL_GPIO_Init+0x180>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013f8:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013fa:	2703      	movs	r7, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013fc:	f006 0503 	and.w	r5, r6, #3
 8001400:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001404:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001408:	1e6f      	subs	r7, r5, #1
 800140a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800140c:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001410:	d834      	bhi.n	800147c <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8001412:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001414:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001418:	68cf      	ldr	r7, [r1, #12]
 800141a:	fa07 f70e 	lsl.w	r7, r7, lr
 800141e:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001422:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001424:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001426:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800142a:	f3c6 1700 	ubfx	r7, r6, #4, #1
 800142e:	409f      	lsls	r7, r3
 8001430:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8001434:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001436:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001438:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800143c:	688f      	ldr	r7, [r1, #8]
 800143e:	fa07 f70e 	lsl.w	r7, r7, lr
 8001442:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001446:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8001448:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800144a:	d119      	bne.n	8001480 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 800144c:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8001450:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001454:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001458:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800145c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8001460:	f04f 0b0f 	mov.w	fp, #15
 8001464:	fa0b fb0a 	lsl.w	fp, fp, sl
 8001468:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800146c:	690f      	ldr	r7, [r1, #16]
 800146e:	fa07 f70a 	lsl.w	r7, r7, sl
 8001472:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 8001476:	f8c8 7020 	str.w	r7, [r8, #32]
 800147a:	e001      	b.n	8001480 <HAL_GPIO_Init+0xb0>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800147c:	2d03      	cmp	r5, #3
 800147e:	d1da      	bne.n	8001436 <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 8001480:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001482:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001486:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800148a:	433d      	orrs	r5, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800148c:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8001490:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001492:	d05d      	beq.n	8001550 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001494:	f8d9 5060 	ldr.w	r5, [r9, #96]	@ 0x60
 8001498:	f045 0501 	orr.w	r5, r5, #1
 800149c:	f8c9 5060 	str.w	r5, [r9, #96]	@ 0x60
 80014a0:	f8d9 5060 	ldr.w	r5, [r9, #96]	@ 0x60
 80014a4:	f023 0703 	bic.w	r7, r3, #3
 80014a8:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 80014ac:	f005 0501 	and.w	r5, r5, #1
 80014b0:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
 80014b4:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014b6:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ba:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80014bc:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014be:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80014c2:	f04f 0e0f 	mov.w	lr, #15
 80014c6:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014ca:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014ce:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014d2:	d03f      	beq.n	8001554 <HAL_GPIO_Init+0x184>
 80014d4:	4d27      	ldr	r5, [pc, #156]	@ (8001574 <HAL_GPIO_Init+0x1a4>)
 80014d6:	42a8      	cmp	r0, r5
 80014d8:	d03e      	beq.n	8001558 <HAL_GPIO_Init+0x188>
 80014da:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80014de:	42a8      	cmp	r0, r5
 80014e0:	d03c      	beq.n	800155c <HAL_GPIO_Init+0x18c>
 80014e2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80014e6:	42a8      	cmp	r0, r5
 80014e8:	d03a      	beq.n	8001560 <HAL_GPIO_Init+0x190>
 80014ea:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80014ee:	42a8      	cmp	r0, r5
 80014f0:	d038      	beq.n	8001564 <HAL_GPIO_Init+0x194>
 80014f2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80014f6:	42a8      	cmp	r0, r5
 80014f8:	d036      	beq.n	8001568 <HAL_GPIO_Init+0x198>
 80014fa:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80014fe:	42a8      	cmp	r0, r5
 8001500:	d034      	beq.n	800156c <HAL_GPIO_Init+0x19c>
 8001502:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001506:	42a8      	cmp	r0, r5
 8001508:	bf14      	ite	ne
 800150a:	2508      	movne	r5, #8
 800150c:	2507      	moveq	r5, #7
 800150e:	fa05 f50c 	lsl.w	r5, r5, ip
 8001512:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001516:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR1;
 8001518:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 800151a:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800151c:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~(iocurrent);
 8001520:	bf0c      	ite	eq
 8001522:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001524:	4315      	orrne	r5, r2
        EXTI->RTSR1 = temp;
 8001526:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8001528:	68e5      	ldr	r5, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800152a:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~(iocurrent);
 800152e:	bf0c      	ite	eq
 8001530:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001532:	4315      	orrne	r5, r2
        EXTI->FTSR1 = temp;
 8001534:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR1;
 8001536:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001538:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~(iocurrent);
 800153c:	bf0c      	ite	eq
 800153e:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001540:	4315      	orrne	r5, r2
        EXTI->EMR1 = temp;
 8001542:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR1;
 8001544:	6825      	ldr	r5, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001546:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8001548:	bf54      	ite	pl
 800154a:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800154c:	4315      	orrmi	r5, r2
        EXTI->IMR1 = temp;
 800154e:	6025      	str	r5, [r4, #0]
    position++;
 8001550:	3301      	adds	r3, #1
 8001552:	e743      	b.n	80013dc <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001554:	2500      	movs	r5, #0
 8001556:	e7da      	b.n	800150e <HAL_GPIO_Init+0x13e>
 8001558:	2501      	movs	r5, #1
 800155a:	e7d8      	b.n	800150e <HAL_GPIO_Init+0x13e>
 800155c:	2502      	movs	r5, #2
 800155e:	e7d6      	b.n	800150e <HAL_GPIO_Init+0x13e>
 8001560:	2503      	movs	r5, #3
 8001562:	e7d4      	b.n	800150e <HAL_GPIO_Init+0x13e>
 8001564:	2504      	movs	r5, #4
 8001566:	e7d2      	b.n	800150e <HAL_GPIO_Init+0x13e>
 8001568:	2505      	movs	r5, #5
 800156a:	e7d0      	b.n	800150e <HAL_GPIO_Init+0x13e>
 800156c:	2506      	movs	r5, #6
 800156e:	e7ce      	b.n	800150e <HAL_GPIO_Init+0x13e>
 8001570:	40010400 	.word	0x40010400
 8001574:	48000400 	.word	0x48000400
 8001578:	40021000 	.word	0x40021000

0800157c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800157c:	b10a      	cbz	r2, 8001582 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800157e:	6181      	str	r1, [r0, #24]
 8001580:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001582:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8001584:	4770      	bx	lr

08001586 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001586:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001588:	4604      	mov	r4, r0
 800158a:	2800      	cmp	r0, #0
 800158c:	d04e      	beq.n	800162c <HAL_I2C_Init+0xa6>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800158e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001592:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001596:	b91b      	cbnz	r3, 80015a0 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001598:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800159c:	f7ff fa66 	bl	8000a6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015a0:	2324      	movs	r3, #36	@ 0x24
 80015a2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015a6:	6823      	ldr	r3, [r4, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	f022 0201 	bic.w	r2, r2, #1
 80015ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015b0:	6862      	ldr	r2, [r4, #4]
 80015b2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015b6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015b8:	689a      	ldr	r2, [r3, #8]
 80015ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80015be:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015c0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015c4:	2901      	cmp	r1, #1
 80015c6:	d106      	bne.n	80015d6 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80015cc:	609a      	str	r2, [r3, #8]
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015d4:	e007      	b.n	80015e6 <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015d6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015da:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015dc:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015de:	d1f6      	bne.n	80015ce <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80015e6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80015ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80015f2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015f4:	68da      	ldr	r2, [r3, #12]
 80015f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80015fa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015fc:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8001600:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001602:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001604:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001608:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800160a:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800160e:	430a      	orrs	r2, r1
 8001610:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	f042 0201 	orr.w	r2, r2, #1
 8001618:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800161a:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800161c:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800161e:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001620:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001624:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001626:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42

  return HAL_OK;
}
 800162a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800162c:	2001      	movs	r0, #1
 800162e:	e7fc      	b.n	800162a <HAL_I2C_Init+0xa4>

08001630 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001630:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001632:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8001636:	2a20      	cmp	r2, #32
{
 8001638:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800163a:	b2d4      	uxtb	r4, r2
 800163c:	d11c      	bne.n	8001678 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800163e:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8001642:	2a01      	cmp	r2, #1
 8001644:	d018      	beq.n	8001678 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001646:	2224      	movs	r2, #36	@ 0x24
 8001648:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800164c:	6802      	ldr	r2, [r0, #0]
 800164e:	6810      	ldr	r0, [r2, #0]
 8001650:	f020 0001 	bic.w	r0, r0, #1
 8001654:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001656:	6810      	ldr	r0, [r2, #0]
 8001658:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 800165c:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800165e:	6810      	ldr	r0, [r2, #0]
 8001660:	4301      	orrs	r1, r0
 8001662:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001664:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001666:	2000      	movs	r0, #0
    __HAL_I2C_ENABLE(hi2c);
 8001668:	f041 0101 	orr.w	r1, r1, #1
 800166c:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800166e:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8001672:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001676:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8001678:	2002      	movs	r0, #2
 800167a:	e7fc      	b.n	8001676 <HAL_I2CEx_ConfigAnalogFilter+0x46>

0800167c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800167c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800167e:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8001682:	2a20      	cmp	r2, #32
{
 8001684:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001686:	b2d4      	uxtb	r4, r2
 8001688:	d11b      	bne.n	80016c2 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800168a:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800168e:	2a01      	cmp	r2, #1
 8001690:	d017      	beq.n	80016c2 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001692:	2224      	movs	r2, #36	@ 0x24
 8001694:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001698:	6802      	ldr	r2, [r0, #0]
 800169a:	6810      	ldr	r0, [r2, #0]
 800169c:	f020 0001 	bic.w	r0, r0, #1
 80016a0:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80016a2:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80016a4:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80016a8:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80016ac:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016ae:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016b0:	2000      	movs	r0, #0
    __HAL_I2C_ENABLE(hi2c);
 80016b2:	f041 0101 	orr.w	r1, r1, #1
 80016b6:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80016b8:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80016bc:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80016c0:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 80016c2:	2002      	movs	r0, #2
 80016c4:	e7fc      	b.n	80016c0 <HAL_I2CEx_ConfigDigitalFilter+0x44>

080016c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80016c8:	4604      	mov	r4, r0
 80016ca:	b1f0      	cbz	r0, 800170a <HAL_PCD_Init+0x44>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016cc:	f890 3495 	ldrb.w	r3, [r0, #1173]	@ 0x495
 80016d0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80016d4:	b91b      	cbnz	r3, 80016de <HAL_PCD_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016d6:	f880 2494 	strb.w	r2, [r0, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016da:	f7ff fd3b 	bl	8001154 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016de:	2303      	movs	r3, #3
 80016e0:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	71a3      	strb	r3, [r4, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016e8:	6820      	ldr	r0, [r4, #0]
 80016ea:	f003 f8e7 	bl	80048bc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016ee:	7c23      	ldrb	r3, [r4, #16]
 80016f0:	f88d 3000 	strb.w	r3, [sp]
 80016f4:	1d25      	adds	r5, r4, #4
 80016f6:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80016fa:	6820      	ldr	r0, [r4, #0]
 80016fc:	f003 f8a5 	bl	800484a <USB_CoreInit>
 8001700:	4601      	mov	r1, r0
 8001702:	b130      	cbz	r0, 8001712 <HAL_PCD_Init+0x4c>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001704:	2302      	movs	r3, #2
 8001706:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
    return HAL_ERROR;
 800170a:	2501      	movs	r5, #1
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800170c:	4628      	mov	r0, r5
 800170e:	b003      	add	sp, #12
 8001710:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001712:	6820      	ldr	r0, [r4, #0]
 8001714:	f003 f8d8 	bl	80048c8 <USB_SetCurrentMode>
 8001718:	2800      	cmp	r0, #0
 800171a:	d1f3      	bne.n	8001704 <HAL_PCD_Init+0x3e>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800171c:	7926      	ldrb	r6, [r4, #4]
 800171e:	f104 0314 	add.w	r3, r4, #20
    hpcd->IN_ep[i].is_in = 1U;
 8001722:	2701      	movs	r7, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001724:	4602      	mov	r2, r0
 8001726:	b2c1      	uxtb	r1, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001728:	428e      	cmp	r6, r1
 800172a:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 800172e:	d821      	bhi.n	8001774 <HAL_PCD_Init+0xae>
 8001730:	2100      	movs	r1, #0
 8001732:	f504 7315 	add.w	r3, r4, #596	@ 0x254
    hpcd->OUT_ep[i].is_in = 0U;
 8001736:	460a      	mov	r2, r1
 8001738:	b2c8      	uxtb	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800173a:	4286      	cmp	r6, r0
 800173c:	f103 0324 	add.w	r3, r3, #36	@ 0x24
 8001740:	d826      	bhi.n	8001790 <HAL_PCD_Init+0xca>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001742:	7c23      	ldrb	r3, [r4, #16]
 8001744:	f88d 3000 	strb.w	r3, [sp]
 8001748:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 800174c:	6820      	ldr	r0, [r4, #0]
 800174e:	f003 f937 	bl	80049c0 <USB_DevInit>
 8001752:	4605      	mov	r5, r0
 8001754:	2800      	cmp	r0, #0
 8001756:	d1d5      	bne.n	8001704 <HAL_PCD_Init+0x3e>
  hpcd->State = HAL_PCD_STATE_READY;
 8001758:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 800175a:	7460      	strb	r0, [r4, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800175c:	f884 3495 	strb.w	r3, [r4, #1173]	@ 0x495
  if (hpcd->Init.lpm_enable == 1U)
 8001760:	7b23      	ldrb	r3, [r4, #12]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d102      	bne.n	800176c <HAL_PCD_Init+0xa6>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001766:	4620      	mov	r0, r4
 8001768:	f000 f81e 	bl	80017a8 <HAL_PCDEx_ActivateLPM>
  (void)USB_DevDisconnect(hpcd->Instance);
 800176c:	6820      	ldr	r0, [r4, #0]
 800176e:	f003 f9cd 	bl	8004b0c <USB_DevDisconnect>
  return HAL_OK;
 8001772:	e7cb      	b.n	800170c <HAL_PCD_Init+0x46>
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001774:	f823 0c0a 	strh.w	r0, [r3, #-10]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001778:	e943 2207 	strd	r2, r2, [r3, #-28]
    hpcd->IN_ep[i].is_in = 1U;
 800177c:	f803 7c23 	strb.w	r7, [r3, #-35]
    hpcd->IN_ep[i].num = i;
 8001780:	f803 1c24 	strb.w	r1, [r3, #-36]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001784:	f803 2c20 	strb.w	r2, [r3, #-32]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001788:	f843 2c14 	str.w	r2, [r3, #-20]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800178c:	3001      	adds	r0, #1
 800178e:	e7ca      	b.n	8001726 <HAL_PCD_Init+0x60>
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001790:	e943 2207 	strd	r2, r2, [r3, #-28]
    hpcd->OUT_ep[i].is_in = 0U;
 8001794:	f803 2c23 	strb.w	r2, [r3, #-35]
    hpcd->OUT_ep[i].num = i;
 8001798:	f803 0c24 	strb.w	r0, [r3, #-36]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800179c:	f803 2c20 	strb.w	r2, [r3, #-32]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80017a0:	f843 2c14 	str.w	r2, [r3, #-20]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017a4:	3101      	adds	r1, #1
 80017a6:	e7c7      	b.n	8001738 <HAL_PCD_Init+0x72>

080017a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80017a8:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
 80017aa:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017ac:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
 80017ae:	f8c0 14d8 	str.w	r1, [r0, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80017b2:	2000      	movs	r0, #0
 80017b4:	f883 04cc 	strb.w	r0, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80017b8:	6993      	ldr	r3, [r2, #24]
 80017ba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80017be:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80017c0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80017c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017c6:	f043 0303 	orr.w	r3, r3, #3
 80017ca:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
}
 80017cc:	4770      	bx	lr
	...

080017d0 <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017d0:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <HAL_PWREx_GetVoltageRange+0x1c>)
 80017d2:	6818      	ldr	r0, [r3, #0]
 80017d4:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 80017d8:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80017dc:	bf1e      	ittt	ne
 80017de:	f8d3 0080 	ldrne.w	r0, [r3, #128]	@ 0x80
 80017e2:	f3c0 2000 	ubfxne	r0, r0, #8, #1
 80017e6:	0240      	lslne	r0, r0, #9
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40007000 	.word	0x40007000

080017f0 <HAL_PWREx_ControlVoltageScaling>:
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017f0:	4b28      	ldr	r3, [pc, #160]	@ (8001894 <HAL_PWREx_ControlVoltageScaling+0xa4>)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017f2:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017f4:	bb18      	cbnz	r0, 800183e <HAL_PWREx_ControlVoltageScaling+0x4e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017f6:	f402 62c0 	and.w	r2, r2, #1536	@ 0x600
 80017fa:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017fe:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001802:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001806:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800180a:	d140      	bne.n	800188e <HAL_PWREx_ControlVoltageScaling+0x9e>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	f422 62c0 	bic.w	r2, r2, #1536	@ 0x600
 8001812:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001816:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001818:	4a1f      	ldr	r2, [pc, #124]	@ (8001898 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800181a:	6812      	ldr	r2, [r2, #0]
 800181c:	2132      	movs	r1, #50	@ 0x32
 800181e:	434a      	muls	r2, r1
 8001820:	491e      	ldr	r1, [pc, #120]	@ (800189c <HAL_PWREx_ControlVoltageScaling+0xac>)
 8001822:	fbb2 f2f1 	udiv	r2, r2, r1
 8001826:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001828:	6959      	ldr	r1, [r3, #20]
 800182a:	0549      	lsls	r1, r1, #21
 800182c:	d500      	bpl.n	8001830 <HAL_PWREx_ControlVoltageScaling+0x40>
 800182e:	b922      	cbnz	r2, 800183a <HAL_PWREx_ControlVoltageScaling+0x4a>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	0558      	lsls	r0, r3, #21
 8001834:	d52b      	bpl.n	800188e <HAL_PWREx_ControlVoltageScaling+0x9e>
      {
        return HAL_TIMEOUT;
 8001836:	2003      	movs	r0, #3
 8001838:	4770      	bx	lr
        wait_loop_index--;
 800183a:	3a01      	subs	r2, #1
 800183c:	e7f4      	b.n	8001828 <HAL_PWREx_ControlVoltageScaling+0x38>
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800183e:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8001842:	d11f      	bne.n	8001884 <HAL_PWREx_ControlVoltageScaling+0x94>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001844:	f402 62c0 	and.w	r2, r2, #1536	@ 0x600
 8001848:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800184c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001850:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001854:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001858:	d119      	bne.n	800188e <HAL_PWREx_ControlVoltageScaling+0x9e>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	f422 62c0 	bic.w	r2, r2, #1536	@ 0x600
 8001860:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001864:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001866:	4a0c      	ldr	r2, [pc, #48]	@ (8001898 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001868:	6812      	ldr	r2, [r2, #0]
 800186a:	2132      	movs	r1, #50	@ 0x32
 800186c:	434a      	muls	r2, r1
 800186e:	490b      	ldr	r1, [pc, #44]	@ (800189c <HAL_PWREx_ControlVoltageScaling+0xac>)
 8001870:	fbb2 f2f1 	udiv	r2, r2, r1
 8001874:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001876:	6959      	ldr	r1, [r3, #20]
 8001878:	0549      	lsls	r1, r1, #21
 800187a:	d5d9      	bpl.n	8001830 <HAL_PWREx_ControlVoltageScaling+0x40>
 800187c:	2a00      	cmp	r2, #0
 800187e:	d0d7      	beq.n	8001830 <HAL_PWREx_ControlVoltageScaling+0x40>
      {
        wait_loop_index--;
 8001880:	3a01      	subs	r2, #1
 8001882:	e7f8      	b.n	8001876 <HAL_PWREx_ControlVoltageScaling+0x86>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001884:	f422 62c0 	bic.w	r2, r2, #1536	@ 0x600
 8001888:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800188c:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800188e:	2000      	movs	r0, #0
}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40007000 	.word	0x40007000
 8001898:	20000000 	.word	0x20000000
 800189c:	000f4240 	.word	0x000f4240

080018a0 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80018a0:	4a02      	ldr	r2, [pc, #8]	@ (80018ac <HAL_PWREx_EnableVddUSB+0xc>)
 80018a2:	6853      	ldr	r3, [r2, #4]
 80018a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018a8:	6053      	str	r3, [r2, #4]
}
 80018aa:	4770      	bx	lr
 80018ac:	40007000 	.word	0x40007000

080018b0 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80018b0:	4a02      	ldr	r2, [pc, #8]	@ (80018bc <HAL_PWREx_EnableVddIO2+0xc>)
 80018b2:	6853      	ldr	r3, [r2, #4]
 80018b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018b8:	6053      	str	r3, [r2, #4]
}
 80018ba:	4770      	bx	lr
 80018bc:	40007000 	.word	0x40007000

080018c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80018c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80018c2:	4d1c      	ldr	r5, [pc, #112]	@ (8001934 <RCC_SetFlashLatencyFromMSIRange+0x74>)
 80018c4:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80018c6:	00da      	lsls	r2, r3, #3
{
 80018c8:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80018ca:	d518      	bpl.n	80018fe <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80018cc:	f7ff ff80 	bl	80017d0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018d0:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80018d4:	d123      	bne.n	800191e <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80018d6:	2c80      	cmp	r4, #128	@ 0x80
 80018d8:	d928      	bls.n	800192c <RCC_SetFlashLatencyFromMSIRange+0x6c>
    else
    {
      if(msirange == RCC_MSIRANGE_7)
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018da:	2ca0      	cmp	r4, #160	@ 0xa0
 80018dc:	bf8c      	ite	hi
 80018de:	2402      	movhi	r4, #2
 80018e0:	2401      	movls	r4, #1
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80018e2:	4915      	ldr	r1, [pc, #84]	@ (8001938 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 80018e4:	680a      	ldr	r2, [r1, #0]
 80018e6:	f022 020f 	bic.w	r2, r2, #15
 80018ea:	4322      	orrs	r2, r4
 80018ec:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80018ee:	6808      	ldr	r0, [r1, #0]
 80018f0:	f000 000f 	and.w	r0, r0, #15
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80018f4:	1b00      	subs	r0, r0, r4
 80018f6:	bf18      	it	ne
 80018f8:	2001      	movne	r0, #1
 80018fa:	b003      	add	sp, #12
 80018fc:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80018fe:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001904:	65ab      	str	r3, [r5, #88]	@ 0x58
 8001906:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001908:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800190c:	9301      	str	r3, [sp, #4]
 800190e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001910:	f7ff ff5e 	bl	80017d0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001914:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8001916:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800191a:	65ab      	str	r3, [r5, #88]	@ 0x58
 800191c:	e7d8      	b.n	80018d0 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange >= RCC_MSIRANGE_8)
 800191e:	2c7f      	cmp	r4, #127	@ 0x7f
 8001920:	d806      	bhi.n	8001930 <RCC_SetFlashLatencyFromMSIRange+0x70>
      if(msirange == RCC_MSIRANGE_7)
 8001922:	f1a4 0370 	sub.w	r3, r4, #112	@ 0x70
 8001926:	425c      	negs	r4, r3
 8001928:	415c      	adcs	r4, r3
 800192a:	e7da      	b.n	80018e2 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800192c:	2400      	movs	r4, #0
 800192e:	e7d8      	b.n	80018e2 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001930:	2402      	movs	r4, #2
 8001932:	e7d6      	b.n	80018e2 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001934:	40021000 	.word	0x40021000
 8001938:	40022000 	.word	0x40022000

0800193c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800193c:	4b1f      	ldr	r3, [pc, #124]	@ (80019bc <HAL_RCC_GetSysClockFreq+0x80>)
 800193e:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001940:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001942:	f012 020c 	ands.w	r2, r2, #12
 8001946:	d005      	beq.n	8001954 <HAL_RCC_GetSysClockFreq+0x18>
 8001948:	2a0c      	cmp	r2, #12
 800194a:	d12b      	bne.n	80019a4 <HAL_RCC_GetSysClockFreq+0x68>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800194c:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001950:	2901      	cmp	r1, #1
 8001952:	d130      	bne.n	80019b6 <HAL_RCC_GetSysClockFreq+0x7a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001954:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8001956:	481a      	ldr	r0, [pc, #104]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x84>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001958:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800195a:	bf55      	itete	pl
 800195c:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001960:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001962:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001966:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 800196a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800196e:	b1c2      	cbz	r2, 80019a2 <HAL_RCC_GetSysClockFreq+0x66>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001970:	68da      	ldr	r2, [r3, #12]
      pllvco = HSI_VALUE;
 8001972:	4914      	ldr	r1, [pc, #80]	@ (80019c4 <HAL_RCC_GetSysClockFreq+0x88>)
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001974:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8001978:	3a02      	subs	r2, #2
      pllvco = HSI_VALUE;
 800197a:	2a01      	cmp	r2, #1
 800197c:	bf98      	it	ls
 800197e:	4608      	movls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001980:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8001988:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800198a:	68d8      	ldr	r0, [r3, #12]
 800198c:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001990:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001994:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001996:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001998:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800199a:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 800199e:	fbb2 f0f0 	udiv	r0, r2, r0
}
 80019a2:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80019a4:	f44f 7088 	mov.w	r0, #272	@ 0x110
    sysclockfreq = HSE_VALUE;
 80019a8:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <HAL_RCC_GetSysClockFreq+0x88>)
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80019aa:	40d0      	lsrs	r0, r2
    sysclockfreq = HSE_VALUE;
 80019ac:	f010 0001 	ands.w	r0, r0, #1
 80019b0:	bf18      	it	ne
 80019b2:	4618      	movne	r0, r3
 80019b4:	4770      	bx	lr
 80019b6:	2000      	movs	r0, #0
 80019b8:	e7da      	b.n	8001970 <HAL_RCC_GetSysClockFreq+0x34>
 80019ba:	bf00      	nop
 80019bc:	40021000 	.word	0x40021000
 80019c0:	08007d70 	.word	0x08007d70
 80019c4:	00f42400 	.word	0x00f42400

080019c8 <HAL_RCC_OscConfig>:
{
 80019c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 80019cc:	4605      	mov	r5, r0
 80019ce:	2800      	cmp	r0, #0
 80019d0:	d060      	beq.n	8001a94 <HAL_RCC_OscConfig+0xcc>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019d2:	4c95      	ldr	r4, [pc, #596]	@ (8001c28 <HAL_RCC_OscConfig+0x260>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019d4:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019d6:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019d8:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019da:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019dc:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019e0:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019e4:	d576      	bpl.n	8001ad4 <HAL_RCC_OscConfig+0x10c>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019e6:	b11e      	cbz	r6, 80019f0 <HAL_RCC_OscConfig+0x28>
 80019e8:	2e0c      	cmp	r6, #12
 80019ea:	d155      	bne.n	8001a98 <HAL_RCC_OscConfig+0xd0>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019ec:	2f01      	cmp	r7, #1
 80019ee:	d153      	bne.n	8001a98 <HAL_RCC_OscConfig+0xd0>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019f0:	6823      	ldr	r3, [r4, #0]
 80019f2:	0798      	lsls	r0, r3, #30
 80019f4:	d502      	bpl.n	80019fc <HAL_RCC_OscConfig+0x34>
 80019f6:	69ab      	ldr	r3, [r5, #24]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d04b      	beq.n	8001a94 <HAL_RCC_OscConfig+0xcc>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019fc:	6823      	ldr	r3, [r4, #0]
 80019fe:	6a28      	ldr	r0, [r5, #32]
 8001a00:	0719      	lsls	r1, r3, #28
 8001a02:	bf56      	itet	pl
 8001a04:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	@ 0x94
 8001a08:	6823      	ldrmi	r3, [r4, #0]
 8001a0a:	091b      	lsrpl	r3, r3, #4
 8001a0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a10:	4298      	cmp	r0, r3
 8001a12:	d929      	bls.n	8001a68 <HAL_RCC_OscConfig+0xa0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a14:	f7ff ff54 	bl	80018c0 <RCC_SetFlashLatencyFromMSIRange>
 8001a18:	2800      	cmp	r0, #0
 8001a1a:	d13b      	bne.n	8001a94 <HAL_RCC_OscConfig+0xcc>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a1c:	6823      	ldr	r3, [r4, #0]
 8001a1e:	f043 0308 	orr.w	r3, r3, #8
 8001a22:	6023      	str	r3, [r4, #0]
 8001a24:	6823      	ldr	r3, [r4, #0]
 8001a26:	6a2a      	ldr	r2, [r5, #32]
 8001a28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a30:	6863      	ldr	r3, [r4, #4]
 8001a32:	69ea      	ldr	r2, [r5, #28]
 8001a34:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001a38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001a3c:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a3e:	f7ff ff7d 	bl	800193c <HAL_RCC_GetSysClockFreq>
 8001a42:	68a3      	ldr	r3, [r4, #8]
 8001a44:	4a79      	ldr	r2, [pc, #484]	@ (8001c2c <HAL_RCC_OscConfig+0x264>)
 8001a46:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a4a:	5cd3      	ldrb	r3, [r2, r3]
 8001a4c:	f003 031f 	and.w	r3, r3, #31
 8001a50:	40d8      	lsrs	r0, r3
 8001a52:	4b77      	ldr	r3, [pc, #476]	@ (8001c30 <HAL_RCC_OscConfig+0x268>)
 8001a54:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8001a56:	4b77      	ldr	r3, [pc, #476]	@ (8001c34 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	6818      	ldr	r0, [r3, #0]
 8001a5a:	f7ff fc05 	bl	8001268 <HAL_InitTick>
        if(status != HAL_OK)
 8001a5e:	2800      	cmp	r0, #0
 8001a60:	d038      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x10c>
}
 8001a62:	b003      	add	sp, #12
 8001a64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a68:	6823      	ldr	r3, [r4, #0]
 8001a6a:	f043 0308 	orr.w	r3, r3, #8
 8001a6e:	6023      	str	r3, [r4, #0]
 8001a70:	6823      	ldr	r3, [r4, #0]
 8001a72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a76:	4303      	orrs	r3, r0
 8001a78:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a7a:	6863      	ldr	r3, [r4, #4]
 8001a7c:	69ea      	ldr	r2, [r5, #28]
 8001a7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001a82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001a86:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a88:	2e00      	cmp	r6, #0
 8001a8a:	d1d8      	bne.n	8001a3e <HAL_RCC_OscConfig+0x76>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a8c:	f7ff ff18 	bl	80018c0 <RCC_SetFlashLatencyFromMSIRange>
 8001a90:	2800      	cmp	r0, #0
 8001a92:	d0d4      	beq.n	8001a3e <HAL_RCC_OscConfig+0x76>
    return HAL_ERROR;
 8001a94:	2001      	movs	r0, #1
 8001a96:	e7e4      	b.n	8001a62 <HAL_RCC_OscConfig+0x9a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a98:	69ab      	ldr	r3, [r5, #24]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d03a      	beq.n	8001b14 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_MSI_ENABLE();
 8001a9e:	6823      	ldr	r3, [r4, #0]
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001aa6:	f7ff fc21 	bl	80012ec <HAL_GetTick>
 8001aaa:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aac:	6823      	ldr	r3, [r4, #0]
 8001aae:	079a      	lsls	r2, r3, #30
 8001ab0:	d528      	bpl.n	8001b04 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ab2:	6823      	ldr	r3, [r4, #0]
 8001ab4:	f043 0308 	orr.w	r3, r3, #8
 8001ab8:	6023      	str	r3, [r4, #0]
 8001aba:	6823      	ldr	r3, [r4, #0]
 8001abc:	6a2a      	ldr	r2, [r5, #32]
 8001abe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ac6:	6863      	ldr	r3, [r4, #4]
 8001ac8:	69ea      	ldr	r2, [r5, #28]
 8001aca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001ace:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001ad2:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ad4:	682b      	ldr	r3, [r5, #0]
 8001ad6:	07d8      	lsls	r0, r3, #31
 8001ad8:	d42d      	bmi.n	8001b36 <HAL_RCC_OscConfig+0x16e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ada:	682b      	ldr	r3, [r5, #0]
 8001adc:	0799      	lsls	r1, r3, #30
 8001ade:	d46b      	bmi.n	8001bb8 <HAL_RCC_OscConfig+0x1f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ae0:	682b      	ldr	r3, [r5, #0]
 8001ae2:	0718      	lsls	r0, r3, #28
 8001ae4:	f100 80a8 	bmi.w	8001c38 <HAL_RCC_OscConfig+0x270>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ae8:	682b      	ldr	r3, [r5, #0]
 8001aea:	0759      	lsls	r1, r3, #29
 8001aec:	f100 80ce 	bmi.w	8001c8c <HAL_RCC_OscConfig+0x2c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001af0:	682b      	ldr	r3, [r5, #0]
 8001af2:	069f      	lsls	r7, r3, #26
 8001af4:	f100 8137 	bmi.w	8001d66 <HAL_RCC_OscConfig+0x39e>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001af8:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f040 815d 	bne.w	8001dba <HAL_RCC_OscConfig+0x3f2>
  return HAL_OK;
 8001b00:	2000      	movs	r0, #0
 8001b02:	e7ae      	b.n	8001a62 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b04:	f7ff fbf2 	bl	80012ec <HAL_GetTick>
 8001b08:	eba0 0008 	sub.w	r0, r0, r8
 8001b0c:	2802      	cmp	r0, #2
 8001b0e:	d9cd      	bls.n	8001aac <HAL_RCC_OscConfig+0xe4>
            return HAL_TIMEOUT;
 8001b10:	2003      	movs	r0, #3
 8001b12:	e7a6      	b.n	8001a62 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_MSI_DISABLE();
 8001b14:	6823      	ldr	r3, [r4, #0]
 8001b16:	f023 0301 	bic.w	r3, r3, #1
 8001b1a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fbe6 	bl	80012ec <HAL_GetTick>
 8001b20:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b22:	6823      	ldr	r3, [r4, #0]
 8001b24:	079b      	lsls	r3, r3, #30
 8001b26:	d5d5      	bpl.n	8001ad4 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b28:	f7ff fbe0 	bl	80012ec <HAL_GetTick>
 8001b2c:	eba0 0008 	sub.w	r0, r0, r8
 8001b30:	2802      	cmp	r0, #2
 8001b32:	d9f6      	bls.n	8001b22 <HAL_RCC_OscConfig+0x15a>
 8001b34:	e7ec      	b.n	8001b10 <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b36:	2e08      	cmp	r6, #8
 8001b38:	d003      	beq.n	8001b42 <HAL_RCC_OscConfig+0x17a>
 8001b3a:	2e0c      	cmp	r6, #12
 8001b3c:	d108      	bne.n	8001b50 <HAL_RCC_OscConfig+0x188>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b3e:	2f03      	cmp	r7, #3
 8001b40:	d106      	bne.n	8001b50 <HAL_RCC_OscConfig+0x188>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b42:	6823      	ldr	r3, [r4, #0]
 8001b44:	039a      	lsls	r2, r3, #14
 8001b46:	d5c8      	bpl.n	8001ada <HAL_RCC_OscConfig+0x112>
 8001b48:	686b      	ldr	r3, [r5, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1c5      	bne.n	8001ada <HAL_RCC_OscConfig+0x112>
 8001b4e:	e7a1      	b.n	8001a94 <HAL_RCC_OscConfig+0xcc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b50:	686b      	ldr	r3, [r5, #4]
 8001b52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b56:	d110      	bne.n	8001b7a <HAL_RCC_OscConfig+0x1b2>
 8001b58:	6823      	ldr	r3, [r4, #0]
 8001b5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b5e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001b60:	f7ff fbc4 	bl	80012ec <HAL_GetTick>
 8001b64:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b66:	6823      	ldr	r3, [r4, #0]
 8001b68:	039b      	lsls	r3, r3, #14
 8001b6a:	d4b6      	bmi.n	8001ada <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b6c:	f7ff fbbe 	bl	80012ec <HAL_GetTick>
 8001b70:	eba0 0008 	sub.w	r0, r0, r8
 8001b74:	2864      	cmp	r0, #100	@ 0x64
 8001b76:	d9f6      	bls.n	8001b66 <HAL_RCC_OscConfig+0x19e>
 8001b78:	e7ca      	b.n	8001b10 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b7a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b7e:	d104      	bne.n	8001b8a <HAL_RCC_OscConfig+0x1c2>
 8001b80:	6823      	ldr	r3, [r4, #0]
 8001b82:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b86:	6023      	str	r3, [r4, #0]
 8001b88:	e7e6      	b.n	8001b58 <HAL_RCC_OscConfig+0x190>
 8001b8a:	6822      	ldr	r2, [r4, #0]
 8001b8c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001b90:	6022      	str	r2, [r4, #0]
 8001b92:	6822      	ldr	r2, [r4, #0]
 8001b94:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001b98:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1e0      	bne.n	8001b60 <HAL_RCC_OscConfig+0x198>
        tickstart = HAL_GetTick();
 8001b9e:	f7ff fba5 	bl	80012ec <HAL_GetTick>
 8001ba2:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ba4:	6823      	ldr	r3, [r4, #0]
 8001ba6:	0398      	lsls	r0, r3, #14
 8001ba8:	d597      	bpl.n	8001ada <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001baa:	f7ff fb9f 	bl	80012ec <HAL_GetTick>
 8001bae:	eba0 0008 	sub.w	r0, r0, r8
 8001bb2:	2864      	cmp	r0, #100	@ 0x64
 8001bb4:	d9f6      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x1dc>
 8001bb6:	e7ab      	b.n	8001b10 <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001bb8:	2e04      	cmp	r6, #4
 8001bba:	d003      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x1fc>
 8001bbc:	2e0c      	cmp	r6, #12
 8001bbe:	d110      	bne.n	8001be2 <HAL_RCC_OscConfig+0x21a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bc0:	2f02      	cmp	r7, #2
 8001bc2:	d10e      	bne.n	8001be2 <HAL_RCC_OscConfig+0x21a>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bc4:	6823      	ldr	r3, [r4, #0]
 8001bc6:	0559      	lsls	r1, r3, #21
 8001bc8:	d503      	bpl.n	8001bd2 <HAL_RCC_OscConfig+0x20a>
 8001bca:	68eb      	ldr	r3, [r5, #12]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f43f af61 	beq.w	8001a94 <HAL_RCC_OscConfig+0xcc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd2:	6863      	ldr	r3, [r4, #4]
 8001bd4:	692a      	ldr	r2, [r5, #16]
 8001bd6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8001bda:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001bde:	6063      	str	r3, [r4, #4]
 8001be0:	e77e      	b.n	8001ae0 <HAL_RCC_OscConfig+0x118>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001be2:	68eb      	ldr	r3, [r5, #12]
 8001be4:	b17b      	cbz	r3, 8001c06 <HAL_RCC_OscConfig+0x23e>
        __HAL_RCC_HSI_ENABLE();
 8001be6:	6823      	ldr	r3, [r4, #0]
 8001be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bec:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001bee:	f7ff fb7d 	bl	80012ec <HAL_GetTick>
 8001bf2:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bf4:	6823      	ldr	r3, [r4, #0]
 8001bf6:	055a      	lsls	r2, r3, #21
 8001bf8:	d4eb      	bmi.n	8001bd2 <HAL_RCC_OscConfig+0x20a>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bfa:	f7ff fb77 	bl	80012ec <HAL_GetTick>
 8001bfe:	1bc0      	subs	r0, r0, r7
 8001c00:	2802      	cmp	r0, #2
 8001c02:	d9f7      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x22c>
 8001c04:	e784      	b.n	8001b10 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8001c06:	6823      	ldr	r3, [r4, #0]
 8001c08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c0c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001c0e:	f7ff fb6d 	bl	80012ec <HAL_GetTick>
 8001c12:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c14:	6823      	ldr	r3, [r4, #0]
 8001c16:	055b      	lsls	r3, r3, #21
 8001c18:	f57f af62 	bpl.w	8001ae0 <HAL_RCC_OscConfig+0x118>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c1c:	f7ff fb66 	bl	80012ec <HAL_GetTick>
 8001c20:	1bc0      	subs	r0, r0, r7
 8001c22:	2802      	cmp	r0, #2
 8001c24:	d9f6      	bls.n	8001c14 <HAL_RCC_OscConfig+0x24c>
 8001c26:	e773      	b.n	8001b10 <HAL_RCC_OscConfig+0x148>
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	08007da8 	.word	0x08007da8
 8001c30:	20000000 	.word	0x20000000
 8001c34:	20000008 	.word	0x20000008
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c38:	696b      	ldr	r3, [r5, #20]
 8001c3a:	b19b      	cbz	r3, 8001c64 <HAL_RCC_OscConfig+0x29c>
      __HAL_RCC_LSI_ENABLE();
 8001c3c:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8001c48:	f7ff fb50 	bl	80012ec <HAL_GetTick>
 8001c4c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c4e:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8001c52:	079a      	lsls	r2, r3, #30
 8001c54:	f53f af48 	bmi.w	8001ae8 <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c58:	f7ff fb48 	bl	80012ec <HAL_GetTick>
 8001c5c:	1bc0      	subs	r0, r0, r7
 8001c5e:	2802      	cmp	r0, #2
 8001c60:	d9f5      	bls.n	8001c4e <HAL_RCC_OscConfig+0x286>
 8001c62:	e755      	b.n	8001b10 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_LSI_DISABLE();
 8001c64:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8001c68:	f023 0301 	bic.w	r3, r3, #1
 8001c6c:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8001c70:	f7ff fb3c 	bl	80012ec <HAL_GetTick>
 8001c74:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c76:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8001c7a:	079b      	lsls	r3, r3, #30
 8001c7c:	f57f af34 	bpl.w	8001ae8 <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c80:	f7ff fb34 	bl	80012ec <HAL_GetTick>
 8001c84:	1bc0      	subs	r0, r0, r7
 8001c86:	2802      	cmp	r0, #2
 8001c88:	d9f5      	bls.n	8001c76 <HAL_RCC_OscConfig+0x2ae>
 8001c8a:	e741      	b.n	8001b10 <HAL_RCC_OscConfig+0x148>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c8c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001c8e:	00df      	lsls	r7, r3, #3
 8001c90:	d429      	bmi.n	8001ce6 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c92:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001c94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c98:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001c9a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001c9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ca0:	9301      	str	r3, [sp, #4]
 8001ca2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001ca4:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ca8:	4f97      	ldr	r7, [pc, #604]	@ (8001f08 <HAL_RCC_OscConfig+0x540>)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	05d8      	lsls	r0, r3, #23
 8001cae:	d51d      	bpl.n	8001cec <HAL_RCC_OscConfig+0x324>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cb0:	68ab      	ldr	r3, [r5, #8]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d12b      	bne.n	8001d0e <HAL_RCC_OscConfig+0x346>
 8001cb6:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8001cc2:	f7ff fb13 	bl	80012ec <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc6:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001cca:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ccc:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8001cd0:	079a      	lsls	r2, r3, #30
 8001cd2:	d542      	bpl.n	8001d5a <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 8001cd4:	f1b8 0f00 	cmp.w	r8, #0
 8001cd8:	f43f af0a 	beq.w	8001af0 <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cdc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001cde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ce2:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001ce4:	e704      	b.n	8001af0 <HAL_RCC_OscConfig+0x128>
    FlagStatus       pwrclkchanged = RESET;
 8001ce6:	f04f 0800 	mov.w	r8, #0
 8001cea:	e7dd      	b.n	8001ca8 <HAL_RCC_OscConfig+0x2e0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cf2:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001cf4:	f7ff fafa 	bl	80012ec <HAL_GetTick>
 8001cf8:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	05d9      	lsls	r1, r3, #23
 8001cfe:	d4d7      	bmi.n	8001cb0 <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d00:	f7ff faf4 	bl	80012ec <HAL_GetTick>
 8001d04:	eba0 0009 	sub.w	r0, r0, r9
 8001d08:	2802      	cmp	r0, #2
 8001d0a:	d9f6      	bls.n	8001cfa <HAL_RCC_OscConfig+0x332>
 8001d0c:	e700      	b.n	8001b10 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d0e:	2b05      	cmp	r3, #5
 8001d10:	d106      	bne.n	8001d20 <HAL_RCC_OscConfig+0x358>
 8001d12:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8001d16:	f043 0304 	orr.w	r3, r3, #4
 8001d1a:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8001d1e:	e7ca      	b.n	8001cb6 <HAL_RCC_OscConfig+0x2ee>
 8001d20:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8001d24:	f022 0201 	bic.w	r2, r2, #1
 8001d28:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
 8001d2c:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8001d30:	f022 0204 	bic.w	r2, r2, #4
 8001d34:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1c2      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x2fa>
      tickstart = HAL_GetTick();
 8001d3c:	f7ff fad6 	bl	80012ec <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d40:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8001d44:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d46:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8001d4a:	079b      	lsls	r3, r3, #30
 8001d4c:	d5c2      	bpl.n	8001cd4 <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d4e:	f7ff facd 	bl	80012ec <HAL_GetTick>
 8001d52:	1bc0      	subs	r0, r0, r7
 8001d54:	4548      	cmp	r0, r9
 8001d56:	d9f6      	bls.n	8001d46 <HAL_RCC_OscConfig+0x37e>
 8001d58:	e6da      	b.n	8001b10 <HAL_RCC_OscConfig+0x148>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5a:	f7ff fac7 	bl	80012ec <HAL_GetTick>
 8001d5e:	1bc0      	subs	r0, r0, r7
 8001d60:	4548      	cmp	r0, r9
 8001d62:	d9b3      	bls.n	8001ccc <HAL_RCC_OscConfig+0x304>
 8001d64:	e6d4      	b.n	8001b10 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d66:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8001d68:	b19b      	cbz	r3, 8001d92 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSI48_ENABLE();
 8001d6a:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8001d76:	f7ff fab9 	bl	80012ec <HAL_GetTick>
 8001d7a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d7c:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8001d80:	0798      	lsls	r0, r3, #30
 8001d82:	f53f aeb9 	bmi.w	8001af8 <HAL_RCC_OscConfig+0x130>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d86:	f7ff fab1 	bl	80012ec <HAL_GetTick>
 8001d8a:	1bc0      	subs	r0, r0, r7
 8001d8c:	2802      	cmp	r0, #2
 8001d8e:	d9f5      	bls.n	8001d7c <HAL_RCC_OscConfig+0x3b4>
 8001d90:	e6be      	b.n	8001b10 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSI48_DISABLE();
 8001d92:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8001d96:	f023 0301 	bic.w	r3, r3, #1
 8001d9a:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8001d9e:	f7ff faa5 	bl	80012ec <HAL_GetTick>
 8001da2:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001da4:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8001da8:	0799      	lsls	r1, r3, #30
 8001daa:	f57f aea5 	bpl.w	8001af8 <HAL_RCC_OscConfig+0x130>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dae:	f7ff fa9d 	bl	80012ec <HAL_GetTick>
 8001db2:	1bc0      	subs	r0, r0, r7
 8001db4:	2802      	cmp	r0, #2
 8001db6:	d9f5      	bls.n	8001da4 <HAL_RCC_OscConfig+0x3dc>
 8001db8:	e6aa      	b.n	8001b10 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	f040 808c 	bne.w	8001ed8 <HAL_RCC_OscConfig+0x510>
      pll_config = RCC->PLLCFGR;
 8001dc0:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc2:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8001dc4:	f003 0103 	and.w	r1, r3, #3
 8001dc8:	4291      	cmp	r1, r2
 8001dca:	d122      	bne.n	8001e12 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dcc:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 8001dce:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001dd2:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd4:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8001dd8:	d11b      	bne.n	8001e12 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dda:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8001ddc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001de0:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8001de4:	d115      	bne.n	8001e12 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001de6:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 8001de8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dec:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8001df0:	d10f      	bne.n	8001e12 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001df2:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8001df4:	0852      	lsrs	r2, r2, #1
 8001df6:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8001dfa:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dfc:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8001e00:	d107      	bne.n	8001e12 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e02:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8001e04:	0852      	lsrs	r2, r2, #1
 8001e06:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8001e0a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e0c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8001e10:	d049      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x4de>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e12:	2e0c      	cmp	r6, #12
 8001e14:	f43f ae3e 	beq.w	8001a94 <HAL_RCC_OscConfig+0xcc>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e18:	6823      	ldr	r3, [r4, #0]
 8001e1a:	015a      	lsls	r2, r3, #5
 8001e1c:	f53f ae3a 	bmi.w	8001a94 <HAL_RCC_OscConfig+0xcc>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e20:	6823      	ldr	r3, [r4, #0]
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	f53f ae36 	bmi.w	8001a94 <HAL_RCC_OscConfig+0xcc>
            __HAL_RCC_PLL_DISABLE();
 8001e28:	6823      	ldr	r3, [r4, #0]
 8001e2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e2e:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8001e30:	f7ff fa5c 	bl	80012ec <HAL_GetTick>
 8001e34:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e36:	6823      	ldr	r3, [r4, #0]
 8001e38:	019f      	lsls	r7, r3, #6
 8001e3a:	d42e      	bmi.n	8001e9a <HAL_RCC_OscConfig+0x4d2>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e3c:	68e2      	ldr	r2, [r4, #12]
 8001e3e:	4b33      	ldr	r3, [pc, #204]	@ (8001f0c <HAL_RCC_OscConfig+0x544>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8001e44:	4313      	orrs	r3, r2
 8001e46:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8001e48:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e4c:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8001e4e:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8001e52:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8001e54:	3a01      	subs	r2, #1
 8001e56:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001e5a:	6bea      	ldr	r2, [r5, #60]	@ 0x3c
 8001e5c:	0852      	lsrs	r2, r2, #1
 8001e5e:	3a01      	subs	r2, #1
 8001e60:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001e64:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8001e66:	0852      	lsrs	r2, r2, #1
 8001e68:	3a01      	subs	r2, #1
 8001e6a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001e6e:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8001e70:	6823      	ldr	r3, [r4, #0]
 8001e72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e76:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e78:	68e3      	ldr	r3, [r4, #12]
 8001e7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e7e:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8001e80:	f7ff fa34 	bl	80012ec <HAL_GetTick>
 8001e84:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e86:	6823      	ldr	r3, [r4, #0]
 8001e88:	0198      	lsls	r0, r3, #6
 8001e8a:	f53f ae39 	bmi.w	8001b00 <HAL_RCC_OscConfig+0x138>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8e:	f7ff fa2d 	bl	80012ec <HAL_GetTick>
 8001e92:	1b40      	subs	r0, r0, r5
 8001e94:	2802      	cmp	r0, #2
 8001e96:	d9f6      	bls.n	8001e86 <HAL_RCC_OscConfig+0x4be>
 8001e98:	e63a      	b.n	8001b10 <HAL_RCC_OscConfig+0x148>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9a:	f7ff fa27 	bl	80012ec <HAL_GetTick>
 8001e9e:	1b80      	subs	r0, r0, r6
 8001ea0:	2802      	cmp	r0, #2
 8001ea2:	d9c8      	bls.n	8001e36 <HAL_RCC_OscConfig+0x46e>
 8001ea4:	e634      	b.n	8001b10 <HAL_RCC_OscConfig+0x148>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea6:	6823      	ldr	r3, [r4, #0]
 8001ea8:	0199      	lsls	r1, r3, #6
 8001eaa:	f53f ae29 	bmi.w	8001b00 <HAL_RCC_OscConfig+0x138>
          __HAL_RCC_PLL_ENABLE();
 8001eae:	6823      	ldr	r3, [r4, #0]
 8001eb0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001eb4:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001eb6:	68e3      	ldr	r3, [r4, #12]
 8001eb8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ebc:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8001ebe:	f7ff fa15 	bl	80012ec <HAL_GetTick>
 8001ec2:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec4:	6823      	ldr	r3, [r4, #0]
 8001ec6:	019a      	lsls	r2, r3, #6
 8001ec8:	f53f ae1a 	bmi.w	8001b00 <HAL_RCC_OscConfig+0x138>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ecc:	f7ff fa0e 	bl	80012ec <HAL_GetTick>
 8001ed0:	1b40      	subs	r0, r0, r5
 8001ed2:	2802      	cmp	r0, #2
 8001ed4:	d9f6      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x4fc>
 8001ed6:	e61b      	b.n	8001b10 <HAL_RCC_OscConfig+0x148>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ed8:	2e0c      	cmp	r6, #12
 8001eda:	f43f addb 	beq.w	8001a94 <HAL_RCC_OscConfig+0xcc>
        __HAL_RCC_PLL_DISABLE();
 8001ede:	6823      	ldr	r3, [r4, #0]
 8001ee0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ee4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ee6:	f7ff fa01 	bl	80012ec <HAL_GetTick>
 8001eea:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eec:	6823      	ldr	r3, [r4, #0]
 8001eee:	019b      	lsls	r3, r3, #6
 8001ef0:	d404      	bmi.n	8001efc <HAL_RCC_OscConfig+0x534>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ef2:	68e2      	ldr	r2, [r4, #12]
 8001ef4:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <HAL_RCC_OscConfig+0x548>)
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	60e3      	str	r3, [r4, #12]
 8001efa:	e601      	b.n	8001b00 <HAL_RCC_OscConfig+0x138>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efc:	f7ff f9f6 	bl	80012ec <HAL_GetTick>
 8001f00:	1b40      	subs	r0, r0, r5
 8001f02:	2802      	cmp	r0, #2
 8001f04:	d9f2      	bls.n	8001eec <HAL_RCC_OscConfig+0x524>
 8001f06:	e603      	b.n	8001b10 <HAL_RCC_OscConfig+0x148>
 8001f08:	40007000 	.word	0x40007000
 8001f0c:	019d800c 	.word	0x019d800c
 8001f10:	feeefffc 	.word	0xfeeefffc

08001f14 <HAL_RCC_ClockConfig>:
{
 8001f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f18:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8001f1a:	4605      	mov	r5, r0
 8001f1c:	b910      	cbnz	r0, 8001f24 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001f1e:	2001      	movs	r0, #1
}
 8001f20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f24:	4a6e      	ldr	r2, [pc, #440]	@ (80020e0 <HAL_RCC_ClockConfig+0x1cc>)
 8001f26:	6813      	ldr	r3, [r2, #0]
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	428b      	cmp	r3, r1
 8001f2e:	d337      	bcc.n	8001fa0 <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f30:	6829      	ldr	r1, [r5, #0]
 8001f32:	078f      	lsls	r7, r1, #30
 8001f34:	d43f      	bmi.n	8001fb6 <HAL_RCC_ClockConfig+0xa2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f36:	07cc      	lsls	r4, r1, #31
 8001f38:	d572      	bpl.n	8002020 <HAL_RCC_ClockConfig+0x10c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f3a:	686f      	ldr	r7, [r5, #4]
 8001f3c:	4c69      	ldr	r4, [pc, #420]	@ (80020e4 <HAL_RCC_ClockConfig+0x1d0>)
 8001f3e:	2f03      	cmp	r7, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f40:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f42:	f040 80a1 	bne.w	8002088 <HAL_RCC_ClockConfig+0x174>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f46:	0198      	lsls	r0, r3, #6
 8001f48:	d5e9      	bpl.n	8001f1e <HAL_RCC_ClockConfig+0xa>
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f4a:	68e3      	ldr	r3, [r4, #12]
 8001f4c:	f003 0303 	and.w	r3, r3, #3

  switch (pllsource)
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d03d      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0xbc>
 8001f54:	3b02      	subs	r3, #2
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	4a63      	ldr	r2, [pc, #396]	@ (80020e8 <HAL_RCC_ClockConfig+0x1d4>)
 8001f5a:	bf88      	it	hi
 8001f5c:	2200      	movhi	r2, #0
  default:
    /* unexpected */
    pllvco = 0;
    break;
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f5e:	68e1      	ldr	r1, [r4, #12]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f60:	68e3      	ldr	r3, [r4, #12]
 8001f62:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8001f66:	4353      	muls	r3, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f68:	68e2      	ldr	r2, [r4, #12]
 8001f6a:	f3c2 6241 	ubfx	r2, r2, #25, #2
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f6e:	f3c1 1103 	ubfx	r1, r1, #4, #4
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f72:	3201      	adds	r2, #1
 8001f74:	0052      	lsls	r2, r2, #1
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f76:	3101      	adds	r1, #1
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f78:	fbb3 f3f1 	udiv	r3, r3, r1
  sysclockfreq = pllvco / pllr;
 8001f7c:	fbb3 f3f2 	udiv	r3, r3, r2
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001f80:	4a5a      	ldr	r2, [pc, #360]	@ (80020ec <HAL_RCC_ClockConfig+0x1d8>)
 8001f82:	4293      	cmp	r3, r2
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001f84:	d932      	bls.n	8001fec <HAL_RCC_ClockConfig+0xd8>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001f86:	68a3      	ldr	r3, [r4, #8]
 8001f88:	f013 0ff0 	tst.w	r3, #240	@ 0xf0
 8001f8c:	d12e      	bne.n	8001fec <HAL_RCC_ClockConfig+0xd8>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f8e:	68a3      	ldr	r3, [r4, #8]
 8001f90:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f98:	60a3      	str	r3, [r4, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f9a:	f04f 0880 	mov.w	r8, #128	@ 0x80
 8001f9e:	e027      	b.n	8001ff0 <HAL_RCC_ClockConfig+0xdc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa0:	6813      	ldr	r3, [r2, #0]
 8001fa2:	f023 030f 	bic.w	r3, r3, #15
 8001fa6:	430b      	orrs	r3, r1
 8001fa8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001faa:	6813      	ldr	r3, [r2, #0]
 8001fac:	f003 030f 	and.w	r3, r3, #15
 8001fb0:	428b      	cmp	r3, r1
 8001fb2:	d1b4      	bne.n	8001f1e <HAL_RCC_ClockConfig+0xa>
 8001fb4:	e7bc      	b.n	8001f30 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fb6:	4a4b      	ldr	r2, [pc, #300]	@ (80020e4 <HAL_RCC_ClockConfig+0x1d0>)
 8001fb8:	68a8      	ldr	r0, [r5, #8]
 8001fba:	6893      	ldr	r3, [r2, #8]
 8001fbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fc0:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc2:	bf81      	itttt	hi
 8001fc4:	6893      	ldrhi	r3, [r2, #8]
 8001fc6:	f023 03f0 	bichi.w	r3, r3, #240	@ 0xf0
 8001fca:	4303      	orrhi	r3, r0
 8001fcc:	6093      	strhi	r3, [r2, #8]
 8001fce:	e7b2      	b.n	8001f36 <HAL_RCC_ClockConfig+0x22>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fd0:	6823      	ldr	r3, [r4, #0]
    pllvco = MSIRangeTable[msirange];
 8001fd2:	4a47      	ldr	r2, [pc, #284]	@ (80020f0 <HAL_RCC_ClockConfig+0x1dc>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fd4:	0719      	lsls	r1, r3, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fd6:	bf55      	itete	pl
 8001fd8:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fdc:	6823      	ldrmi	r3, [r4, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fde:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fe2:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
    pllvco = MSIRangeTable[msirange];
 8001fe6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    break;
 8001fea:	e7b8      	b.n	8001f5e <HAL_RCC_ClockConfig+0x4a>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001fec:	f04f 0800 	mov.w	r8, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ff0:	68a3      	ldr	r3, [r4, #8]
 8001ff2:	f023 0303 	bic.w	r3, r3, #3
 8001ff6:	433b      	orrs	r3, r7
 8001ff8:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8001ffa:	f7ff f977 	bl	80012ec <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ffe:	f241 3988 	movw	r9, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8002002:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002004:	68a3      	ldr	r3, [r4, #8]
 8002006:	686a      	ldr	r2, [r5, #4]
 8002008:	f003 030c 	and.w	r3, r3, #12
 800200c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002010:	d14c      	bne.n	80020ac <HAL_RCC_ClockConfig+0x198>
  if(hpre == RCC_SYSCLK_DIV2)
 8002012:	f1b8 0f00 	cmp.w	r8, #0
 8002016:	d003      	beq.n	8002020 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002018:	68a3      	ldr	r3, [r4, #8]
 800201a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800201e:	60a3      	str	r3, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002020:	6829      	ldr	r1, [r5, #0]
 8002022:	078a      	lsls	r2, r1, #30
 8002024:	d50b      	bpl.n	800203e <HAL_RCC_ClockConfig+0x12a>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002026:	4a2f      	ldr	r2, [pc, #188]	@ (80020e4 <HAL_RCC_ClockConfig+0x1d0>)
 8002028:	68a8      	ldr	r0, [r5, #8]
 800202a:	6893      	ldr	r3, [r2, #8]
 800202c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002030:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002032:	bf3f      	itttt	cc
 8002034:	6893      	ldrcc	r3, [r2, #8]
 8002036:	f023 03f0 	biccc.w	r3, r3, #240	@ 0xf0
 800203a:	4303      	orrcc	r3, r0
 800203c:	6093      	strcc	r3, [r2, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800203e:	4a28      	ldr	r2, [pc, #160]	@ (80020e0 <HAL_RCC_ClockConfig+0x1cc>)
 8002040:	6813      	ldr	r3, [r2, #0]
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	42b3      	cmp	r3, r6
 8002048:	d837      	bhi.n	80020ba <HAL_RCC_ClockConfig+0x1a6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800204a:	f011 0f04 	tst.w	r1, #4
 800204e:	4c25      	ldr	r4, [pc, #148]	@ (80020e4 <HAL_RCC_ClockConfig+0x1d0>)
 8002050:	d13f      	bne.n	80020d2 <HAL_RCC_ClockConfig+0x1be>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002052:	070b      	lsls	r3, r1, #28
 8002054:	d506      	bpl.n	8002064 <HAL_RCC_ClockConfig+0x150>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002056:	68a3      	ldr	r3, [r4, #8]
 8002058:	692a      	ldr	r2, [r5, #16]
 800205a:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800205e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002062:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002064:	f7ff fc6a 	bl	800193c <HAL_RCC_GetSysClockFreq>
 8002068:	68a3      	ldr	r3, [r4, #8]
 800206a:	4a22      	ldr	r2, [pc, #136]	@ (80020f4 <HAL_RCC_ClockConfig+0x1e0>)
 800206c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002070:	5cd3      	ldrb	r3, [r2, r3]
 8002072:	f003 031f 	and.w	r3, r3, #31
 8002076:	40d8      	lsrs	r0, r3
 8002078:	4b1f      	ldr	r3, [pc, #124]	@ (80020f8 <HAL_RCC_ClockConfig+0x1e4>)
 800207a:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800207c:	4b1f      	ldr	r3, [pc, #124]	@ (80020fc <HAL_RCC_ClockConfig+0x1e8>)
 800207e:	6818      	ldr	r0, [r3, #0]
}
 8002080:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  status = HAL_InitTick(uwTickPrio);
 8002084:	f7ff b8f0 	b.w	8001268 <HAL_InitTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002088:	2f02      	cmp	r7, #2
 800208a:	d108      	bne.n	800209e <HAL_RCC_ClockConfig+0x18a>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800208c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002090:	f43f af45 	beq.w	8001f1e <HAL_RCC_ClockConfig+0xa>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002094:	f7ff fc52 	bl	800193c <HAL_RCC_GetSysClockFreq>
 8002098:	4b14      	ldr	r3, [pc, #80]	@ (80020ec <HAL_RCC_ClockConfig+0x1d8>)
 800209a:	4298      	cmp	r0, r3
 800209c:	e772      	b.n	8001f84 <HAL_RCC_ClockConfig+0x70>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800209e:	b917      	cbnz	r7, 80020a6 <HAL_RCC_ClockConfig+0x192>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020a0:	f013 0f02 	tst.w	r3, #2
 80020a4:	e7f4      	b.n	8002090 <HAL_RCC_ClockConfig+0x17c>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020a6:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80020aa:	e7f1      	b.n	8002090 <HAL_RCC_ClockConfig+0x17c>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ac:	f7ff f91e 	bl	80012ec <HAL_GetTick>
 80020b0:	1bc0      	subs	r0, r0, r7
 80020b2:	4548      	cmp	r0, r9
 80020b4:	d9a6      	bls.n	8002004 <HAL_RCC_ClockConfig+0xf0>
        return HAL_TIMEOUT;
 80020b6:	2003      	movs	r0, #3
 80020b8:	e732      	b.n	8001f20 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ba:	6813      	ldr	r3, [r2, #0]
 80020bc:	f023 030f 	bic.w	r3, r3, #15
 80020c0:	4333      	orrs	r3, r6
 80020c2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c4:	6813      	ldr	r3, [r2, #0]
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	42b3      	cmp	r3, r6
 80020cc:	f47f af27 	bne.w	8001f1e <HAL_RCC_ClockConfig+0xa>
 80020d0:	e7bb      	b.n	800204a <HAL_RCC_ClockConfig+0x136>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020d2:	68a3      	ldr	r3, [r4, #8]
 80020d4:	68ea      	ldr	r2, [r5, #12]
 80020d6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80020da:	4313      	orrs	r3, r2
 80020dc:	60a3      	str	r3, [r4, #8]
 80020de:	e7b8      	b.n	8002052 <HAL_RCC_ClockConfig+0x13e>
 80020e0:	40022000 	.word	0x40022000
 80020e4:	40021000 	.word	0x40021000
 80020e8:	00f42400 	.word	0x00f42400
 80020ec:	04c4b400 	.word	0x04c4b400
 80020f0:	08007d70 	.word	0x08007d70
 80020f4:	08007da8 	.word	0x08007da8
 80020f8:	20000000 	.word	0x20000000
 80020fc:	20000008 	.word	0x20000008

08002100 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002100:	4b05      	ldr	r3, [pc, #20]	@ (8002118 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002102:	4a06      	ldr	r2, [pc, #24]	@ (800211c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800210a:	5cd3      	ldrb	r3, [r2, r3]
 800210c:	4a04      	ldr	r2, [pc, #16]	@ (8002120 <HAL_RCC_GetPCLK1Freq+0x20>)
 800210e:	6810      	ldr	r0, [r2, #0]
 8002110:	f003 031f 	and.w	r3, r3, #31
}
 8002114:	40d8      	lsrs	r0, r3
 8002116:	4770      	bx	lr
 8002118:	40021000 	.word	0x40021000
 800211c:	08007da0 	.word	0x08007da0
 8002120:	20000000 	.word	0x20000000

08002124 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002124:	4b05      	ldr	r3, [pc, #20]	@ (800213c <HAL_RCC_GetPCLK2Freq+0x18>)
 8002126:	4a06      	ldr	r2, [pc, #24]	@ (8002140 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800212e:	5cd3      	ldrb	r3, [r2, r3]
 8002130:	4a04      	ldr	r2, [pc, #16]	@ (8002144 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002132:	6810      	ldr	r0, [r2, #0]
 8002134:	f003 031f 	and.w	r3, r3, #31
}
 8002138:	40d8      	lsrs	r0, r3
 800213a:	4770      	bx	lr
 800213c:	40021000 	.word	0x40021000
 8002140:	08007da0 	.word	0x08007da0
 8002144:	20000000 	.word	0x20000000

08002148 <RCCEx_GetSAIxPeriphCLKFreq>:
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8002148:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 800214c:	4b3d      	ldr	r3, [pc, #244]	@ (8002244 <RCCEx_GetSAIxPeriphCLKFreq+0xfc>)
 800214e:	d107      	bne.n	8002160 <RCCEx_GetSAIxPeriphCLKFreq+0x18>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8002150:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8002154:	f002 02e0 	and.w	r2, r2, #224	@ 0xe0
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8002158:	2a60      	cmp	r2, #96	@ 0x60
 800215a:	d157      	bne.n	800220c <RCCEx_GetSAIxPeriphCLKFreq+0xc4>
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800215c:	483a      	ldr	r0, [pc, #232]	@ (8002248 <RCCEx_GetSAIxPeriphCLKFreq+0x100>)
 800215e:	4770      	bx	lr
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8002160:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8002164:	d156      	bne.n	8002214 <RCCEx_GetSAIxPeriphCLKFreq+0xcc>
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8002166:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800216a:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800216e:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8002172:	d0f3      	beq.n	800215c <RCCEx_GetSAIxPeriphCLKFreq+0x14>
  if(frequency == 0U)
  {
    pllvco = InputFrequency;

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8002174:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8002178:	d004      	beq.n	8002184 <RCCEx_GetSAIxPeriphCLKFreq+0x3c>
          }
        }
        frequency = (pllvco * plln) / pllp;
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800217a:	2a00      	cmp	r2, #0
 800217c:	d04a      	beq.n	8002214 <RCCEx_GetSAIxPeriphCLKFreq+0xcc>
        }
        frequency = (pllvco * plln) / pllp;
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 800217e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8002182:	e01e      	b.n	80021c2 <RCCEx_GetSAIxPeriphCLKFreq+0x7a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8002184:	6818      	ldr	r0, [r3, #0]
 8002186:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 800218a:	d059      	beq.n	8002240 <RCCEx_GetSAIxPeriphCLKFreq+0xf8>
 800218c:	68d8      	ldr	r0, [r3, #12]
 800218e:	f410 3080 	ands.w	r0, r0, #65536	@ 0x10000
 8002192:	d055      	beq.n	8002240 <RCCEx_GetSAIxPeriphCLKFreq+0xf8>
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002194:	68d8      	ldr	r0, [r3, #12]
 8002196:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800219a:	3001      	adds	r0, #1
 800219c:	fbb1 f0f0 	udiv	r0, r1, r0
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80021a0:	68d9      	ldr	r1, [r3, #12]
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80021a2:	68da      	ldr	r2, [r3, #12]
        if(pllp == 0U)
 80021a4:	0ed2      	lsrs	r2, r2, #27
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80021a6:	f3c1 2106 	ubfx	r1, r1, #8, #7
        if(pllp == 0U)
 80021aa:	d105      	bne.n	80021b8 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80021ac:	68db      	ldr	r3, [r3, #12]
#endif
        if(pllp == 0U)
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
          {
            pllp = 17U;
 80021ae:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80021b2:	bf0c      	ite	eq
 80021b4:	2207      	moveq	r2, #7
 80021b6:	2211      	movne	r2, #17
          else
          {
            pllp = 7U;
          }
        }
        frequency = (pllvco * plln) / pllp;
 80021b8:	4348      	muls	r0, r1
 80021ba:	fbb0 f0f2 	udiv	r0, r0, r2
 80021be:	4770      	bx	lr
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80021c0:	2a80      	cmp	r2, #128	@ 0x80
 80021c2:	d106      	bne.n	80021d2 <RCCEx_GetSAIxPeriphCLKFreq+0x8a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4821      	ldr	r0, [pc, #132]	@ (800224c <RCCEx_GetSAIxPeriphCLKFreq+0x104>)
 80021c8:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80021cc:	bf08      	it	eq
 80021ce:	2000      	moveq	r0, #0
 80021d0:	4770      	bx	lr
    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80021d2:	2a20      	cmp	r2, #32
 80021d4:	d002      	beq.n	80021dc <RCCEx_GetSAIxPeriphCLKFreq+0x94>
 80021d6:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 80021da:	d115      	bne.n	8002208 <RCCEx_GetSAIxPeriphCLKFreq+0xc0>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80021dc:	6818      	ldr	r0, [r3, #0]
 80021de:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 80021e2:	d02d      	beq.n	8002240 <RCCEx_GetSAIxPeriphCLKFreq+0xf8>
 80021e4:	6958      	ldr	r0, [r3, #20]
 80021e6:	f410 3080 	ands.w	r0, r0, #65536	@ 0x10000
 80021ea:	d029      	beq.n	8002240 <RCCEx_GetSAIxPeriphCLKFreq+0xf8>
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80021ec:	6958      	ldr	r0, [r3, #20]
 80021ee:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80021f2:	3001      	adds	r0, #1
 80021f4:	fbb1 f0f0 	udiv	r0, r1, r0
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80021f8:	6959      	ldr	r1, [r3, #20]
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80021fa:	695a      	ldr	r2, [r3, #20]
        if(pllp == 0U)
 80021fc:	0ed2      	lsrs	r2, r2, #27
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80021fe:	f3c1 2106 	ubfx	r1, r1, #8, #7
        if(pllp == 0U)
 8002202:	d1d9      	bne.n	80021b8 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	e7d2      	b.n	80021ae <RCCEx_GetSAIxPeriphCLKFreq+0x66>
 8002208:	2000      	movs	r0, #0
 800220a:	4770      	bx	lr
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800220c:	2a40      	cmp	r2, #64	@ 0x40
 800220e:	d0b9      	beq.n	8002184 <RCCEx_GetSAIxPeriphCLKFreq+0x3c>
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8002210:	2a00      	cmp	r2, #0
 8002212:	d1d5      	bne.n	80021c0 <RCCEx_GetSAIxPeriphCLKFreq+0x78>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800221a:	d011      	beq.n	8002240 <RCCEx_GetSAIxPeriphCLKFreq+0xf8>
 800221c:	6918      	ldr	r0, [r3, #16]
 800221e:	f410 3080 	ands.w	r0, r0, #65536	@ 0x10000
 8002222:	d00d      	beq.n	8002240 <RCCEx_GetSAIxPeriphCLKFreq+0xf8>
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8002224:	6918      	ldr	r0, [r3, #16]
 8002226:	f3c0 1003 	ubfx	r0, r0, #4, #4
 800222a:	3001      	adds	r0, #1
 800222c:	fbb1 f0f0 	udiv	r0, r1, r0
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002230:	6919      	ldr	r1, [r3, #16]
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8002232:	691a      	ldr	r2, [r3, #16]
        if(pllp == 0U)
 8002234:	0ed2      	lsrs	r2, r2, #27
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002236:	f3c1 2106 	ubfx	r1, r1, #8, #7
        if(pllp == 0U)
 800223a:	d1bd      	bne.n	80021b8 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	e7b6      	b.n	80021ae <RCCEx_GetSAIxPeriphCLKFreq+0x66>
    }
  }


  return frequency;
}
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40021000 	.word	0x40021000
 8002248:	001fff68 	.word	0x001fff68
 800224c:	00f42400 	.word	0x00f42400

08002250 <RCCEx_PLLSAI1_Config>:
{
 8002250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002252:	4c3b      	ldr	r4, [pc, #236]	@ (8002340 <RCCEx_PLLSAI1_Config+0xf0>)
 8002254:	68e3      	ldr	r3, [r4, #12]
 8002256:	079b      	lsls	r3, r3, #30
{
 8002258:	4605      	mov	r5, r0
 800225a:	460e      	mov	r6, r1
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800225c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800225e:	d022      	beq.n	80022a6 <RCCEx_PLLSAI1_Config+0x56>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002260:	68e3      	ldr	r3, [r4, #12]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	4283      	cmp	r3, r0
 8002268:	d130      	bne.n	80022cc <RCCEx_PLLSAI1_Config+0x7c>
       ||
 800226a:	b37b      	cbz	r3, 80022cc <RCCEx_PLLSAI1_Config+0x7c>
    __HAL_RCC_PLLSAI1_DISABLE();
 800226c:	6823      	ldr	r3, [r4, #0]
 800226e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002272:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002274:	f7ff f83a 	bl	80012ec <HAL_GetTick>
 8002278:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800227a:	6823      	ldr	r3, [r4, #0]
 800227c:	011a      	lsls	r2, r3, #4
 800227e:	d42e      	bmi.n	80022de <RCCEx_PLLSAI1_Config+0x8e>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002280:	686a      	ldr	r2, [r5, #4]
 8002282:	68a8      	ldr	r0, [r5, #8]
 8002284:	3a01      	subs	r2, #1
 8002286:	0200      	lsls	r0, r0, #8
 8002288:	0112      	lsls	r2, r2, #4
      if(Divider == DIVIDER_P_UPDATE)
 800228a:	b37e      	cbz	r6, 80022ec <RCCEx_PLLSAI1_Config+0x9c>
      else if(Divider == DIVIDER_Q_UPDATE)
 800228c:	2e01      	cmp	r6, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800228e:	6926      	ldr	r6, [r4, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8002290:	d145      	bne.n	800231e <RCCEx_PLLSAI1_Config+0xce>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002292:	692b      	ldr	r3, [r5, #16]
 8002294:	085b      	lsrs	r3, r3, #1
 8002296:	1e59      	subs	r1, r3, #1
 8002298:	4b2a      	ldr	r3, [pc, #168]	@ (8002344 <RCCEx_PLLSAI1_Config+0xf4>)
 800229a:	4033      	ands	r3, r6
 800229c:	4303      	orrs	r3, r0
 800229e:	4313      	orrs	r3, r2
 80022a0:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80022a4:	e02a      	b.n	80022fc <RCCEx_PLLSAI1_Config+0xac>
    switch(PllSai1->PLLSAI1Source)
 80022a6:	2802      	cmp	r0, #2
 80022a8:	d00c      	beq.n	80022c4 <RCCEx_PLLSAI1_Config+0x74>
 80022aa:	2803      	cmp	r0, #3
 80022ac:	d010      	beq.n	80022d0 <RCCEx_PLLSAI1_Config+0x80>
 80022ae:	2801      	cmp	r0, #1
 80022b0:	d10c      	bne.n	80022cc <RCCEx_PLLSAI1_Config+0x7c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80022b2:	6823      	ldr	r3, [r4, #0]
 80022b4:	079f      	lsls	r7, r3, #30
 80022b6:	d518      	bpl.n	80022ea <RCCEx_PLLSAI1_Config+0x9a>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80022b8:	68e3      	ldr	r3, [r4, #12]
 80022ba:	f023 0303 	bic.w	r3, r3, #3
 80022be:	4303      	orrs	r3, r0
 80022c0:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 80022c2:	e7d3      	b.n	800226c <RCCEx_PLLSAI1_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80022c4:	6823      	ldr	r3, [r4, #0]
 80022c6:	f413 6f80 	tst.w	r3, #1024	@ 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022ca:	d1f5      	bne.n	80022b8 <RCCEx_PLLSAI1_Config+0x68>
 80022cc:	2001      	movs	r0, #1
 80022ce:	e00c      	b.n	80022ea <RCCEx_PLLSAI1_Config+0x9a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80022d0:	6823      	ldr	r3, [r4, #0]
 80022d2:	0399      	lsls	r1, r3, #14
 80022d4:	d4f0      	bmi.n	80022b8 <RCCEx_PLLSAI1_Config+0x68>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022d6:	6823      	ldr	r3, [r4, #0]
 80022d8:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 80022dc:	e7f5      	b.n	80022ca <RCCEx_PLLSAI1_Config+0x7a>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80022de:	f7ff f805 	bl	80012ec <HAL_GetTick>
 80022e2:	1bc0      	subs	r0, r0, r7
 80022e4:	2802      	cmp	r0, #2
 80022e6:	d9c8      	bls.n	800227a <RCCEx_PLLSAI1_Config+0x2a>
 80022e8:	2003      	movs	r0, #3
}
 80022ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022ec:	6926      	ldr	r6, [r4, #16]
 80022ee:	68eb      	ldr	r3, [r5, #12]
 80022f0:	4915      	ldr	r1, [pc, #84]	@ (8002348 <RCCEx_PLLSAI1_Config+0xf8>)
 80022f2:	ea40 63c3 	orr.w	r3, r0, r3, lsl #27
 80022f6:	4031      	ands	r1, r6
 80022f8:	430b      	orrs	r3, r1
 80022fa:	4313      	orrs	r3, r2
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022fc:	6123      	str	r3, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 80022fe:	6823      	ldr	r3, [r4, #0]
 8002300:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002304:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8002306:	f7fe fff1 	bl	80012ec <HAL_GetTick>
 800230a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800230c:	6823      	ldr	r3, [r4, #0]
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	d50f      	bpl.n	8002332 <RCCEx_PLLSAI1_Config+0xe2>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002312:	6923      	ldr	r3, [r4, #16]
 8002314:	69aa      	ldr	r2, [r5, #24]
 8002316:	4313      	orrs	r3, r2
 8002318:	6123      	str	r3, [r4, #16]
 800231a:	2000      	movs	r0, #0
  return status;
 800231c:	e7e5      	b.n	80022ea <RCCEx_PLLSAI1_Config+0x9a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800231e:	696b      	ldr	r3, [r5, #20]
 8002320:	085b      	lsrs	r3, r3, #1
 8002322:	1e59      	subs	r1, r3, #1
 8002324:	4b09      	ldr	r3, [pc, #36]	@ (800234c <RCCEx_PLLSAI1_Config+0xfc>)
 8002326:	4033      	ands	r3, r6
 8002328:	4303      	orrs	r3, r0
 800232a:	4313      	orrs	r3, r2
 800232c:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8002330:	e7e4      	b.n	80022fc <RCCEx_PLLSAI1_Config+0xac>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002332:	f7fe ffdb 	bl	80012ec <HAL_GetTick>
 8002336:	1b80      	subs	r0, r0, r6
 8002338:	2802      	cmp	r0, #2
 800233a:	d9e7      	bls.n	800230c <RCCEx_PLLSAI1_Config+0xbc>
 800233c:	e7d4      	b.n	80022e8 <RCCEx_PLLSAI1_Config+0x98>
 800233e:	bf00      	nop
 8002340:	40021000 	.word	0x40021000
 8002344:	ff9f800f 	.word	0xff9f800f
 8002348:	07ff800f 	.word	0x07ff800f
 800234c:	f9ff800f 	.word	0xf9ff800f

08002350 <RCCEx_PLLSAI2_Config>:
{
 8002350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002352:	4c3b      	ldr	r4, [pc, #236]	@ (8002440 <RCCEx_PLLSAI2_Config+0xf0>)
 8002354:	68e3      	ldr	r3, [r4, #12]
 8002356:	079b      	lsls	r3, r3, #30
{
 8002358:	4605      	mov	r5, r0
 800235a:	460e      	mov	r6, r1
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800235c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800235e:	d022      	beq.n	80023a6 <RCCEx_PLLSAI2_Config+0x56>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002360:	68e3      	ldr	r3, [r4, #12]
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	4283      	cmp	r3, r0
 8002368:	d130      	bne.n	80023cc <RCCEx_PLLSAI2_Config+0x7c>
       ||
 800236a:	b37b      	cbz	r3, 80023cc <RCCEx_PLLSAI2_Config+0x7c>
    __HAL_RCC_PLLSAI2_DISABLE();
 800236c:	6823      	ldr	r3, [r4, #0]
 800236e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002372:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002374:	f7fe ffba 	bl	80012ec <HAL_GetTick>
 8002378:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800237a:	6823      	ldr	r3, [r4, #0]
 800237c:	009a      	lsls	r2, r3, #2
 800237e:	d42e      	bmi.n	80023de <RCCEx_PLLSAI2_Config+0x8e>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002380:	686a      	ldr	r2, [r5, #4]
 8002382:	68a8      	ldr	r0, [r5, #8]
 8002384:	3a01      	subs	r2, #1
 8002386:	0200      	lsls	r0, r0, #8
 8002388:	0112      	lsls	r2, r2, #4
      if(Divider == DIVIDER_P_UPDATE)
 800238a:	b37e      	cbz	r6, 80023ec <RCCEx_PLLSAI2_Config+0x9c>
      else if(Divider == DIVIDER_Q_UPDATE)
 800238c:	2e01      	cmp	r6, #1
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800238e:	6966      	ldr	r6, [r4, #20]
      else if(Divider == DIVIDER_Q_UPDATE)
 8002390:	d145      	bne.n	800241e <RCCEx_PLLSAI2_Config+0xce>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002392:	692b      	ldr	r3, [r5, #16]
 8002394:	085b      	lsrs	r3, r3, #1
 8002396:	1e59      	subs	r1, r3, #1
 8002398:	4b2a      	ldr	r3, [pc, #168]	@ (8002444 <RCCEx_PLLSAI2_Config+0xf4>)
 800239a:	4033      	ands	r3, r6
 800239c:	4303      	orrs	r3, r0
 800239e:	4313      	orrs	r3, r2
 80023a0:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80023a4:	e02a      	b.n	80023fc <RCCEx_PLLSAI2_Config+0xac>
    switch(PllSai2->PLLSAI2Source)
 80023a6:	2802      	cmp	r0, #2
 80023a8:	d00c      	beq.n	80023c4 <RCCEx_PLLSAI2_Config+0x74>
 80023aa:	2803      	cmp	r0, #3
 80023ac:	d010      	beq.n	80023d0 <RCCEx_PLLSAI2_Config+0x80>
 80023ae:	2801      	cmp	r0, #1
 80023b0:	d10c      	bne.n	80023cc <RCCEx_PLLSAI2_Config+0x7c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023b2:	6823      	ldr	r3, [r4, #0]
 80023b4:	079f      	lsls	r7, r3, #30
 80023b6:	d518      	bpl.n	80023ea <RCCEx_PLLSAI2_Config+0x9a>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80023b8:	68e3      	ldr	r3, [r4, #12]
 80023ba:	f023 0303 	bic.w	r3, r3, #3
 80023be:	4303      	orrs	r3, r0
 80023c0:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 80023c2:	e7d3      	b.n	800236c <RCCEx_PLLSAI2_Config+0x1c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023c4:	6823      	ldr	r3, [r4, #0]
 80023c6:	f413 6f80 	tst.w	r3, #1024	@ 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023ca:	d1f5      	bne.n	80023b8 <RCCEx_PLLSAI2_Config+0x68>
 80023cc:	2001      	movs	r0, #1
 80023ce:	e00c      	b.n	80023ea <RCCEx_PLLSAI2_Config+0x9a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023d0:	6823      	ldr	r3, [r4, #0]
 80023d2:	0399      	lsls	r1, r3, #14
 80023d4:	d4f0      	bmi.n	80023b8 <RCCEx_PLLSAI2_Config+0x68>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023d6:	6823      	ldr	r3, [r4, #0]
 80023d8:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 80023dc:	e7f5      	b.n	80023ca <RCCEx_PLLSAI2_Config+0x7a>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80023de:	f7fe ff85 	bl	80012ec <HAL_GetTick>
 80023e2:	1bc0      	subs	r0, r0, r7
 80023e4:	2802      	cmp	r0, #2
 80023e6:	d9c8      	bls.n	800237a <RCCEx_PLLSAI2_Config+0x2a>
 80023e8:	2003      	movs	r0, #3
}
 80023ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80023ec:	6966      	ldr	r6, [r4, #20]
 80023ee:	68eb      	ldr	r3, [r5, #12]
 80023f0:	4915      	ldr	r1, [pc, #84]	@ (8002448 <RCCEx_PLLSAI2_Config+0xf8>)
 80023f2:	ea40 63c3 	orr.w	r3, r0, r3, lsl #27
 80023f6:	4031      	ands	r1, r6
 80023f8:	430b      	orrs	r3, r1
 80023fa:	4313      	orrs	r3, r2
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80023fc:	6163      	str	r3, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 80023fe:	6823      	ldr	r3, [r4, #0]
 8002400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002404:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8002406:	f7fe ff71 	bl	80012ec <HAL_GetTick>
 800240a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800240c:	6823      	ldr	r3, [r4, #0]
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	d50f      	bpl.n	8002432 <RCCEx_PLLSAI2_Config+0xe2>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002412:	6963      	ldr	r3, [r4, #20]
 8002414:	69aa      	ldr	r2, [r5, #24]
 8002416:	4313      	orrs	r3, r2
 8002418:	6163      	str	r3, [r4, #20]
 800241a:	2000      	movs	r0, #0
  return status;
 800241c:	e7e5      	b.n	80023ea <RCCEx_PLLSAI2_Config+0x9a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800241e:	696b      	ldr	r3, [r5, #20]
 8002420:	085b      	lsrs	r3, r3, #1
 8002422:	1e59      	subs	r1, r3, #1
 8002424:	4b09      	ldr	r3, [pc, #36]	@ (800244c <RCCEx_PLLSAI2_Config+0xfc>)
 8002426:	4033      	ands	r3, r6
 8002428:	4303      	orrs	r3, r0
 800242a:	4313      	orrs	r3, r2
 800242c:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8002430:	e7e4      	b.n	80023fc <RCCEx_PLLSAI2_Config+0xac>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002432:	f7fe ff5b 	bl	80012ec <HAL_GetTick>
 8002436:	1b80      	subs	r0, r0, r6
 8002438:	2802      	cmp	r0, #2
 800243a:	d9e7      	bls.n	800240c <RCCEx_PLLSAI2_Config+0xbc>
 800243c:	e7d4      	b.n	80023e8 <RCCEx_PLLSAI2_Config+0x98>
 800243e:	bf00      	nop
 8002440:	40021000 	.word	0x40021000
 8002444:	ff9f800f 	.word	0xff9f800f
 8002448:	07ff800f 	.word	0x07ff800f
 800244c:	f9ff800f 	.word	0xf9ff800f

08002450 <HAL_RCCEx_PeriphCLKConfig>:
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002450:	6803      	ldr	r3, [r0, #0]
 8002452:	051a      	lsls	r2, r3, #20
{
 8002454:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8002458:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800245a:	d527      	bpl.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x5c>
    switch(PeriphClkInit->Sai1ClockSelection)
 800245c:	6ec1      	ldr	r1, [r0, #108]	@ 0x6c
 800245e:	2940      	cmp	r1, #64	@ 0x40
 8002460:	d026      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002462:	d816      	bhi.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002464:	b351      	cbz	r1, 80024bc <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8002466:	2920      	cmp	r1, #32
 8002468:	d02f      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800246a:	2601      	movs	r6, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800246c:	6823      	ldr	r3, [r4, #0]
 800246e:	04db      	lsls	r3, r3, #19
 8002470:	d50d      	bpl.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x3e>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002472:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8002474:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8002478:	f000 81bc 	beq.w	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800247c:	d82c      	bhi.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
 800247e:	2900      	cmp	r1, #0
 8002480:	f000 81be 	beq.w	8002800 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8002484:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8002488:	f000 81bf 	beq.w	800280a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800248c:	2601      	movs	r6, #1
 800248e:	4635      	mov	r5, r6
 8002490:	e035      	b.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002492:	2960      	cmp	r1, #96	@ 0x60
 8002494:	d001      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8002496:	2980      	cmp	r1, #128	@ 0x80
 8002498:	d1e7      	bne.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800249a:	4a0e      	ldr	r2, [pc, #56]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x84>)
 800249c:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 800249e:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 80024a2:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 80024a6:	430b      	orrs	r3, r1
 80024a8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024ac:	2600      	movs	r6, #0
 80024ae:	e7dd      	b.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024b0:	4a08      	ldr	r2, [pc, #32]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x84>)
 80024b2:	68d3      	ldr	r3, [r2, #12]
 80024b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024b8:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 80024ba:	e7ee      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x4a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024bc:	3004      	adds	r0, #4
 80024be:	f7ff fec7 	bl	8002250 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024c2:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80024c4:	2800      	cmp	r0, #0
 80024c6:	d1d1      	bne.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80024c8:	e7e7      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x4a>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024ca:	2100      	movs	r1, #0
 80024cc:	3020      	adds	r0, #32
 80024ce:	f7ff ff3f 	bl	8002350 <RCCEx_PLLSAI2_Config>
 80024d2:	e7f6      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80024d4:	40021000 	.word	0x40021000
    switch(PeriphClkInit->Sai2ClockSelection)
 80024d8:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 80024dc:	d002      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x94>
 80024de:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80024e2:	d1d3      	bne.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->Sai1ClockSelection)
 80024e4:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 80024e6:	2d00      	cmp	r5, #0
 80024e8:	f040 8195 	bne.w	8002816 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024ec:	4ab3      	ldr	r2, [pc, #716]	@ (80027bc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80024ee:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80024f0:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 80024f4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80024f8:	430b      	orrs	r3, r1
 80024fa:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024fe:	6823      	ldr	r3, [r4, #0]
 8002500:	039f      	lsls	r7, r3, #14
 8002502:	d53a      	bpl.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x12a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002504:	4fad      	ldr	r7, [pc, #692]	@ (80027bc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002506:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002508:	00d8      	lsls	r0, r3, #3
 800250a:	f100 8186 	bmi.w	800281a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      __HAL_RCC_PWR_CLK_ENABLE();
 800250e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002514:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002516:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002518:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800251c:	9301      	str	r3, [sp, #4]
 800251e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002520:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002524:	f8df 9298 	ldr.w	r9, [pc, #664]	@ 80027c0 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8002528:	f8d9 3000 	ldr.w	r3, [r9]
 800252c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002530:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8002534:	f7fe feda 	bl	80012ec <HAL_GetTick>
 8002538:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800253a:	f8d9 3000 	ldr.w	r3, [r9]
 800253e:	05d9      	lsls	r1, r3, #23
 8002540:	f140 816e 	bpl.w	8002820 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    if(ret == HAL_OK)
 8002544:	2d00      	cmp	r5, #0
 8002546:	f040 819e 	bne.w	8002886 <HAL_RCCEx_PeriphCLKConfig+0x436>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800254a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800254e:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 8002552:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8002556:	f040 816d 	bne.w	8002834 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800255a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800255e:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 8002562:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002566:	4313      	orrs	r3, r2
 8002568:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if(pwrclkchanged == SET)
 800256c:	f1b8 0f00 	cmp.w	r8, #0
 8002570:	d003      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002572:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002574:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002578:	65bb      	str	r3, [r7, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800257a:	6823      	ldr	r3, [r4, #0]
 800257c:	07df      	lsls	r7, r3, #31
 800257e:	d508      	bpl.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x142>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002580:	498e      	ldr	r1, [pc, #568]	@ (80027bc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002582:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002584:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002588:	f022 0203 	bic.w	r2, r2, #3
 800258c:	4302      	orrs	r2, r0
 800258e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002592:	0798      	lsls	r0, r3, #30
 8002594:	d508      	bpl.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002596:	4989      	ldr	r1, [pc, #548]	@ (80027bc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002598:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800259a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800259e:	f022 020c 	bic.w	r2, r2, #12
 80025a2:	4302      	orrs	r2, r0
 80025a4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025a8:	0759      	lsls	r1, r3, #29
 80025aa:	d508      	bpl.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x16e>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025ac:	4983      	ldr	r1, [pc, #524]	@ (80027bc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80025ae:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80025b0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80025b4:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 80025b8:	4302      	orrs	r2, r0
 80025ba:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025be:	071a      	lsls	r2, r3, #28
 80025c0:	d508      	bpl.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x184>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025c2:	497e      	ldr	r1, [pc, #504]	@ (80027bc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80025c4:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 80025c6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80025ca:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 80025ce:	4302      	orrs	r2, r0
 80025d0:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025d4:	06df      	lsls	r7, r3, #27
 80025d6:	d508      	bpl.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x19a>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025d8:	4978      	ldr	r1, [pc, #480]	@ (80027bc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80025da:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80025dc:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80025e0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80025e4:	4302      	orrs	r2, r0
 80025e6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025ea:	0698      	lsls	r0, r3, #26
 80025ec:	d508      	bpl.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025ee:	4973      	ldr	r1, [pc, #460]	@ (80027bc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80025f0:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 80025f2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80025f6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80025fa:	4302      	orrs	r2, r0
 80025fc:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002600:	0599      	lsls	r1, r3, #22
 8002602:	d508      	bpl.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002604:	496d      	ldr	r1, [pc, #436]	@ (80027bc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002606:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8002608:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800260c:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8002610:	4302      	orrs	r2, r0
 8002612:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002616:	055a      	lsls	r2, r3, #21
 8002618:	d508      	bpl.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800261a:	4968      	ldr	r1, [pc, #416]	@ (80027bc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800261c:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 800261e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002622:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002626:	4302      	orrs	r2, r0
 8002628:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800262c:	065f      	lsls	r7, r3, #25
 800262e:	d508      	bpl.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002630:	4962      	ldr	r1, [pc, #392]	@ (80027bc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002632:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8002634:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002638:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800263c:	4302      	orrs	r2, r0
 800263e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002642:	0618      	lsls	r0, r3, #24
 8002644:	d508      	bpl.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x208>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002646:	495d      	ldr	r1, [pc, #372]	@ (80027bc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002648:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800264a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800264e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8002652:	4302      	orrs	r2, r0
 8002654:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002658:	05d9      	lsls	r1, r3, #23
 800265a:	d508      	bpl.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800265c:	4957      	ldr	r1, [pc, #348]	@ (80027bc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800265e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8002660:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002664:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8002668:	4302      	orrs	r2, r0
 800266a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800266e:	02da      	lsls	r2, r3, #11
 8002670:	d508      	bpl.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x234>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002672:	4952      	ldr	r1, [pc, #328]	@ (80027bc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002674:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8002676:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 800267a:	f022 0203 	bic.w	r2, r2, #3
 800267e:	4302      	orrs	r2, r0
 8002680:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002684:	049f      	lsls	r7, r3, #18
 8002686:	d510      	bpl.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x25a>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002688:	4a4c      	ldr	r2, [pc, #304]	@ (80027bc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800268a:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 800268c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002690:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8002694:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002696:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800269a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800269e:	f040 80f4 	bne.w	800288a <HAL_RCCEx_PeriphCLKConfig+0x43a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026a2:	68d3      	ldr	r3, [r2, #12]
 80026a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026a8:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80026aa:	6823      	ldr	r3, [r4, #0]
 80026ac:	0318      	lsls	r0, r3, #12
 80026ae:	d50f      	bpl.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026b0:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 80026b2:	4b42      	ldr	r3, [pc, #264]	@ (80027bc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80026b4:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 80026b8:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80026bc:	f040 80f1 	bne.w	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 80026c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026c4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026c8:	68da      	ldr	r2, [r3, #12]
 80026ca:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026ce:	60da      	str	r2, [r3, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026d0:	6823      	ldr	r3, [r4, #0]
 80026d2:	0359      	lsls	r1, r3, #13
 80026d4:	d510      	bpl.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026d6:	4a39      	ldr	r2, [pc, #228]	@ (80027bc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80026d8:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 80026da:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80026de:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80026e2:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026e4:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026ec:	f040 80eb 	bne.w	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026f0:	68d3      	ldr	r3, [r2, #12]
 80026f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026f6:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026f8:	6823      	ldr	r3, [r4, #0]
 80026fa:	045a      	lsls	r2, r3, #17
 80026fc:	d513      	bpl.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026fe:	492f      	ldr	r1, [pc, #188]	@ (80027bc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002700:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8002704:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8002708:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800270c:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800270e:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002716:	d106      	bne.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002718:	2102      	movs	r1, #2
 800271a:	1d20      	adds	r0, r4, #4
 800271c:	f7ff fd98 	bl	8002250 <RCCEx_PLLSAI1_Config>
        status = ret;
 8002720:	1e05      	subs	r5, r0, #0
 8002722:	bf18      	it	ne
 8002724:	462e      	movne	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002726:	6822      	ldr	r2, [r4, #0]
 8002728:	03d3      	lsls	r3, r2, #15
 800272a:	d509      	bpl.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800272c:	4923      	ldr	r1, [pc, #140]	@ (80027bc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800272e:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8002732:	f8d1 309c 	ldr.w	r3, [r1, #156]	@ 0x9c
 8002736:	f023 0304 	bic.w	r3, r3, #4
 800273a:	4303      	orrs	r3, r0
 800273c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002740:	0297      	lsls	r7, r2, #10
 8002742:	d509      	bpl.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x308>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002744:	491d      	ldr	r1, [pc, #116]	@ (80027bc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002746:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 800274a:	f8d1 309c 	ldr.w	r3, [r1, #156]	@ 0x9c
 800274e:	f023 0318 	bic.w	r3, r3, #24
 8002752:	4303      	orrs	r3, r0
 8002754:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002758:	0250      	lsls	r0, r2, #9
 800275a:	d51c      	bpl.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x346>
    __HAL_RCC_PLLSAI2_DISABLE();
 800275c:	4f17      	ldr	r7, [pc, #92]	@ (80027bc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002764:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8002766:	f7fe fdc1 	bl	80012ec <HAL_GetTick>
 800276a:	4680      	mov	r8, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	0099      	lsls	r1, r3, #2
 8002770:	f100 80b5 	bmi.w	80028de <HAL_RCCEx_PeriphCLKConfig+0x48e>
    if(ret == HAL_OK)
 8002774:	b985      	cbnz	r5, 8002798 <HAL_RCCEx_PeriphCLKConfig+0x348>
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8002776:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800277a:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800277e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002782:	4313      	orrs	r3, r2
 8002784:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002788:	2102      	movs	r1, #2
 800278a:	f104 0020 	add.w	r0, r4, #32
 800278e:	f7ff fddf 	bl	8002350 <RCCEx_PLLSAI2_Config>
    if(ret != HAL_OK)
 8002792:	4605      	mov	r5, r0
 8002794:	b900      	cbnz	r0, 8002798 <HAL_RCCEx_PeriphCLKConfig+0x348>
        status = ret;
 8002796:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8002798:	6823      	ldr	r3, [r4, #0]
 800279a:	021a      	lsls	r2, r3, #8
 800279c:	d512      	bpl.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800279e:	4907      	ldr	r1, [pc, #28]	@ (80027bc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80027a0:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80027a4:	f8d1 309c 	ldr.w	r3, [r1, #156]	@ 0x9c
 80027a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80027ac:	4313      	orrs	r3, r2
    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 80027ae:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80027b2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 80027b6:	f000 809b 	beq.w	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80027ba:	e003      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80027bc:	40021000 	.word	0x40021000
 80027c0:	40007000 	.word	0x40007000
        ret = HAL_TIMEOUT;
 80027c4:	4628      	mov	r0, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80027c6:	6823      	ldr	r3, [r4, #0]
 80027c8:	01db      	lsls	r3, r3, #7
 80027ca:	d510      	bpl.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x39e>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80027cc:	4a53      	ldr	r2, [pc, #332]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80027ce:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 80027d2:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 80027d6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80027da:	430b      	orrs	r3, r1
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80027dc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80027e0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80027e4:	d103      	bne.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x39e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027e6:	68d3      	ldr	r3, [r2, #12]
 80027e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027ec:	60d3      	str	r3, [r2, #12]
}
 80027ee:	b002      	add	sp, #8
 80027f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027f4:	4a49      	ldr	r2, [pc, #292]	@ (800291c <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
 80027f6:	68d3      	ldr	r3, [r2, #12]
 80027f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027fc:	60d3      	str	r3, [r2, #12]
      break;
 80027fe:	e671      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x94>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002800:	1d20      	adds	r0, r4, #4
 8002802:	f7ff fd25 	bl	8002250 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002806:	4605      	mov	r5, r0
      break;
 8002808:	e66d      	b.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800280a:	2100      	movs	r1, #0
 800280c:	f104 0020 	add.w	r0, r4, #32
 8002810:	f7ff fd9e 	bl	8002350 <RCCEx_PLLSAI2_Config>
 8002814:	e7f7      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
      status = ret;
 8002816:	462e      	mov	r6, r5
 8002818:	e671      	b.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0xae>
    FlagStatus       pwrclkchanged = RESET;
 800281a:	f04f 0800 	mov.w	r8, #0
 800281e:	e681      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002820:	f7fe fd64 	bl	80012ec <HAL_GetTick>
 8002824:	eba0 000a 	sub.w	r0, r0, sl
 8002828:	2802      	cmp	r0, #2
 800282a:	f67f ae86 	bls.w	800253a <HAL_RCCEx_PeriphCLKConfig+0xea>
        ret = HAL_TIMEOUT;
 800282e:	2603      	movs	r6, #3
 8002830:	4635      	mov	r5, r6
 8002832:	e69b      	b.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x11c>
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002834:	4293      	cmp	r3, r2
 8002836:	f43f ae90 	beq.w	800255a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800283a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800283e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002842:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002846:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800284a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800284e:	f422 7140 	bic.w	r1, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002852:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002856:	07d2      	lsls	r2, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002858:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 800285c:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002860:	f57f ae7b 	bpl.w	800255a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        tickstart = HAL_GetTick();
 8002864:	f7fe fd42 	bl	80012ec <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002868:	f241 3a88 	movw	sl, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800286c:	4681      	mov	r9, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800286e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002872:	079b      	lsls	r3, r3, #30
 8002874:	f53f ae71 	bmi.w	800255a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002878:	f7fe fd38 	bl	80012ec <HAL_GetTick>
 800287c:	eba0 0009 	sub.w	r0, r0, r9
 8002880:	4550      	cmp	r0, sl
 8002882:	d9f4      	bls.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x41e>
 8002884:	e7d3      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x3de>
      status = ret;
 8002886:	462e      	mov	r6, r5
 8002888:	e670      	b.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x11c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800288a:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 800288e:	f47f af0c 	bne.w	80026aa <HAL_RCCEx_PeriphCLKConfig+0x25a>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002892:	2101      	movs	r1, #1
 8002894:	1d20      	adds	r0, r4, #4
 8002896:	f7ff fcdb 	bl	8002250 <RCCEx_PLLSAI1_Config>
          status = ret;
 800289a:	1e05      	subs	r5, r0, #0
 800289c:	bf18      	it	ne
 800289e:	462e      	movne	r6, r5
 80028a0:	e703      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x25a>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028a2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80028a6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 80028aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80028ae:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80028b2:	430a      	orrs	r2, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80028b4:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80028bc:	d121      	bne.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80028c4:	e703      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80028c6:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 80028ca:	f47f af15 	bne.w	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028ce:	2101      	movs	r1, #1
 80028d0:	1d20      	adds	r0, r4, #4
 80028d2:	f7ff fcbd 	bl	8002250 <RCCEx_PLLSAI1_Config>
        status = ret;
 80028d6:	1e05      	subs	r5, r0, #0
 80028d8:	bf18      	it	ne
 80028da:	462e      	movne	r6, r5
 80028dc:	e70c      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028de:	f7fe fd05 	bl	80012ec <HAL_GetTick>
 80028e2:	eba0 0008 	sub.w	r0, r0, r8
 80028e6:	2802      	cmp	r0, #2
 80028e8:	f67f af40 	bls.w	800276c <HAL_RCCEx_PeriphCLKConfig+0x31c>
        ret = HAL_TIMEOUT;
 80028ec:	2503      	movs	r5, #3
 80028ee:	e753      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x348>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 80028f0:	2101      	movs	r1, #1
 80028f2:	f104 0020 	add.w	r0, r4, #32
 80028f6:	f7ff fd2b 	bl	8002350 <RCCEx_PLLSAI2_Config>
      if(ret != HAL_OK)
 80028fa:	2800      	cmp	r0, #0
 80028fc:	f43f af62 	beq.w	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8002900:	e761      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002902:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 8002906:	f47f aee3 	bne.w	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800290a:	2101      	movs	r1, #1
 800290c:	1d20      	adds	r0, r4, #4
 800290e:	f7ff fc9f 	bl	8002250 <RCCEx_PLLSAI1_Config>
        status = ret;
 8002912:	1e05      	subs	r5, r0, #0
 8002914:	bf18      	it	ne
 8002916:	462e      	movne	r6, r5
 8002918:	e6da      	b.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
 800291a:	bf00      	nop
 800291c:	40021000 	.word	0x40021000

08002920 <HAL_RCCEx_GetPeriphCLKFreq>:
  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8002920:	f5b0 3f00 	cmp.w	r0, #131072	@ 0x20000
 8002924:	4ba8      	ldr	r3, [pc, #672]	@ (8002bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8002926:	d119      	bne.n	800295c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8002928:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800292c:	f402 7240 	and.w	r2, r2, #768	@ 0x300
    switch(srcclk)
 8002930:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8002934:	d07d      	beq.n	8002a32 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8002936:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800293a:	d008      	beq.n	800294e <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
 800293c:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
        switch(srcclk)
 8002940:	d150      	bne.n	80029e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002942:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 8002946:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800294a:	03c0      	lsls	r0, r0, #15
 800294c:	4770      	bx	lr
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800294e:	681b      	ldr	r3, [r3, #0]
  uint32_t frequency = 0U;
 8002950:	489e      	ldr	r0, [pc, #632]	@ (8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8002952:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002956:	bf08      	it	eq
 8002958:	2000      	moveq	r0, #0
 800295a:	4770      	bx	lr
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	f002 0203 	and.w	r2, r2, #3
    switch(pll_oscsource)
 8002962:	2a02      	cmp	r2, #2
 8002964:	d02e      	beq.n	80029c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8002966:	2a03      	cmp	r2, #3
 8002968:	d033      	beq.n	80029d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
 800296a:	2a01      	cmp	r2, #1
 800296c:	d135      	bne.n	80029da <HAL_RCCEx_GetPeriphCLKFreq+0xba>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800296e:	6819      	ldr	r1, [r3, #0]
 8002970:	f011 0102 	ands.w	r1, r1, #2
 8002974:	d00d      	beq.n	8002992 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	0711      	lsls	r1, r2, #28
 800297a:	bf4c      	ite	mi
 800297c:	681a      	ldrmi	r2, [r3, #0]
 800297e:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	@ 0x94
 8002982:	4993      	ldr	r1, [pc, #588]	@ (8002bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8002984:	bf4c      	ite	mi
 8002986:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
 800298a:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
 800298e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    switch(PeriphClk)
 8002992:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 8002996:	f000 81b5 	beq.w	8002d04 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
 800299a:	d852      	bhi.n	8002a42 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800299c:	2820      	cmp	r0, #32
 800299e:	f000 8155 	beq.w	8002c4c <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 80029a2:	d821      	bhi.n	80029e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 80029a4:	2808      	cmp	r0, #8
 80029a6:	d81a      	bhi.n	80029de <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 80029a8:	b1e8      	cbz	r0, 80029e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 80029aa:	3801      	subs	r0, #1
 80029ac:	2807      	cmp	r0, #7
 80029ae:	d819      	bhi.n	80029e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 80029b0:	e8df f010 	tbh	[pc, r0, lsl #1]
 80029b4:	01220114 	.word	0x01220114
 80029b8:	012f0018 	.word	0x012f0018
 80029bc:	00180018 	.word	0x00180018
 80029c0:	01380018 	.word	0x01380018
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80029c4:	6819      	ldr	r1, [r3, #0]
        pllvco = HSI_VALUE;
 80029c6:	f411 6180 	ands.w	r1, r1, #1024	@ 0x400
 80029ca:	4a82      	ldr	r2, [pc, #520]	@ (8002bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80029cc:	bf18      	it	ne
 80029ce:	4611      	movne	r1, r2
 80029d0:	e7df      	b.n	8002992 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80029d2:	6819      	ldr	r1, [r3, #0]
        pllvco = HSI_VALUE;
 80029d4:	f411 3100 	ands.w	r1, r1, #131072	@ 0x20000
 80029d8:	e7f7      	b.n	80029ca <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
    switch(pll_oscsource)
 80029da:	2100      	movs	r1, #0
 80029dc:	e7d9      	b.n	8002992 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
    switch(PeriphClk)
 80029de:	2810      	cmp	r0, #16
 80029e0:	f000 8129 	beq.w	8002c36 <HAL_RCCEx_GetPeriphCLKFreq+0x316>
  uint32_t frequency = 0U;
 80029e4:	2000      	movs	r0, #0
}
 80029e6:	4770      	bx	lr
    switch(PeriphClk)
 80029e8:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 80029ec:	f000 817d 	beq.w	8002cea <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
 80029f0:	d80f      	bhi.n	8002a12 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80029f2:	2840      	cmp	r0, #64	@ 0x40
 80029f4:	f000 816c 	beq.w	8002cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
 80029f8:	2880      	cmp	r0, #128	@ 0x80
 80029fa:	d1f3      	bne.n	80029e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80029fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002a00:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
        switch(srcclk)
 8002a04:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 8002a08:	f000 8136 	beq.w	8002c78 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
 8002a0c:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8002a10:	e167      	b.n	8002ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
    switch(PeriphClk)
 8002a12:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8002a16:	d1e5      	bne.n	80029e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8002a18:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002a1c:	f402 2240 	and.w	r2, r2, #786432	@ 0xc0000
        switch(srcclk)
 8002a20:	f5b2 2f00 	cmp.w	r2, #524288	@ 0x80000
 8002a24:	f000 817a 	beq.w	8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8002a28:	f200 8169 	bhi.w	8002cfe <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
        switch(srcclk)
 8002a2c:	2a00      	cmp	r2, #0
 8002a2e:	f000 80ec 	beq.w	8002c0a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
  uint32_t frequency = 0U;
 8002a36:	f013 0f02 	tst.w	r3, #2
 8002a3a:	bf18      	it	ne
 8002a3c:	f44f 40fa 	movne.w	r0, #32000	@ 0x7d00
 8002a40:	e789      	b.n	8002956 <HAL_RCCEx_GetPeriphCLKFreq+0x36>
    switch(PeriphClk)
 8002a42:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 8002a46:	d03e      	beq.n	8002ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 8002a48:	d818      	bhi.n	8002a7c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
 8002a4a:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 8002a4e:	d03a      	beq.n	8002ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 8002a50:	d807      	bhi.n	8002a62 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8002a52:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 8002a56:	d002      	beq.n	8002a5e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002a58:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8002a5c:	d1c2      	bne.n	80029e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8002a5e:	f7ff bb73 	b.w	8002148 <RCCEx_GetSAIxPeriphCLKFreq>
    switch(PeriphClk)
 8002a62:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 8002a66:	f000 80fc 	beq.w	8002c62 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8002a6a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8002a6e:	d1b9      	bne.n	80029e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8002a70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8002a74:	0758      	lsls	r0, r3, #29
 8002a76:	f100 80ff 	bmi.w	8002c78 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
 8002a7a:	e0bb      	b.n	8002bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
    switch(PeriphClk)
 8002a7c:	f5b0 1f00 	cmp.w	r0, #2097152	@ 0x200000
 8002a80:	f000 8117 	beq.w	8002cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x392>
 8002a84:	d80e      	bhi.n	8002aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8002a86:	f5b0 2f00 	cmp.w	r0, #524288	@ 0x80000
 8002a8a:	d03d      	beq.n	8002b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 8002a8c:	f5b0 1f80 	cmp.w	r0, #1048576	@ 0x100000
 8002a90:	d1a8      	bne.n	80029e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8002a92:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8002a96:	f002 0203 	and.w	r2, r2, #3
        switch(srcclk)
 8002a9a:	2a01      	cmp	r2, #1
 8002a9c:	f000 80ec 	beq.w	8002c78 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
 8002aa0:	2a02      	cmp	r2, #2
 8002aa2:	e11e      	b.n	8002ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
    switch(PeriphClk)
 8002aa4:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8002aa8:	d19c      	bne.n	80029e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8002aaa:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8002aae:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
        switch(srcclk)
 8002ab2:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 8002ab6:	d05a      	beq.n	8002b6e <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
 8002ab8:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 8002abc:	d04e      	beq.n	8002b5c <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 8002abe:	2a00      	cmp	r2, #0
 8002ac0:	f000 80da 	beq.w	8002c78 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
 8002ac4:	e78e      	b.n	80029e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8002ac6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002aca:	f002 6240 	and.w	r2, r2, #201326592	@ 0xc000000
        switch(srcclk)
 8002ace:	f1b2 6f00 	cmp.w	r2, #134217728	@ 0x8000000
 8002ad2:	d008      	beq.n	8002ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
        switch(srcclk)
 8002ad4:	d847      	bhi.n	8002b66 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
 8002ad6:	2a00      	cmp	r2, #0
 8002ad8:	d15d      	bne.n	8002b96 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8002ada:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
  uint32_t frequency = 0U;
 8002ade:	483e      	ldr	r0, [pc, #248]	@ (8002bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8002ae0:	f013 0f02 	tst.w	r3, #2
 8002ae4:	e737      	b.n	8002956 <HAL_RCCEx_GetPeriphCLKFreq+0x36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8002aec:	f43f af7b 	beq.w	80029e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8002af0:	68d8      	ldr	r0, [r3, #12]
 8002af2:	f410 1080 	ands.w	r0, r0, #1048576	@ 0x100000
 8002af6:	f43f af76 	beq.w	80029e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8002afa:	68d8      	ldr	r0, [r3, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002afc:	68da      	ldr	r2, [r3, #12]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8002afe:	68db      	ldr	r3, [r3, #12]
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8002b00:	f3c0 2006 	ubfx	r0, r0, #8, #7
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002b04:	4348      	muls	r0, r1
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8002b06:	e056      	b.n	8002bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8002b08:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8002b0c:	0452      	lsls	r2, r2, #17
 8002b0e:	d51e      	bpl.n	8002b4e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8002b10:	6818      	ldr	r0, [r3, #0]
 8002b12:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 8002b16:	f43f af66 	beq.w	80029e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	03d0      	lsls	r0, r2, #15
 8002b1e:	f57f af61 	bpl.w	80029e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8002b22:	68d8      	ldr	r0, [r3, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002b24:	68da      	ldr	r2, [r3, #12]
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8002b26:	f3c0 2006 	ubfx	r0, r0, #8, #7
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002b2a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002b2e:	3201      	adds	r2, #1
 8002b30:	4348      	muls	r0, r1
 8002b32:	fbb0 f0f2 	udiv	r0, r0, r2
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8002b36:	68da      	ldr	r2, [r3, #12]
            if(pllp == 0U)
 8002b38:	0ed2      	lsrs	r2, r2, #27
 8002b3a:	d105      	bne.n	8002b48 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8002b3c:	68db      	ldr	r3, [r3, #12]
                pllp = 17U;
 8002b3e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002b42:	bf0c      	ite	eq
 8002b44:	2207      	moveq	r2, #7
 8002b46:	2211      	movne	r2, #17
            frequency = (pllvco / pllp);
 8002b48:	fbb0 f0f2 	udiv	r0, r0, r2
 8002b4c:	4770      	bx	lr
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8002b4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002b52:	f002 6240 	and.w	r2, r2, #201326592	@ 0xc000000
        switch(srcclk)
 8002b56:	f1b2 6f00 	cmp.w	r2, #134217728	@ 0x8000000
 8002b5a:	d1bb      	bne.n	8002ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	0192      	lsls	r2, r2, #6
 8002b60:	f57f af40 	bpl.w	80029e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 8002b64:	e7c4      	b.n	8002af0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
        switch(srcclk)
 8002b66:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 8002b6a:	f47f af3b 	bne.w	80029e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002b6e:	6818      	ldr	r0, [r3, #0]
 8002b70:	f010 0002 	ands.w	r0, r0, #2
 8002b74:	f43f af37 	beq.w	80029e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	0711      	lsls	r1, r2, #28
 8002b7c:	bf4c      	ite	mi
 8002b7e:	681b      	ldrmi	r3, [r3, #0]
 8002b80:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	@ 0x94
 8002b84:	4a12      	ldr	r2, [pc, #72]	@ (8002bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
 8002b86:	bf4c      	ite	mi
 8002b88:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
 8002b8c:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8002b90:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002b94:	4770      	bx	lr
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8002b96:	6818      	ldr	r0, [r3, #0]
 8002b98:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8002b9c:	f43f af23 	beq.w	80029e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8002ba0:	6918      	ldr	r0, [r3, #16]
 8002ba2:	f410 1080 	ands.w	r0, r0, #1048576	@ 0x100000
 8002ba6:	f43f af1e 	beq.w	80029e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002baa:	6918      	ldr	r0, [r3, #16]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8002bac:	691a      	ldr	r2, [r3, #16]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8002bae:	691b      	ldr	r3, [r3, #16]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002bb0:	f3c0 2006 	ubfx	r0, r0, #8, #7
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8002bb4:	4348      	muls	r0, r1
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002bb6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002bba:	3201      	adds	r2, #1
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8002bbc:	f3c3 5341 	ubfx	r3, r3, #21, #2
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002bc0:	fbb0 f0f2 	udiv	r0, r0, r2
 8002bc4:	e070      	b.n	8002ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8002bc6:	bf00      	nop
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	0007a120 	.word	0x0007a120
 8002bd0:	08007d70 	.word	0x08007d70
 8002bd4:	00f42400 	.word	0x00f42400
 8002bd8:	02dc6c00 	.word	0x02dc6c00
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8002bdc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002be0:	f002 0203 	and.w	r2, r2, #3
        switch(srcclk)
 8002be4:	2a02      	cmp	r2, #2
 8002be6:	f000 8099 	beq.w	8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8002bea:	2a03      	cmp	r2, #3
 8002bec:	f43f aea9 	beq.w	8002942 <HAL_RCCEx_GetPeriphCLKFreq+0x22>
 8002bf0:	2a01      	cmp	r2, #1
 8002bf2:	d041      	beq.n	8002c78 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
          frequency = HAL_RCC_GetPCLK2Freq();
 8002bf4:	f7ff ba96 	b.w	8002124 <HAL_RCC_GetPCLK2Freq>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8002bf8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002bfc:	f002 020c 	and.w	r2, r2, #12
        switch(srcclk)
 8002c00:	2a08      	cmp	r2, #8
 8002c02:	f000 808b 	beq.w	8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8002c06:	d802      	bhi.n	8002c0e <HAL_RCCEx_GetPeriphCLKFreq+0x2ee>
        switch(srcclk)
 8002c08:	bbb2      	cbnz	r2, 8002c78 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
          frequency = HAL_RCC_GetPCLK1Freq();
 8002c0a:	f7ff ba79 	b.w	8002100 <HAL_RCC_GetPCLK1Freq>
        switch(srcclk)
 8002c0e:	2a0c      	cmp	r2, #12
 8002c10:	e696      	b.n	8002940 <HAL_RCCEx_GetPeriphCLKFreq+0x20>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8002c12:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002c16:	f002 0230 	and.w	r2, r2, #48	@ 0x30
        switch(srcclk)
 8002c1a:	2a20      	cmp	r2, #32
 8002c1c:	d07e      	beq.n	8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8002c1e:	d9f3      	bls.n	8002c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8002c20:	2a30      	cmp	r2, #48	@ 0x30
 8002c22:	e68d      	b.n	8002940 <HAL_RCCEx_GetPeriphCLKFreq+0x20>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8002c24:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002c28:	f002 02c0 	and.w	r2, r2, #192	@ 0xc0
        switch(srcclk)
 8002c2c:	2a80      	cmp	r2, #128	@ 0x80
 8002c2e:	d075      	beq.n	8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8002c30:	d9ea      	bls.n	8002c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8002c32:	2ac0      	cmp	r2, #192	@ 0xc0
 8002c34:	e684      	b.n	8002940 <HAL_RCCEx_GetPeriphCLKFreq+0x20>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8002c36:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002c3a:	f402 7240 	and.w	r2, r2, #768	@ 0x300
        switch(srcclk)
 8002c3e:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8002c42:	d06b      	beq.n	8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8002c44:	d9e0      	bls.n	8002c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8002c46:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8002c4a:	e679      	b.n	8002940 <HAL_RCCEx_GetPeriphCLKFreq+0x20>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8002c4c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002c50:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
        switch(srcclk)
 8002c54:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8002c58:	d060      	beq.n	8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8002c5a:	d9d5      	bls.n	8002c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8002c5c:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 8002c60:	e66e      	b.n	8002940 <HAL_RCCEx_GetPeriphCLKFreq+0x20>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8002c62:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002c66:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
        switch(srcclk)
 8002c6a:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 8002c6e:	d005      	beq.n	8002c7c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 8002c70:	f1b2 5f40 	cmp.w	r2, #805306368	@ 0x30000000
 8002c74:	f47f aeb6 	bne.w	80029e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
          frequency = HAL_RCC_GetSysClockFreq();
 8002c78:	f7fe be60 	b.w	800193c <HAL_RCC_GetSysClockFreq>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8002c7c:	6818      	ldr	r0, [r3, #0]
 8002c7e:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8002c82:	f43f aeb0 	beq.w	80029e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 8002c86:	691a      	ldr	r2, [r3, #16]
 8002c88:	01d2      	lsls	r2, r2, #7
 8002c8a:	f57f aeab 	bpl.w	80029e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002c8e:	6918      	ldr	r0, [r3, #16]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8002c90:	691a      	ldr	r2, [r3, #16]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8002c92:	691b      	ldr	r3, [r3, #16]
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002c94:	f3c0 2006 	ubfx	r0, r0, #8, #7
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8002c98:	f3c2 1203 	ubfx	r2, r2, #4, #4
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8002c9c:	f3c3 6341 	ubfx	r3, r3, #25, #2
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8002ca0:	4348      	muls	r0, r1
 8002ca2:	3201      	adds	r2, #1
 8002ca4:	fbb0 f0f2 	udiv	r0, r0, r2
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8002ca8:	3301      	adds	r3, #1
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	fbb0 f0f3 	udiv	r0, r0, r3
 8002cb0:	4770      	bx	lr
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8002cb2:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8002cb6:	f002 0218 	and.w	r2, r2, #24
        switch(srcclk)
 8002cba:	2a08      	cmp	r2, #8
 8002cbc:	d02e      	beq.n	8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8002cbe:	2a10      	cmp	r2, #16
 8002cc0:	f43f af55 	beq.w	8002b6e <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
 8002cc4:	2a00      	cmp	r2, #0
 8002cc6:	f47f ae8d 	bne.w	80029e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8002cca:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002cce:	e6c6      	b.n	8002a5e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8002cd0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002cd4:	f402 5240 	and.w	r2, r2, #12288	@ 0x3000
        switch(srcclk)
 8002cd8:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8002cdc:	d0cc      	beq.n	8002c78 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
 8002cde:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
        switch(srcclk)
 8002ce2:	d01b      	beq.n	8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8002ce4:	2a00      	cmp	r2, #0
 8002ce6:	d090      	beq.n	8002c0a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8002ce8:	e67c      	b.n	80029e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8002cea:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002cee:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
        switch(srcclk)
 8002cf2:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8002cf6:	d0bf      	beq.n	8002c78 <HAL_RCCEx_GetPeriphCLKFreq+0x358>
 8002cf8:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
 8002cfc:	e7f1      	b.n	8002ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
        switch(srcclk)
 8002cfe:	f5b2 2f40 	cmp.w	r2, #786432	@ 0xc0000
 8002d02:	e61d      	b.n	8002940 <HAL_RCCEx_GetPeriphCLKFreq+0x20>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8002d04:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002d08:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
        switch(srcclk)
 8002d0c:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 8002d10:	d004      	beq.n	8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8002d12:	f67f ae8b 	bls.w	8002a2c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8002d16:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
 8002d1a:	e611      	b.n	8002940 <HAL_RCCEx_GetPeriphCLKFreq+0x20>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002d1c:	681b      	ldr	r3, [r3, #0]
  uint32_t frequency = 0U;
 8002d1e:	4802      	ldr	r0, [pc, #8]	@ (8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x408>)
 8002d20:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002d24:	e617      	b.n	8002956 <HAL_RCCEx_GetPeriphCLKFreq+0x36>
 8002d26:	bf00      	nop
 8002d28:	00f42400 	.word	0x00f42400

08002d2c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8002d2c:	b510      	push	{r4, lr}
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8002d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d68 <SAI_Disable+0x3c>)
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8002d30:	6804      	ldr	r4, [r0, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8002d38:	fbb2 f2f3 	udiv	r2, r2, r3
  __HAL_SAI_DISABLE(hsai);
 8002d3c:	6823      	ldr	r3, [r4, #0]
 8002d3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
{
 8002d42:	4601      	mov	r1, r0
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8002d44:	0092      	lsls	r2, r2, #2
  __HAL_SAI_DISABLE(hsai);
 8002d46:	6023      	str	r3, [r4, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8002d48:	b93a      	cbnz	r2, 8002d5a <SAI_Disable+0x2e>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8002d4a:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 8002d4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
      status = HAL_TIMEOUT;
 8002d56:	2003      	movs	r0, #3
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);

  return status;
}
 8002d58:	bd10      	pop	{r4, pc}
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8002d5a:	6820      	ldr	r0, [r4, #0]
 8002d5c:	f410 3080 	ands.w	r0, r0, #65536	@ 0x10000
    count--;
 8002d60:	f102 32ff 	add.w	r2, r2, #4294967295
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8002d64:	d1f0      	bne.n	8002d48 <SAI_Disable+0x1c>
 8002d66:	e7f7      	b.n	8002d58 <SAI_Disable+0x2c>
 8002d68:	20000000 	.word	0x20000000

08002d6c <HAL_SAI_Init>:
{
 8002d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hsai == NULL)
 8002d6e:	4604      	mov	r4, r0
 8002d70:	b910      	cbnz	r0, 8002d78 <HAL_SAI_Init+0xc>
    return HAL_ERROR;
 8002d72:	2501      	movs	r5, #1
}
 8002d74:	4628      	mov	r0, r5
 8002d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8002d78:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d109      	bne.n	8002d94 <HAL_SAI_Init+0x28>
    if ((hsai->Instance != SAI1_Block_A) ||
 8002d80:	6802      	ldr	r2, [r0, #0]
 8002d82:	4b83      	ldr	r3, [pc, #524]	@ (8002f90 <HAL_SAI_Init+0x224>)
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d1f4      	bne.n	8002d72 <HAL_SAI_Init+0x6>
 8002d88:	6843      	ldr	r3, [r0, #4]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d1f1      	bne.n	8002d72 <HAL_SAI_Init+0x6>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8002d8e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1ee      	bne.n	8002d72 <HAL_SAI_Init+0x6>
  if (hsai->State == HAL_SAI_STATE_RESET)
 8002d94:	f894 308d 	ldrb.w	r3, [r4, #141]	@ 0x8d
 8002d98:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002d9c:	b923      	cbnz	r3, 8002da8 <HAL_SAI_Init+0x3c>
    hsai->Lock = HAL_UNLOCKED;
 8002d9e:	f884 208c 	strb.w	r2, [r4, #140]	@ 0x8c
    HAL_SAI_MspInit(hsai);
 8002da2:	4620      	mov	r0, r4
 8002da4:	f7fd ff4e 	bl	8000c44 <HAL_SAI_MspInit>
  if (SAI_Disable(hsai) != HAL_OK)
 8002da8:	4620      	mov	r0, r4
 8002daa:	f7ff ffbf 	bl	8002d2c <SAI_Disable>
 8002dae:	4605      	mov	r5, r0
 8002db0:	2800      	cmp	r0, #0
 8002db2:	d1de      	bne.n	8002d72 <HAL_SAI_Init+0x6>
  hsai->State = HAL_SAI_STATE_BUSY;
 8002db4:	2302      	movs	r3, #2
 8002db6:	f884 308d 	strb.w	r3, [r4, #141]	@ 0x8d
  switch (hsai->Init.SynchroExt)
 8002dba:	68e3      	ldr	r3, [r4, #12]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	f000 80c4 	beq.w	8002f4a <HAL_SAI_Init+0x1de>
 8002dc2:	1e98      	subs	r0, r3, #2
 8002dc4:	4243      	negs	r3, r0
 8002dc6:	4143      	adcs	r3, r0
 8002dc8:	015b      	lsls	r3, r3, #5
  switch (hsai->Init.Synchro)
 8002dca:	68a7      	ldr	r7, [r4, #8]
 8002dcc:	2f02      	cmp	r7, #2
 8002dce:	f000 80c0 	beq.w	8002f52 <HAL_SAI_Init+0x1e6>
 8002dd2:	2f03      	cmp	r7, #3
 8002dd4:	f000 80bb 	beq.w	8002f4e <HAL_SAI_Init+0x1e2>
 8002dd8:	1e79      	subs	r1, r7, #1
 8002dda:	424f      	negs	r7, r1
 8002ddc:	414f      	adcs	r7, r1
 8002dde:	02bf      	lsls	r7, r7, #10
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8002de0:	6822      	ldr	r2, [r4, #0]
 8002de2:	4e6b      	ldr	r6, [pc, #428]	@ (8002f90 <HAL_SAI_Init+0x224>)
 8002de4:	42b2      	cmp	r2, r6
 8002de6:	d003      	beq.n	8002df0 <HAL_SAI_Init+0x84>
 8002de8:	496a      	ldr	r1, [pc, #424]	@ (8002f94 <HAL_SAI_Init+0x228>)
 8002dea:	428a      	cmp	r2, r1
 8002dec:	f040 80b4 	bne.w	8002f58 <HAL_SAI_Init+0x1ec>
    SAI1->GCR = tmpregisterGCR;
 8002df0:	4969      	ldr	r1, [pc, #420]	@ (8002f98 <HAL_SAI_Init+0x22c>)
    SAI2->GCR = tmpregisterGCR;
 8002df2:	600b      	str	r3, [r1, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8002df4:	69e3      	ldr	r3, [r4, #28]
 8002df6:	b35b      	cbz	r3, 8002e50 <HAL_SAI_Init+0xe4>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8002df8:	42b2      	cmp	r2, r6
 8002dfa:	d003      	beq.n	8002e04 <HAL_SAI_Init+0x98>
 8002dfc:	4b65      	ldr	r3, [pc, #404]	@ (8002f94 <HAL_SAI_Init+0x228>)
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	f040 80ac 	bne.w	8002f5c <HAL_SAI_Init+0x1f0>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8002e04:	f44f 6000 	mov.w	r0, #2048	@ 0x800
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8002e08:	f7ff fd8a 	bl	8002920 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8002e0c:	6963      	ldr	r3, [r4, #20]
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8002e0e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002e10:	69e1      	ldr	r1, [r4, #28]
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8002e12:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002e16:	f040 80a9 	bne.w	8002f6c <HAL_SAI_Init+0x200>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8002e1a:	2a04      	cmp	r2, #4
 8002e1c:	f000 80a1 	beq.w	8002f62 <HAL_SAI_Init+0x1f6>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8002e20:	2a08      	cmp	r2, #8
 8002e22:	f000 80a0 	beq.w	8002f66 <HAL_SAI_Init+0x1fa>
        tmpframelength = hsai->FrameInit.FrameLength;
 8002e26:	6d23      	ldr	r3, [r4, #80]	@ 0x50
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8002e28:	f04f 0c0a 	mov.w	ip, #10
 8002e2c:	fb0c f000 	mul.w	r0, ip, r0
 8002e30:	434b      	muls	r3, r1
    hsai->Init.Mckdiv = tmpval / 10U;
 8002e32:	210a      	movs	r1, #10
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8002e34:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10U;
 8002e38:	fbb0 f3f1 	udiv	r3, r0, r1
    if ((tmpval % 10U) > 8U)
 8002e3c:	fb01 0013 	mls	r0, r1, r3, r0
 8002e40:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv += 1U;
 8002e42:	bf08      	it	eq
 8002e44:	3301      	addeq	r3, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8002e46:	2a04      	cmp	r2, #4
    hsai->Init.Mckdiv = tmpval / 10U;
 8002e48:	6223      	str	r3, [r4, #32]
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8002e4a:	bf04      	itt	eq
 8002e4c:	085b      	lsreq	r3, r3, #1
 8002e4e:	6223      	streq	r3, [r4, #32]
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8002e50:	6863      	ldr	r3, [r4, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8002e52:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8002e54:	f033 0202 	bics.w	r2, r3, #2
 8002e58:	f040 8095 	bne.w	8002f86 <HAL_SAI_Init+0x21a>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8002e5c:	3901      	subs	r1, #1
 8002e5e:	bf18      	it	ne
 8002e60:	2101      	movne	r1, #1
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8002e62:	6822      	ldr	r2, [r4, #0]
 8002e64:	484d      	ldr	r0, [pc, #308]	@ (8002f9c <HAL_SAI_Init+0x230>)
 8002e66:	f8d2 c000 	ldr.w	ip, [r2]
 8002e6a:	ea0c 0000 	and.w	r0, ip, r0
 8002e6e:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8002e70:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8002e72:	f8d2 c000 	ldr.w	ip, [r2]
 8002e76:	4303      	orrs	r3, r0
 8002e78:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8002e7a:	4303      	orrs	r3, r0
 8002e7c:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8002e7e:	4303      	orrs	r3, r0
 8002e80:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8002e82:	4303      	orrs	r3, r0
 8002e84:	6920      	ldr	r0, [r4, #16]
 8002e86:	4303      	orrs	r3, r0
 8002e88:	6960      	ldr	r0, [r4, #20]
 8002e8a:	4303      	orrs	r3, r0
 8002e8c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002e8e:	4303      	orrs	r3, r0
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8002e90:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8002e92:	ea43 030c 	orr.w	r3, r3, ip
 8002e96:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8002e9a:	0249      	lsls	r1, r1, #9
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8002e9c:	433b      	orrs	r3, r7
 8002e9e:	430b      	orrs	r3, r1
 8002ea0:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8002ea2:	6853      	ldr	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8002ea4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8002ea6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002eaa:	f023 030f 	bic.w	r3, r3, #15
 8002eae:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8002eb0:	69a3      	ldr	r3, [r4, #24]
 8002eb2:	6851      	ldr	r1, [r2, #4]
 8002eb4:	4303      	orrs	r3, r0
 8002eb6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002eb8:	4303      	orrs	r3, r0
 8002eba:	430b      	orrs	r3, r1
 8002ebc:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8002ebe:	6891      	ldr	r1, [r2, #8]
 8002ec0:	4b37      	ldr	r3, [pc, #220]	@ (8002fa0 <HAL_SAI_Init+0x234>)
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8002ec2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8002ec4:	400b      	ands	r3, r1
 8002ec6:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8002ec8:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002eca:	6891      	ldr	r1, [r2, #8]
 8002ecc:	4303      	orrs	r3, r0
 8002ece:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8002ed0:	4303      	orrs	r3, r0
 8002ed2:	430b      	orrs	r3, r1
 8002ed4:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8002ed6:	3901      	subs	r1, #1
 8002ed8:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8002eda:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8002edc:	3901      	subs	r1, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8002ede:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002ee2:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8002ee4:	68d3      	ldr	r3, [r2, #12]
 8002ee6:	f423 637d 	bic.w	r3, r3, #4048	@ 0xfd0
 8002eea:	f023 030f 	bic.w	r3, r3, #15
 8002eee:	041b      	lsls	r3, r3, #16
 8002ef0:	0c1b      	lsrs	r3, r3, #16
 8002ef2:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8002ef4:	68d1      	ldr	r1, [r2, #12]
 8002ef6:	e9d4 3019 	ldrd	r3, r0, [r4, #100]	@ 0x64
 8002efa:	4303      	orrs	r3, r0
 8002efc:	430b      	orrs	r3, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8002efe:	6f21      	ldr	r1, [r4, #112]	@ 0x70
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8002f00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8002f04:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8002f06:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8002f08:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  if (hsai->Instance == SAI1_Block_A)
 8002f0c:	42b2      	cmp	r2, r6
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8002f0e:	60d3      	str	r3, [r2, #12]
  if (hsai->Instance == SAI1_Block_A)
 8002f10:	d112      	bne.n	8002f38 <HAL_SAI_Init+0x1cc>
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8002f12:	4b21      	ldr	r3, [pc, #132]	@ (8002f98 <HAL_SAI_Init+0x22c>)
 8002f14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f16:	f022 0201 	bic.w	r2, r2, #1
 8002f1a:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8002f1c:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 8002f20:	2a01      	cmp	r2, #1
 8002f22:	d109      	bne.n	8002f38 <HAL_SAI_Init+0x1cc>
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8002f24:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002f26:	1e51      	subs	r1, r2, #1
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8002f28:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002f2a:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 8002f2e:	645a      	str	r2, [r3, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8002f30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f32:	f042 0201 	orr.w	r2, r2, #1
 8002f36:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8002f38:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 8002f3a:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8002f3c:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
  __HAL_UNLOCK(hsai);
 8002f40:	f884 308c 	strb.w	r3, [r4, #140]	@ 0x8c
  hsai->State = HAL_SAI_STATE_READY;
 8002f44:	f884 208d 	strb.w	r2, [r4, #141]	@ 0x8d
  return HAL_OK;
 8002f48:	e714      	b.n	8002d74 <HAL_SAI_Init+0x8>
  switch (hsai->Init.SynchroExt)
 8002f4a:	2310      	movs	r3, #16
 8002f4c:	e73d      	b.n	8002dca <HAL_SAI_Init+0x5e>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8002f4e:	f043 0301 	orr.w	r3, r3, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8002f52:	f44f 6700 	mov.w	r7, #2048	@ 0x800
 8002f56:	e743      	b.n	8002de0 <HAL_SAI_Init+0x74>
    SAI2->GCR = tmpregisterGCR;
 8002f58:	4912      	ldr	r1, [pc, #72]	@ (8002fa4 <HAL_SAI_Init+0x238>)
 8002f5a:	e74a      	b.n	8002df2 <HAL_SAI_Init+0x86>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8002f5c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002f60:	e752      	b.n	8002e08 <HAL_SAI_Init+0x9c>
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8002f62:	2340      	movs	r3, #64	@ 0x40
 8002f64:	e760      	b.n	8002e28 <HAL_SAI_Init+0xbc>
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8002f66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f6a:	e75d      	b.n	8002e28 <HAL_SAI_Init+0xbc>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8002f6c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002f6e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f72:	bf14      	ite	ne
 8002f74:	2301      	movne	r3, #1
 8002f76:	2302      	moveq	r3, #2
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8002f78:	f04f 0c0a 	mov.w	ip, #10
 8002f7c:	434b      	muls	r3, r1
 8002f7e:	fb0c f000 	mul.w	r0, ip, r0
 8002f82:	021b      	lsls	r3, r3, #8
 8002f84:	e755      	b.n	8002e32 <HAL_SAI_Init+0xc6>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8002f86:	1e4a      	subs	r2, r1, #1
 8002f88:	4251      	negs	r1, r2
 8002f8a:	4151      	adcs	r1, r2
 8002f8c:	e769      	b.n	8002e62 <HAL_SAI_Init+0xf6>
 8002f8e:	bf00      	nop
 8002f90:	40015404 	.word	0x40015404
 8002f94:	40015424 	.word	0x40015424
 8002f98:	40015400 	.word	0x40015400
 8002f9c:	f805c010 	.word	0xf805c010
 8002fa0:	fff88000 	.word	0xfff88000
 8002fa4:	40015800 	.word	0x40015800

08002fa8 <SD_FindSCR.constprop.0>:
  * @brief  Finds the SD card SCR register value.
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
 8002fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fac:	b086      	sub	sp, #24
 8002fae:	4605      	mov	r5, r0
 8002fb0:	4688      	mov	r8, r1
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002fb2:	f7fe f99b 	bl	80012ec <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8002fb6:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 8002fb8:	4681      	mov	r9, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8002fba:	6828      	ldr	r0, [r5, #0]
 8002fbc:	f001 fa44 	bl	8004448 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002fc0:	4604      	mov	r4, r0
 8002fc2:	bb48      	cbnz	r0, 8003018 <SD_FindSCR.constprop.0+0x70>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8002fc4:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 8002fc6:	6828      	ldr	r0, [r5, #0]
 8002fc8:	0409      	lsls	r1, r1, #16
 8002fca:	f001 fa71 	bl	80044b0 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002fce:	4604      	mov	r4, r0
 8002fd0:	bb10      	cbnz	r0, 8003018 <SD_FindSCR.constprop.0+0x70>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8U;
 8002fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd6:	2308      	movs	r3, #8
 8002fd8:	e9cd 0300 	strd	r0, r3, [sp]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8002fdc:	2630      	movs	r6, #48	@ 0x30
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e9cd 6302 	strd	r6, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
  config.DPSM          = SDMMC_DPSM_ENABLE;
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8002fe4:	4669      	mov	r1, sp
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8002fe6:	2301      	movs	r3, #1
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8002fe8:	6828      	ldr	r0, [r5, #0]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8002fea:	9404      	str	r4, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8002fec:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8002fee:	f001 f95c 	bl	80042aa <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8002ff2:	6828      	ldr	r0, [r5, #0]
 8002ff4:	f001 fa90 	bl	8004518 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ff8:	4604      	mov	r4, r0
 8002ffa:	b968      	cbnz	r0, 8003018 <SD_FindSCR.constprop.0+0x70>
  uint32_t tempscr[2U] = {0UL, 0UL};
 8002ffc:	4607      	mov	r7, r0
 8002ffe:	4606      	mov	r6, r0
  {
    return errorstate;
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8003000:	f240 5a2a 	movw	sl, #1322	@ 0x52a
 8003004:	6828      	ldr	r0, [r5, #0]
 8003006:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003008:	ea13 0f0a 	tst.w	r3, sl
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800300c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800300e:	d007      	beq.n	8003020 <SD_FindSCR.constprop.0+0x78>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8003010:	071a      	lsls	r2, r3, #28
 8003012:	d519      	bpl.n	8003048 <SD_FindSCR.constprop.0+0xa0>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8003014:	2408      	movs	r4, #8

    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8003016:	6384      	str	r4, [r0, #56]	@ 0x38
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8003018:	4620      	mov	r0, r4
 800301a:	b006      	add	sp, #24
 800301c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8003020:	0319      	lsls	r1, r3, #12
 8003022:	d408      	bmi.n	8003036 <SD_FindSCR.constprop.0+0x8e>
 8003024:	b93c      	cbnz	r4, 8003036 <SD_FindSCR.constprop.0+0x8e>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8003026:	f001 f917 	bl	8004258 <SDMMC_ReadFIFO>
 800302a:	4606      	mov	r6, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800302c:	6828      	ldr	r0, [r5, #0]
 800302e:	f001 f913 	bl	8004258 <SDMMC_ReadFIFO>
      index++;
 8003032:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8003034:	4607      	mov	r7, r0
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003036:	f7fe f959 	bl	80012ec <HAL_GetTick>
 800303a:	eba0 0009 	sub.w	r0, r0, r9
 800303e:	3001      	adds	r0, #1
 8003040:	d1e0      	bne.n	8003004 <SD_FindSCR.constprop.0+0x5c>
      return HAL_SD_ERROR_TIMEOUT;
 8003042:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8003046:	e7e7      	b.n	8003018 <SD_FindSCR.constprop.0+0x70>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003048:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800304a:	079b      	lsls	r3, r3, #30
 800304c:	d501      	bpl.n	8003052 <SD_FindSCR.constprop.0+0xaa>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800304e:	2402      	movs	r4, #2
 8003050:	e7e1      	b.n	8003016 <SD_FindSCR.constprop.0+0x6e>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8003052:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8003054:	f014 0420 	ands.w	r4, r4, #32
 8003058:	d001      	beq.n	800305e <SD_FindSCR.constprop.0+0xb6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800305a:	2420      	movs	r4, #32
 800305c:	e7db      	b.n	8003016 <SD_FindSCR.constprop.0+0x6e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800305e:	4b04      	ldr	r3, [pc, #16]	@ (8003070 <SD_FindSCR.constprop.0+0xc8>)
 8003060:	6383      	str	r3, [r0, #56]	@ 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003062:	ba3f      	rev	r7, r7
 8003064:	ba36      	rev	r6, r6
 8003066:	f8c8 7000 	str.w	r7, [r8]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800306a:	f8c8 6004 	str.w	r6, [r8, #4]
  return HAL_SD_ERROR_NONE;
 800306e:	e7d3      	b.n	8003018 <SD_FindSCR.constprop.0+0x70>
 8003070:	18000f3a 	.word	0x18000f3a

08003074 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003074:	6e02      	ldr	r2, [r0, #96]	@ 0x60
{
 8003076:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003078:	0f90      	lsrs	r0, r2, #30
{
 800307a:	b510      	push	{r4, lr}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800307c:	7008      	strb	r0, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800307e:	f3c2 6083 	ubfx	r0, r2, #26, #4
 8003082:	7048      	strb	r0, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003084:	f3c2 6001 	ubfx	r0, r2, #24, #2
 8003088:	7088      	strb	r0, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800308a:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800308e:	70c8      	strb	r0, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003090:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003094:	b2d2      	uxtb	r2, r2
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003096:	7108      	strb	r0, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003098:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800309a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800309c:	0d10      	lsrs	r0, r2, #20
 800309e:	80c8      	strh	r0, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80030a0:	f3c2 4003 	ubfx	r0, r2, #16, #4
 80030a4:	7208      	strb	r0, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80030a6:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 80030aa:	7248      	strb	r0, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80030ac:	f3c2 3080 	ubfx	r0, r2, #14, #1
 80030b0:	7288      	strb	r0, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80030b2:	f3c2 3040 	ubfx	r0, r2, #13, #1
 80030b6:	72c8      	strb	r0, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80030b8:	f3c2 3000 	ubfx	r0, r2, #12, #1
 80030bc:	7308      	strb	r0, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80030be:	2000      	movs	r0, #0
 80030c0:	7348      	strb	r0, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 80030c2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80030c4:	2800      	cmp	r0, #0
 80030c6:	d16b      	bne.n	80031a0 <HAL_SD_GetCardCSD+0x12c>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80030c8:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80030ca:	f640 74fc 	movw	r4, #4092	@ 0xffc
 80030ce:	ea04 0282 	and.w	r2, r4, r2, lsl #2
 80030d2:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 80030d6:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80030d8:	f3c0 62c2 	ubfx	r2, r0, #27, #3
 80030dc:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80030de:	f3c0 6202 	ubfx	r2, r0, #24, #3
 80030e2:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80030e4:	f3c0 5242 	ubfx	r2, r0, #21, #3
 80030e8:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80030ea:	f3c0 4282 	ubfx	r2, r0, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80030ee:	f3c0 30c2 	ubfx	r0, r0, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80030f2:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80030f4:	7608      	strb	r0, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80030f6:	6908      	ldr	r0, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80030f8:	7e0a      	ldrb	r2, [r1, #24]
 80030fa:	f002 0207 	and.w	r2, r2, #7
 80030fe:	3202      	adds	r2, #2
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003100:	3001      	adds	r0, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003102:	4090      	lsls	r0, r2
 8003104:	64d8      	str	r0, [r3, #76]	@ 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003106:	7a0c      	ldrb	r4, [r1, #8]
 8003108:	2201      	movs	r2, #1
 800310a:	f004 040f 	and.w	r4, r4, #15
 800310e:	40a2      	lsls	r2, r4
 8003110:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003112:	0a52      	lsrs	r2, r2, #9
 8003114:	4342      	muls	r2, r0
 8003116:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8003118:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800311c:	659a      	str	r2, [r3, #88]	@ 0x58
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800311e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003120:	f3c2 3080 	ubfx	r0, r2, #14, #1
 8003124:	7648      	strb	r0, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003126:	f3c2 10c6 	ubfx	r0, r2, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800312a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800312e:	7688      	strb	r0, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003130:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003132:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003134:	0fda      	lsrs	r2, r3, #31
 8003136:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003138:	f3c3 7241 	ubfx	r2, r3, #29, #2
 800313c:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800313e:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8003142:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003144:	f3c3 5283 	ubfx	r2, r3, #22, #4
 8003148:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800314a:	f3c3 5240 	ubfx	r2, r3, #21, #1
 800314e:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 8003152:	2000      	movs	r0, #0
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003154:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 8003158:	f881 0021 	strb.w	r0, [r1, #33]	@ 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800315c:	f881 2022 	strb.w	r2, [r1, #34]	@ 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003160:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8003164:	f881 2023 	strb.w	r2, [r1, #35]	@ 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003168:	f3c3 3280 	ubfx	r2, r3, #14, #1
 800316c:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003170:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8003174:	f881 2025 	strb.w	r2, [r1, #37]	@ 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003178:	f3c3 3200 	ubfx	r2, r3, #12, #1
 800317c:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003180:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8003184:	f881 2027 	strb.w	r2, [r1, #39]	@ 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003188:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800318c:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003190:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003194:	f881 3029 	strb.w	r3, [r1, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 8003198:	2301      	movs	r3, #1
 800319a:	f881 302a 	strb.w	r3, [r1, #42]	@ 0x2a
  return HAL_OK;
 800319e:	e01b      	b.n	80031d8 <HAL_SD_GetCardCSD+0x164>
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80031a0:	2801      	cmp	r0, #1
 80031a2:	d10f      	bne.n	80031c4 <HAL_SD_GetCardCSD+0x150>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80031a4:	f8b3 006a 	ldrh.w	r0, [r3, #106]	@ 0x6a
 80031a8:	0412      	lsls	r2, r2, #16
 80031aa:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 80031ae:	4302      	orrs	r2, r0
 80031b0:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80031b2:	690a      	ldr	r2, [r1, #16]
 80031b4:	3201      	adds	r2, #1
 80031b6:	0292      	lsls	r2, r2, #10
 80031b8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80031ba:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = 512U;
 80031bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031c0:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80031c2:	e7a9      	b.n	8003118 <HAL_SD_GetCardCSD+0xa4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	4905      	ldr	r1, [pc, #20]	@ (80031dc <HAL_SD_GetCardCSD+0x168>)
 80031c8:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80031ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80031cc:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80031ce:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80031d2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80031d4:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
}
 80031d8:	bd10      	pop	{r4, pc}
 80031da:	bf00      	nop
 80031dc:	1fe00fff 	.word	0x1fe00fff

080031e0 <HAL_SD_InitCard>:
{
 80031e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80031e4:	2300      	movs	r3, #0
{
 80031e6:	b099      	sub	sp, #100	@ 0x64
 80031e8:	4604      	mov	r4, r0
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80031ea:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80031ee:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80031f2:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80031f6:	f7ff fb93 	bl	8002920 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 80031fa:	4605      	mov	r5, r0
 80031fc:	b950      	cbnz	r0, 8003214 <HAL_SD_InitCard+0x34>
      hsd->State = HAL_SD_STATE_READY;
 80031fe:	2301      	movs	r3, #1
 8003200:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8003204:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
    hsd->ErrorCode |= errorstate;
 8003208:	63a3      	str	r3, [r4, #56]	@ 0x38
      return HAL_ERROR;
 800320a:	2501      	movs	r5, #1
}
 800320c:	4628      	mov	r0, r5
 800320e:	b019      	add	sp, #100	@ 0x64
 8003210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  Init.Transceiver = hsd->Init.Transceiver;
 8003214:	69a3      	ldr	r3, [r4, #24]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8003216:	6827      	ldr	r7, [r4, #0]
  Init.Transceiver = hsd->Init.Transceiver;
 8003218:	930c      	str	r3, [sp, #48]	@ 0x30
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800321a:	2b01      	cmp	r3, #1
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800321c:	bf08      	it	eq
 800321e:	683b      	ldreq	r3, [r7, #0]
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8003220:	4e98      	ldr	r6, [pc, #608]	@ (8003484 <HAL_SD_InitCard+0x2a4>)
 8003222:	fbb0 f6f6 	udiv	r6, r0, r6
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8003226:	bf04      	itt	eq
 8003228:	f043 0310 	orreq.w	r3, r3, #16
 800322c:	603b      	streq	r3, [r7, #0]
  (void)SDMMC_Init(hsd->Instance, Init);
 800322e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8003230:	ab0a      	add	r3, sp, #40	@ 0x28
 8003232:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003236:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800323a:	ab07      	add	r3, sp, #28
 800323c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800323e:	4638      	mov	r0, r7
 8003240:	f000 fff0 	bl	8004224 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8003244:	6820      	ldr	r0, [r4, #0]
 8003246:	f001 f80a 	bl	800425e <SDMMC_PowerState_ON>
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800324a:	0076      	lsls	r6, r6, #1
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800324c:	488e      	ldr	r0, [pc, #568]	@ (8003488 <HAL_SD_InitCard+0x2a8>)
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800324e:	fbb5 f5f6 	udiv	r5, r5, r6
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8003252:	fbb0 f0f5 	udiv	r0, r0, r5
 8003256:	3001      	adds	r0, #1
 8003258:	f7fe f84e 	bl	80012f8 <HAL_Delay>
  __IO uint32_t count = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	9306      	str	r3, [sp, #24]
  uint32_t tickstart = HAL_GetTick();
 8003260:	f7fe f844 	bl	80012ec <HAL_GetTick>
 8003264:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003266:	6820      	ldr	r0, [r4, #0]
 8003268:	f001 f832 	bl	80042d0 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800326c:	4605      	mov	r5, r0
 800326e:	b940      	cbnz	r0, 8003282 <HAL_SD_InitCard+0xa2>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003270:	6820      	ldr	r0, [r4, #0]
 8003272:	f001 fad1 	bl	8004818 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003276:	b150      	cbz	r0, 800328e <HAL_SD_InitCard+0xae>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003278:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 800327a:	6425      	str	r5, [r4, #64]	@ 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800327c:	f001 f828 	bl	80042d0 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003280:	b178      	cbz	r0, 80032a2 <HAL_SD_InitCard+0xc2>
    hsd->State = HAL_SD_STATE_READY;
 8003282:	2301      	movs	r3, #1
 8003284:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8003288:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800328a:	4303      	orrs	r3, r0
 800328c:	e7bc      	b.n	8003208 <HAL_SD_InitCard+0x28>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800328e:	2301      	movs	r3, #1
 8003290:	6423      	str	r3, [r4, #64]	@ 0x40
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003292:	6820      	ldr	r0, [r4, #0]
 8003294:	2100      	movs	r1, #0
 8003296:	f001 f90b 	bl	80044b0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800329a:	b128      	cbz	r0, 80032a8 <HAL_SD_InitCard+0xc8>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800329c:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80032a0:	e7ef      	b.n	8003282 <HAL_SD_InitCard+0xa2>
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80032a2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d0f4      	beq.n	8003292 <HAL_SD_InitCard+0xb2>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80032a8:	f8df 91e4 	ldr.w	r9, [pc, #484]	@ 8003490 <HAL_SD_InitCard+0x2b0>
{
 80032ac:	2700      	movs	r7, #0
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80032ae:	f64f 78fe 	movw	r8, #65534	@ 0xfffe
 80032b2:	e014      	b.n	80032de <HAL_SD_InitCard+0xfe>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80032b4:	6820      	ldr	r0, [r4, #0]
 80032b6:	4639      	mov	r1, r7
 80032b8:	f001 f8fa 	bl	80044b0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80032bc:	2800      	cmp	r0, #0
 80032be:	d1e0      	bne.n	8003282 <HAL_SD_InitCard+0xa2>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80032c0:	6820      	ldr	r0, [r4, #0]
 80032c2:	4649      	mov	r1, r9
 80032c4:	f001 fa0a 	bl	80046dc <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80032c8:	2800      	cmp	r0, #0
 80032ca:	d1e7      	bne.n	800329c <HAL_SD_InitCard+0xbc>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80032cc:	4639      	mov	r1, r7
 80032ce:	6820      	ldr	r0, [r4, #0]
 80032d0:	f000 ffe8 	bl	80042a4 <SDMMC_GetResponse>
    count++;
 80032d4:	9b06      	ldr	r3, [sp, #24]
 80032d6:	3301      	adds	r3, #1
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80032d8:	4605      	mov	r5, r0
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80032da:	0fc7      	lsrs	r7, r0, #31
    count++;
 80032dc:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80032de:	9b06      	ldr	r3, [sp, #24]
 80032e0:	4543      	cmp	r3, r8
 80032e2:	d801      	bhi.n	80032e8 <HAL_SD_InitCard+0x108>
 80032e4:	2f00      	cmp	r7, #0
 80032e6:	d0e5      	beq.n	80032b4 <HAL_SD_InitCard+0xd4>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80032e8:	9b06      	ldr	r3, [sp, #24]
 80032ea:	4543      	cmp	r3, r8
 80032ec:	d902      	bls.n	80032f4 <HAL_SD_InitCard+0x114>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80032ee:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 80032f2:	e7c6      	b.n	8003282 <HAL_SD_InitCard+0xa2>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80032f4:	f015 4380 	ands.w	r3, r5, #1073741824	@ 0x40000000
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80032f8:	6820      	ldr	r0, [r4, #0]
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80032fa:	d04f      	beq.n	800339c <HAL_SD_InitCard+0x1bc>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80032fc:	2301      	movs	r3, #1
 80032fe:	63e3      	str	r3, [r4, #60]	@ 0x3c
    if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8003300:	69a3      	ldr	r3, [r4, #24]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d12d      	bne.n	8003362 <HAL_SD_InitCard+0x182>
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8003306:	01ef      	lsls	r7, r5, #7
 8003308:	d52b      	bpl.n	8003362 <HAL_SD_InitCard+0x182>
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800330a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800330e:	65e3      	str	r3, [r4, #92]	@ 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8003310:	6803      	ldr	r3, [r0, #0]
 8003312:	f043 0308 	orr.w	r3, r3, #8
 8003316:	6003      	str	r3, [r0, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8003318:	f001 f94c 	bl	80045b4 <SDMMC_CmdVoltageSwitch>
        if(errorstate != HAL_SD_ERROR_NONE)
 800331c:	2800      	cmp	r0, #0
 800331e:	d1b0      	bne.n	8003282 <HAL_SD_InitCard+0xa2>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8003320:	6823      	ldr	r3, [r4, #0]
 8003322:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003324:	0155      	lsls	r5, r2, #5
 8003326:	d52b      	bpl.n	8003380 <HAL_SD_InitCard+0x1a0>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8003328:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800332c:	639a      	str	r2, [r3, #56]	@ 0x38
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800332e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003330:	02d8      	lsls	r0, r3, #11
 8003332:	d5b3      	bpl.n	800329c <HAL_SD_InitCard+0xbc>
          HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8003334:	2001      	movs	r0, #1
 8003336:	f000 fa91 	bl	800385c <HAL_SDEx_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800333a:	6822      	ldr	r2, [r4, #0]
 800333c:	6813      	ldr	r3, [r2, #0]
 800333e:	f043 0304 	orr.w	r3, r3, #4
 8003342:	6013      	str	r3, [r2, #0]
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8003344:	6823      	ldr	r3, [r4, #0]
 8003346:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003348:	0191      	lsls	r1, r2, #6
 800334a:	d521      	bpl.n	8003390 <HAL_SD_InitCard+0x1b0>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800334c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003350:	639a      	str	r2, [r3, #56]	@ 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8003352:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003354:	02d2      	lsls	r2, r2, #11
 8003356:	d4ca      	bmi.n	80032ee <HAL_SD_InitCard+0x10e>
          hsd->Instance->POWER = 0x13U;
 8003358:	2213      	movs	r2, #19
 800335a:	601a      	str	r2, [r3, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800335c:	f04f 32ff 	mov.w	r2, #4294967295
 8003360:	639a      	str	r2, [r3, #56]	@ 0x38
  uint16_t sd_rca = 1U;
 8003362:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8003364:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 8003366:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800336a:	f000 ff82 	bl	8004272 <SDMMC_GetPowerState>
 800336e:	b9b8      	cbnz	r0, 80033a0 <HAL_SD_InitCard+0x1c0>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003370:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 8003374:	2301      	movs	r3, #1
 8003376:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800337a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800337c:	430b      	orrs	r3, r1
 800337e:	e743      	b.n	8003208 <HAL_SD_InitCard+0x28>
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003380:	f7fd ffb4 	bl	80012ec <HAL_GetTick>
 8003384:	1b80      	subs	r0, r0, r6
 8003386:	3001      	adds	r0, #1
 8003388:	d1ca      	bne.n	8003320 <HAL_SD_InitCard+0x140>
            return HAL_SD_ERROR_TIMEOUT;
 800338a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800338e:	e778      	b.n	8003282 <HAL_SD_InitCard+0xa2>
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003390:	f7fd ffac 	bl	80012ec <HAL_GetTick>
 8003394:	1b80      	subs	r0, r0, r6
 8003396:	3001      	adds	r0, #1
 8003398:	d1d4      	bne.n	8003344 <HAL_SD_InitCard+0x164>
 800339a:	e7f6      	b.n	800338a <HAL_SD_InitCard+0x1aa>
    hsd->SdCard.CardType = CARD_SDSC;
 800339c:	63e3      	str	r3, [r4, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800339e:	e7e0      	b.n	8003362 <HAL_SD_InitCard+0x182>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80033a0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80033a2:	6820      	ldr	r0, [r4, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 80033a4:	2b03      	cmp	r3, #3
 80033a6:	d042      	beq.n	800342e <HAL_SD_InitCard+0x24e>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80033a8:	f001 f946 	bl	8004638 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 80033ac:	4601      	mov	r1, r0
 80033ae:	2800      	cmp	r0, #0
 80033b0:	d1e0      	bne.n	8003374 <HAL_SD_InitCard+0x194>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80033b2:	6820      	ldr	r0, [r4, #0]
 80033b4:	f000 ff76 	bl	80042a4 <SDMMC_GetResponse>
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80033b8:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80033ba:	6720      	str	r0, [r4, #112]	@ 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80033bc:	6820      	ldr	r0, [r4, #0]
 80033be:	f000 ff71 	bl	80042a4 <SDMMC_GetResponse>
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80033c2:	2108      	movs	r1, #8
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80033c4:	6760      	str	r0, [r4, #116]	@ 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80033c6:	6820      	ldr	r0, [r4, #0]
 80033c8:	f000 ff6c 	bl	80042a4 <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80033cc:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80033ce:	67a0      	str	r0, [r4, #120]	@ 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80033d0:	6820      	ldr	r0, [r4, #0]
 80033d2:	f000 ff67 	bl	80042a4 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80033d6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80033d8:	67e0      	str	r0, [r4, #124]	@ 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED)
 80033da:	2b03      	cmp	r3, #3
 80033dc:	d027      	beq.n	800342e <HAL_SD_InitCard+0x24e>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80033de:	f10d 0116 	add.w	r1, sp, #22
 80033e2:	6820      	ldr	r0, [r4, #0]
 80033e4:	f001 f9d4 	bl	8004790 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80033e8:	4601      	mov	r1, r0
 80033ea:	2800      	cmp	r0, #0
 80033ec:	d1c2      	bne.n	8003374 <HAL_SD_InitCard+0x194>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80033ee:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80033f0:	6820      	ldr	r0, [r4, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 80033f2:	2b03      	cmp	r3, #3
 80033f4:	d01b      	beq.n	800342e <HAL_SD_InitCard+0x24e>
    hsd->SdCard.RelCardAdd = sd_rca;
 80033f6:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80033fa:	64a1      	str	r1, [r4, #72]	@ 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80033fc:	0409      	lsls	r1, r1, #16
 80033fe:	f001 f932 	bl	8004666 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003402:	4601      	mov	r1, r0
 8003404:	2800      	cmp	r0, #0
 8003406:	d1b5      	bne.n	8003374 <HAL_SD_InitCard+0x194>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003408:	6820      	ldr	r0, [r4, #0]
 800340a:	f000 ff4b 	bl	80042a4 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800340e:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003410:	6620      	str	r0, [r4, #96]	@ 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003412:	6820      	ldr	r0, [r4, #0]
 8003414:	f000 ff46 	bl	80042a4 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003418:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800341a:	6660      	str	r0, [r4, #100]	@ 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800341c:	6820      	ldr	r0, [r4, #0]
 800341e:	f000 ff41 	bl	80042a4 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003422:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003424:	66a0      	str	r0, [r4, #104]	@ 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003426:	6820      	ldr	r0, [r4, #0]
 8003428:	f000 ff3c 	bl	80042a4 <SDMMC_GetResponse>
 800342c:	66e0      	str	r0, [r4, #108]	@ 0x6c
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800342e:	2104      	movs	r1, #4
 8003430:	6820      	ldr	r0, [r4, #0]
 8003432:	f000 ff37 	bl	80042a4 <SDMMC_GetResponse>
 8003436:	0d00      	lsrs	r0, r0, #20
 8003438:	6460      	str	r0, [r4, #68]	@ 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800343a:	a90d      	add	r1, sp, #52	@ 0x34
 800343c:	4620      	mov	r0, r4
 800343e:	f7ff fe19 	bl	8003074 <HAL_SD_GetCardCSD>
 8003442:	4605      	mov	r5, r0
 8003444:	b110      	cbz	r0, 800344c <HAL_SD_InitCard+0x26c>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003446:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800344a:	e793      	b.n	8003374 <HAL_SD_InitCard+0x194>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800344c:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800344e:	4603      	mov	r3, r0
 8003450:	0412      	lsls	r2, r2, #16
 8003452:	6820      	ldr	r0, [r4, #0]
 8003454:	f001 f812 	bl	800447c <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003458:	4601      	mov	r1, r0
 800345a:	2800      	cmp	r0, #0
 800345c:	d18a      	bne.n	8003374 <HAL_SD_InitCard+0x194>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800345e:	6820      	ldr	r0, [r4, #0]
 8003460:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003464:	f000 fff0 	bl	8004448 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003468:	2800      	cmp	r0, #0
 800346a:	f43f aecf 	beq.w	800320c <HAL_SD_InitCard+0x2c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800346e:	6823      	ldr	r3, [r4, #0]
 8003470:	4a06      	ldr	r2, [pc, #24]	@ (800348c <HAL_SD_InitCard+0x2ac>)
 8003472:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003474:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003476:	4303      	orrs	r3, r0
 8003478:	63a3      	str	r3, [r4, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800347a:	2301      	movs	r3, #1
 800347c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8003480:	e6c3      	b.n	800320a <HAL_SD_InitCard+0x2a>
 8003482:	bf00      	nop
 8003484:	000c3500 	.word	0x000c3500
 8003488:	00012110 	.word	0x00012110
 800348c:	1fe00fff 	.word	0x1fe00fff
 8003490:	c1100000 	.word	0xc1100000

08003494 <HAL_SD_GetCardStatus>:
{
 8003494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003498:	b096      	sub	sp, #88	@ 0x58
 800349a:	4604      	mov	r4, r0
 800349c:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800349e:	f7fd ff25 	bl	80012ec <HAL_GetTick>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80034a2:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 80034a4:	4606      	mov	r6, r0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80034a6:	6820      	ldr	r0, [r4, #0]
 80034a8:	f000 fefc 	bl	80042a4 <SDMMC_GetResponse>
 80034ac:	0183      	lsls	r3, r0, #6
 80034ae:	f100 80a5 	bmi.w	80035fc <HAL_SD_GetCardStatus+0x168>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80034b2:	6820      	ldr	r0, [r4, #0]
 80034b4:	2140      	movs	r1, #64	@ 0x40
 80034b6:	f000 ffc7 	bl	8004448 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80034ba:	b158      	cbz	r0, 80034d4 <HAL_SD_GetCardStatus+0x40>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80034bc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80034be:	63a3      	str	r3, [r4, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80034c0:	6823      	ldr	r3, [r4, #0]
 80034c2:	4a52      	ldr	r2, [pc, #328]	@ (800360c <HAL_SD_GetCardStatus+0x178>)
 80034c4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80034c6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80034c8:	2501      	movs	r5, #1
    hsd->ErrorCode |= errorstate;
 80034ca:	4303      	orrs	r3, r0
 80034cc:	63a3      	str	r3, [r4, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80034ce:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
    status = HAL_ERROR;
 80034d2:	e082      	b.n	80035da <HAL_SD_GetCardStatus+0x146>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80034d4:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80034d6:	6820      	ldr	r0, [r4, #0]
 80034d8:	0409      	lsls	r1, r1, #16
 80034da:	f000 ffe9 	bl	80044b0 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 80034de:	2800      	cmp	r0, #0
 80034e0:	d1ec      	bne.n	80034bc <HAL_SD_GetCardStatus+0x28>
  config.DataLength    = 64U;
 80034e2:	2340      	movs	r3, #64	@ 0x40
 80034e4:	f04f 37ff 	mov.w	r7, #4294967295
 80034e8:	e9cd 7300 	strd	r7, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80034ec:	f04f 0c60 	mov.w	ip, #96	@ 0x60
 80034f0:	2302      	movs	r3, #2
 80034f2:	e9cd c302 	strd	ip, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80034f6:	9004      	str	r0, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80034f8:	2301      	movs	r3, #1
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80034fa:	6820      	ldr	r0, [r4, #0]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80034fc:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80034fe:	4669      	mov	r1, sp
 8003500:	f000 fed3 	bl	80042aa <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8003504:	6820      	ldr	r0, [r4, #0]
 8003506:	f001 f83b 	bl	8004580 <SDMMC_CmdStatusRegister>
  if(errorstate != HAL_SD_ERROR_NONE)
 800350a:	2800      	cmp	r0, #0
 800350c:	d1d6      	bne.n	80034bc <HAL_SD_GetCardStatus+0x28>
  uint32_t *pData = pSDstatus;
 800350e:	af06      	add	r7, sp, #24
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003510:	6823      	ldr	r3, [r4, #0]
 8003512:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003514:	f412 7f95 	tst.w	r2, #298	@ 0x12a
 8003518:	d00a      	beq.n	8003530 <HAL_SD_GetCardStatus+0x9c>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800351a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800351c:	0711      	lsls	r1, r2, #28
 800351e:	d470      	bmi.n	8003602 <HAL_SD_GetCardStatus+0x16e>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003520:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003522:	0792      	lsls	r2, r2, #30
 8003524:	d46f      	bmi.n	8003606 <HAL_SD_GetCardStatus+0x172>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8003526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003528:	069b      	lsls	r3, r3, #26
 800352a:	d51e      	bpl.n	800356a <HAL_SD_GetCardStatus+0xd6>
    return HAL_SD_ERROR_RX_OVERRUN;
 800352c:	2020      	movs	r0, #32
 800352e:	e7c7      	b.n	80034c0 <HAL_SD_GetCardStatus+0x2c>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8003530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003532:	0418      	lsls	r0, r3, #16
 8003534:	d508      	bpl.n	8003548 <HAL_SD_GetCardStatus+0xb4>
 8003536:	f107 0820 	add.w	r8, r7, #32
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800353a:	6820      	ldr	r0, [r4, #0]
 800353c:	f000 fe8c 	bl	8004258 <SDMMC_ReadFIFO>
 8003540:	f847 0b04 	str.w	r0, [r7], #4
      for(count = 0U; count < 8U; count++)
 8003544:	4547      	cmp	r7, r8
 8003546:	d1f8      	bne.n	800353a <HAL_SD_GetCardStatus+0xa6>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003548:	f7fd fed0 	bl	80012ec <HAL_GetTick>
 800354c:	1b80      	subs	r0, r0, r6
 800354e:	3001      	adds	r0, #1
 8003550:	d1de      	bne.n	8003510 <HAL_SD_GetCardStatus+0x7c>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003552:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8003556:	e7b3      	b.n	80034c0 <HAL_SD_GetCardStatus+0x2c>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8003558:	f000 fe7e 	bl	8004258 <SDMMC_ReadFIFO>
 800355c:	f847 0b04 	str.w	r0, [r7], #4
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003560:	f7fd fec4 	bl	80012ec <HAL_GetTick>
 8003564:	1b80      	subs	r0, r0, r6
 8003566:	3001      	adds	r0, #1
 8003568:	d0f3      	beq.n	8003552 <HAL_SD_GetCardStatus+0xbe>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800356a:	6820      	ldr	r0, [r4, #0]
 800356c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800356e:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 8003572:	d1f1      	bne.n	8003558 <HAL_SD_GetCardStatus+0xc4>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8003574:	9906      	ldr	r1, [sp, #24]
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003576:	4a26      	ldr	r2, [pc, #152]	@ (8003610 <HAL_SD_GetCardStatus+0x17c>)
 8003578:	6382      	str	r2, [r0, #56]	@ 0x38
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800357a:	f3c1 1281 	ubfx	r2, r1, #6, #2
 800357e:	702a      	strb	r2, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8003580:	f3c1 1240 	ubfx	r2, r1, #5, #1
 8003584:	706a      	strb	r2, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8003586:	0a0a      	lsrs	r2, r1, #8
 8003588:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800358c:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
 8003590:	b292      	uxth	r2, r2
 8003592:	806a      	strh	r2, [r5, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8003594:	9a07      	ldr	r2, [sp, #28]
 8003596:	ba12      	rev	r2, r2
 8003598:	606a      	str	r2, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800359a:	9a08      	ldr	r2, [sp, #32]
 800359c:	b2d1      	uxtb	r1, r2
 800359e:	7229      	strb	r1, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80035a0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80035a4:	7269      	strb	r1, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80035a6:	f3c2 5103 	ubfx	r1, r2, #20, #4
 80035aa:	72a9      	strb	r1, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80035ac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80035ae:	0c12      	lsrs	r2, r2, #16
 80035b0:	b2c8      	uxtb	r0, r1
 80035b2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80035b6:	4302      	orrs	r2, r0
 80035b8:	81aa      	strh	r2, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80035ba:	f3c1 2285 	ubfx	r2, r1, #10, #6
 80035be:	73aa      	strb	r2, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80035c0:	f3c1 2201 	ubfx	r2, r1, #8, #2
 80035c4:	73ea      	strb	r2, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80035c6:	f3c1 1203 	ubfx	r2, r1, #4, #4
 80035ca:	742a      	strb	r2, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80035cc:	f001 010f 	and.w	r1, r1, #15
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80035d0:	f89d 202b 	ldrb.w	r2, [sp, #43]	@ 0x2b
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80035d4:	7469      	strb	r1, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80035d6:	74aa      	strb	r2, [r5, #18]
  HAL_StatusTypeDef status = HAL_OK;
 80035d8:	461d      	mov	r5, r3
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80035da:	6820      	ldr	r0, [r4, #0]
 80035dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80035e0:	f000 ff32 	bl	8004448 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 80035e4:	b130      	cbz	r0, 80035f4 <HAL_SD_GetCardStatus+0x160>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80035e6:	6823      	ldr	r3, [r4, #0]
 80035e8:	4a08      	ldr	r2, [pc, #32]	@ (800360c <HAL_SD_GetCardStatus+0x178>)
 80035ea:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80035ec:	2501      	movs	r5, #1
    hsd->ErrorCode = errorstate;
 80035ee:	63a0      	str	r0, [r4, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80035f0:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
}
 80035f4:	4628      	mov	r0, r5
 80035f6:	b016      	add	sp, #88	@ 0x58
 80035f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80035fc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003600:	e75e      	b.n	80034c0 <HAL_SD_GetCardStatus+0x2c>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003602:	2008      	movs	r0, #8
 8003604:	e75c      	b.n	80034c0 <HAL_SD_GetCardStatus+0x2c>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003606:	2002      	movs	r0, #2
 8003608:	e75a      	b.n	80034c0 <HAL_SD_GetCardStatus+0x2c>
 800360a:	bf00      	nop
 800360c:	1fe00fff 	.word	0x1fe00fff
 8003610:	18000f3a 	.word	0x18000f3a

08003614 <HAL_SD_ConfigWideBusOperation>:
{
 8003614:	b530      	push	{r4, r5, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 8003616:	2303      	movs	r3, #3
{
 8003618:	b08b      	sub	sp, #44	@ 0x2c
  hsd->State = HAL_SD_STATE_BUSY;
 800361a:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 800361e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8003620:	2b03      	cmp	r3, #3
{
 8003622:	4604      	mov	r4, r0
 8003624:	460d      	mov	r5, r1
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003626:	d002      	beq.n	800362e <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8003628:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 800362c:	d103      	bne.n	8003636 <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800362e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003630:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003634:	e01e      	b.n	8003674 <HAL_SD_ConfigWideBusOperation+0x60>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8003636:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 800363a:	d123      	bne.n	8003684 <HAL_SD_ConfigWideBusOperation+0x70>
  uint32_t scr[2U] = {0UL, 0UL};
 800363c:	2100      	movs	r1, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800363e:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 8003640:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003644:	f000 fe2e 	bl	80042a4 <SDMMC_GetResponse>
 8003648:	0180      	lsls	r0, r0, #6
 800364a:	d435      	bmi.n	80036b8 <HAL_SD_ConfigWideBusOperation+0xa4>
  errorstate = SD_FindSCR(hsd, scr);
 800364c:	a904      	add	r1, sp, #16
 800364e:	4620      	mov	r0, r4
 8003650:	f7ff fcaa 	bl	8002fa8 <SD_FindSCR.constprop.0>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003654:	b960      	cbnz	r0, 8003670 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003656:	9b05      	ldr	r3, [sp, #20]
 8003658:	0359      	lsls	r1, r3, #13
 800365a:	d530      	bpl.n	80036be <HAL_SD_ConfigWideBusOperation+0xaa>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800365c:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800365e:	6820      	ldr	r0, [r4, #0]
 8003660:	0409      	lsls	r1, r1, #16
 8003662:	f000 ff25 	bl	80044b0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003666:	b918      	cbnz	r0, 8003670 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003668:	2102      	movs	r1, #2
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800366a:	6820      	ldr	r0, [r4, #0]
 800366c:	f000 ff3a 	bl	80044e4 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8003670:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003672:	4303      	orrs	r3, r0
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003674:	63a3      	str	r3, [r4, #56]	@ 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003676:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003678:	b343      	cbz	r3, 80036cc <HAL_SD_ConfigWideBusOperation+0xb8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800367a:	6823      	ldr	r3, [r4, #0]
 800367c:	4a3e      	ldr	r2, [pc, #248]	@ (8003778 <HAL_SD_ConfigWideBusOperation+0x164>)
 800367e:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8003680:	2501      	movs	r5, #1
 8003682:	e051      	b.n	8003728 <HAL_SD_ConfigWideBusOperation+0x114>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8003684:	b9f1      	cbnz	r1, 80036c4 <HAL_SD_ConfigWideBusOperation+0xb0>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003686:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 8003688:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800368c:	f000 fe0a 	bl	80042a4 <SDMMC_GetResponse>
 8003690:	0182      	lsls	r2, r0, #6
 8003692:	d411      	bmi.n	80036b8 <HAL_SD_ConfigWideBusOperation+0xa4>
  errorstate = SD_FindSCR(hsd, scr);
 8003694:	a904      	add	r1, sp, #16
 8003696:	4620      	mov	r0, r4
 8003698:	f7ff fc86 	bl	8002fa8 <SD_FindSCR.constprop.0>
  if(errorstate != HAL_SD_ERROR_NONE)
 800369c:	2800      	cmp	r0, #0
 800369e:	d1e7      	bne.n	8003670 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80036a0:	9b05      	ldr	r3, [sp, #20]
 80036a2:	03db      	lsls	r3, r3, #15
 80036a4:	d50b      	bpl.n	80036be <HAL_SD_ConfigWideBusOperation+0xaa>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80036a6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80036a8:	6820      	ldr	r0, [r4, #0]
 80036aa:	0409      	lsls	r1, r1, #16
 80036ac:	f000 ff00 	bl	80044b0 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80036b0:	2800      	cmp	r0, #0
 80036b2:	d1dd      	bne.n	8003670 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80036b4:	4601      	mov	r1, r0
 80036b6:	e7d8      	b.n	800366a <HAL_SD_ConfigWideBusOperation+0x56>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80036b8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80036bc:	e7d8      	b.n	8003670 <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80036be:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80036c2:	e7d5      	b.n	8003670 <HAL_SD_ConfigWideBusOperation+0x5c>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80036c4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80036c6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80036ca:	e7d3      	b.n	8003674 <HAL_SD_ConfigWideBusOperation+0x60>
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80036cc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80036d0:	f7ff f926 	bl	8002920 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 80036d4:	2800      	cmp	r0, #0
 80036d6:	d049      	beq.n	800376c <HAL_SD_ConfigWideBusOperation+0x158>
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80036d8:	6863      	ldr	r3, [r4, #4]
 80036da:	9304      	str	r3, [sp, #16]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80036dc:	68a3      	ldr	r3, [r4, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80036de:	4927      	ldr	r1, [pc, #156]	@ (800377c <HAL_SD_ConfigWideBusOperation+0x168>)
 80036e0:	fbb0 f2f1 	udiv	r2, r0, r1
      Init.BusWide             = WideMode;
 80036e4:	e9cd 3505 	strd	r3, r5, [sp, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80036e8:	6923      	ldr	r3, [r4, #16]
 80036ea:	9307      	str	r3, [sp, #28]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80036ec:	6963      	ldr	r3, [r4, #20]
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d20c      	bcs.n	800370c <HAL_SD_ConfigWideBusOperation+0xf8>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80036f2:	6de5      	ldr	r5, [r4, #92]	@ 0x5c
 80036f4:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 80036f8:	d008      	beq.n	800370c <HAL_SD_ConfigWideBusOperation+0xf8>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80036fa:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80036fe:	d12b      	bne.n	8003758 <HAL_SD_ConfigWideBusOperation+0x144>
        if (hsd->Init.ClockDiv == 0U)
 8003700:	bb2b      	cbnz	r3, 800374e <HAL_SD_ConfigWideBusOperation+0x13a>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8003702:	4288      	cmp	r0, r1
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8003704:	d902      	bls.n	800370c <HAL_SD_ConfigWideBusOperation+0xf8>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8003706:	4b1e      	ldr	r3, [pc, #120]	@ (8003780 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8003708:	fbb0 f3f3 	udiv	r3, r0, r3
        Init.ClockDiv = hsd->Init.ClockDiv;
 800370c:	9308      	str	r3, [sp, #32]
      Init.Transceiver = hsd->Init.Transceiver;
 800370e:	69a3      	ldr	r3, [r4, #24]
 8003710:	9309      	str	r3, [sp, #36]	@ 0x24
      (void)SDMMC_Init(hsd->Instance, Init);
 8003712:	ab0a      	add	r3, sp, #40	@ 0x28
 8003714:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8003718:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800371c:	ab04      	add	r3, sp, #16
 800371e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003720:	6820      	ldr	r0, [r4, #0]
 8003722:	f000 fd7f 	bl	8004224 <SDMMC_Init>
  HAL_StatusTypeDef status = HAL_OK;
 8003726:	2500      	movs	r5, #0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003728:	6820      	ldr	r0, [r4, #0]
 800372a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800372e:	f000 fe8b 	bl	8004448 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003732:	b130      	cbz	r0, 8003742 <HAL_SD_ConfigWideBusOperation+0x12e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003734:	6823      	ldr	r3, [r4, #0]
 8003736:	4a10      	ldr	r2, [pc, #64]	@ (8003778 <HAL_SD_ConfigWideBusOperation+0x164>)
 8003738:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800373a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800373c:	4303      	orrs	r3, r0
 800373e:	63a3      	str	r3, [r4, #56]	@ 0x38
    status = HAL_ERROR;
 8003740:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 8003742:	2301      	movs	r3, #1
}
 8003744:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8003746:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 800374a:	b00b      	add	sp, #44	@ 0x2c
 800374c:	bd30      	pop	{r4, r5, pc}
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800374e:	005a      	lsls	r2, r3, #1
 8003750:	fbb0 f2f2 	udiv	r2, r0, r2
 8003754:	428a      	cmp	r2, r1
 8003756:	e7d5      	b.n	8003704 <HAL_SD_ConfigWideBusOperation+0xf0>
        if (hsd->Init.ClockDiv == 0U)
 8003758:	490a      	ldr	r1, [pc, #40]	@ (8003784 <HAL_SD_ConfigWideBusOperation+0x170>)
 800375a:	b91b      	cbnz	r3, 8003764 <HAL_SD_ConfigWideBusOperation+0x150>
 800375c:	4288      	cmp	r0, r1
 800375e:	bf88      	it	hi
 8003760:	4613      	movhi	r3, r2
 8003762:	e7d3      	b.n	800370c <HAL_SD_ConfigWideBusOperation+0xf8>
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8003764:	005d      	lsls	r5, r3, #1
 8003766:	fbb0 f0f5 	udiv	r0, r0, r5
 800376a:	e7f7      	b.n	800375c <HAL_SD_ConfigWideBusOperation+0x148>
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800376c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800376e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003772:	63a3      	str	r3, [r4, #56]	@ 0x38
      status = HAL_ERROR;
 8003774:	e784      	b.n	8003680 <HAL_SD_ConfigWideBusOperation+0x6c>
 8003776:	bf00      	nop
 8003778:	1fe00fff 	.word	0x1fe00fff
 800377c:	02faf080 	.word	0x02faf080
 8003780:	05f5e100 	.word	0x05f5e100
 8003784:	017d7840 	.word	0x017d7840

08003788 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003788:	6c81      	ldr	r1, [r0, #72]	@ 0x48
{
 800378a:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800378c:	0409      	lsls	r1, r1, #16
{
 800378e:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003790:	6800      	ldr	r0, [r0, #0]
 8003792:	f000 fedb 	bl	800454c <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003796:	4601      	mov	r1, r0
 8003798:	b928      	cbnz	r0, 80037a6 <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800379a:	6820      	ldr	r0, [r4, #0]
 800379c:	f000 fd82 	bl	80042a4 <SDMMC_GetResponse>
}
 80037a0:	f3c0 2043 	ubfx	r0, r0, #9, #4
 80037a4:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 80037a6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80037a8:	4303      	orrs	r3, r0
 80037aa:	63a3      	str	r3, [r4, #56]	@ 0x38
  uint32_t resp1 = 0;
 80037ac:	2000      	movs	r0, #0
 80037ae:	e7f7      	b.n	80037a0 <HAL_SD_GetCardState+0x18>

080037b0 <HAL_SD_Init>:
{
 80037b0:	b530      	push	{r4, r5, lr}
  if(hsd == NULL)
 80037b2:	4604      	mov	r4, r0
{
 80037b4:	b087      	sub	sp, #28
  if(hsd == NULL)
 80037b6:	b910      	cbnz	r0, 80037be <HAL_SD_Init+0xe>
    return HAL_ERROR;
 80037b8:	2001      	movs	r0, #1
}
 80037ba:	b007      	add	sp, #28
 80037bc:	bd30      	pop	{r4, r5, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 80037be:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 80037c2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80037c6:	b913      	cbnz	r3, 80037ce <HAL_SD_Init+0x1e>
    hsd->Lock = HAL_UNLOCKED;
 80037c8:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 80037ca:	f7fd faa9 	bl	8000d20 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 80037ce:	2303      	movs	r3, #3
 80037d0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80037d4:	4620      	mov	r0, r4
 80037d6:	f7ff fd03 	bl	80031e0 <HAL_SD_InitCard>
 80037da:	2800      	cmp	r0, #0
 80037dc:	d1ec      	bne.n	80037b8 <HAL_SD_Init+0x8>
  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80037de:	a901      	add	r1, sp, #4
 80037e0:	4620      	mov	r0, r4
 80037e2:	f7ff fe57 	bl	8003494 <HAL_SD_GetCardStatus>
 80037e6:	2800      	cmp	r0, #0
 80037e8:	d1e6      	bne.n	80037b8 <HAL_SD_Init+0x8>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80037ea:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
  speedgrade = CardStatus.UhsSpeedGrade;
 80037ec:	f89d 3014 	ldrb.w	r3, [sp, #20]
  unitsize = CardStatus.UhsAllocationUnitSize;
 80037f0:	f89d 2015 	ldrb.w	r2, [sp, #21]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80037f4:	2901      	cmp	r1, #1
  speedgrade = CardStatus.UhsSpeedGrade;
 80037f6:	b2db      	uxtb	r3, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 80037f8:	b2d2      	uxtb	r2, r2
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80037fa:	d105      	bne.n	8003808 <HAL_SD_Init+0x58>
 80037fc:	4313      	orrs	r3, r2
 80037fe:	bf14      	ite	ne
 8003800:	f44f 7000 	movne.w	r0, #512	@ 0x200
 8003804:	f44f 7080 	moveq.w	r0, #256	@ 0x100
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8003808:	65e0      	str	r0, [r4, #92]	@ 0x5c
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800380a:	68e1      	ldr	r1, [r4, #12]
 800380c:	4620      	mov	r0, r4
 800380e:	f7ff ff01 	bl	8003614 <HAL_SD_ConfigWideBusOperation>
 8003812:	2800      	cmp	r0, #0
 8003814:	d1d0      	bne.n	80037b8 <HAL_SD_Init+0x8>
  tickstart = HAL_GetTick();
 8003816:	f7fd fd69 	bl	80012ec <HAL_GetTick>
 800381a:	4605      	mov	r5, r0
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800381c:	4620      	mov	r0, r4
 800381e:	f7ff ffb3 	bl	8003788 <HAL_SD_GetCardState>
 8003822:	2804      	cmp	r0, #4
 8003824:	d10b      	bne.n	800383e <HAL_SD_Init+0x8e>
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8003826:	68e1      	ldr	r1, [r4, #12]
 8003828:	4620      	mov	r0, r4
 800382a:	f7ff fef3 	bl	8003614 <HAL_SD_ConfigWideBusOperation>
 800382e:	2800      	cmp	r0, #0
 8003830:	d1c2      	bne.n	80037b8 <HAL_SD_Init+0x8>
  hsd->State = HAL_SD_STATE_READY;
 8003832:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003834:	63a0      	str	r0, [r4, #56]	@ 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8003836:	6320      	str	r0, [r4, #48]	@ 0x30
  hsd->State = HAL_SD_STATE_READY;
 8003838:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  return HAL_OK;
 800383c:	e7bd      	b.n	80037ba <HAL_SD_Init+0xa>
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800383e:	f7fd fd55 	bl	80012ec <HAL_GetTick>
 8003842:	1b40      	subs	r0, r0, r5
 8003844:	3001      	adds	r0, #1
 8003846:	d1e9      	bne.n	800381c <HAL_SD_Init+0x6c>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8003848:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800384c:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State= HAL_SD_STATE_READY;
 800384e:	2301      	movs	r3, #1
 8003850:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003854:	2300      	movs	r3, #0
 8003856:	6323      	str	r3, [r4, #48]	@ 0x30
      return HAL_TIMEOUT;
 8003858:	2003      	movs	r0, #3
 800385a:	e7ae      	b.n	80037ba <HAL_SD_Init+0xa>

0800385c <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  UNUSED(status);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SD_EnableTransciver could be implemented in the user file
   */
}
 800385c:	4770      	bx	lr

0800385e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800385e:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003860:	4604      	mov	r4, r0
 8003862:	2800      	cmp	r0, #0
 8003864:	d063      	beq.n	800392e <HAL_SPI_Init+0xd0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003866:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003868:	2b00      	cmp	r3, #0
 800386a:	d159      	bne.n	8003920 <HAL_SPI_Init+0xc2>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800386c:	6842      	ldr	r2, [r0, #4]
 800386e:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8003872:	d000      	beq.n	8003876 <HAL_SPI_Init+0x18>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003874:	61c3      	str	r3, [r0, #28]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003876:	2300      	movs	r3, #0
 8003878:	62a3      	str	r3, [r4, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800387a:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 800387e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003882:	b923      	cbnz	r3, 800388e <HAL_SPI_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003884:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003888:	4620      	mov	r0, r4
 800388a:	f7fd facb 	bl	8000e24 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800388e:	6820      	ldr	r0, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003890:	68e1      	ldr	r1, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003892:	2302      	movs	r3, #2
 8003894:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 8003898:	6803      	ldr	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800389a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 800389e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038a2:	6003      	str	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038a4:	f04f 0300 	mov.w	r3, #0
 80038a8:	d93e      	bls.n	8003928 <HAL_SPI_Init+0xca>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80038aa:	461d      	mov	r5, r3
 80038ac:	f5b1 6f70 	cmp.w	r1, #3840	@ 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038b0:	bf18      	it	ne
 80038b2:	62a3      	strne	r3, [r4, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038b4:	68a6      	ldr	r6, [r4, #8]
 80038b6:	6863      	ldr	r3, [r4, #4]
 80038b8:	69a2      	ldr	r2, [r4, #24]
 80038ba:	f406 4604 	and.w	r6, r6, #33792	@ 0x8400
 80038be:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80038c2:	4333      	orrs	r3, r6
 80038c4:	6926      	ldr	r6, [r4, #16]
 80038c6:	f006 0602 	and.w	r6, r6, #2
 80038ca:	4333      	orrs	r3, r6
 80038cc:	6966      	ldr	r6, [r4, #20]
 80038ce:	f006 0601 	and.w	r6, r6, #1
 80038d2:	4333      	orrs	r3, r6
 80038d4:	f402 7600 	and.w	r6, r2, #512	@ 0x200
 80038d8:	4333      	orrs	r3, r6
 80038da:	69e6      	ldr	r6, [r4, #28]
 80038dc:	f006 0638 	and.w	r6, r6, #56	@ 0x38
 80038e0:	4333      	orrs	r3, r6
 80038e2:	6a26      	ldr	r6, [r4, #32]
 80038e4:	f006 0680 	and.w	r6, r6, #128	@ 0x80
 80038e8:	4333      	orrs	r3, r6
 80038ea:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80038ec:	f406 5600 	and.w	r6, r6, #8192	@ 0x2000
 80038f0:	4333      	orrs	r3, r6
 80038f2:	6003      	str	r3, [r0, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80038f4:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 80038f6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80038f8:	f006 0608 	and.w	r6, r6, #8
 80038fc:	f003 0310 	and.w	r3, r3, #16
 8003900:	4333      	orrs	r3, r6
 8003902:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 8003906:	0c12      	lsrs	r2, r2, #16
 8003908:	430b      	orrs	r3, r1
 800390a:	f002 0204 	and.w	r2, r2, #4
 800390e:	4313      	orrs	r3, r2
 8003910:	432b      	orrs	r3, r5
 8003912:	6043      	str	r3, [r0, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003914:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8003916:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003918:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800391a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d

  return HAL_OK;
}
 800391e:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003920:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003922:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003926:	e7a6      	b.n	8003876 <HAL_SPI_Init+0x18>
 8003928:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 800392c:	e7c0      	b.n	80038b0 <HAL_SPI_Init+0x52>
    return HAL_ERROR;
 800392e:	2001      	movs	r0, #1
 8003930:	e7f5      	b.n	800391e <HAL_SPI_Init+0xc0>

08003932 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8003932:	b570      	push	{r4, r5, r6, lr}
 8003934:	460e      	mov	r6, r1
 8003936:	4615      	mov	r5, r2
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8003938:	4604      	mov	r4, r0
 800393a:	b328      	cbz	r0, 8003988 <HAL_SRAM_Init+0x56>
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800393c:	f890 3049 	ldrb.w	r3, [r0, #73]	@ 0x49
 8003940:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003944:	b91b      	cbnz	r3, 800394e <HAL_SRAM_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003946:	f880 2048 	strb.w	r2, [r0, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800394a:	f7fc fe79 	bl	8000640 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800394e:	f104 0108 	add.w	r1, r4, #8
 8003952:	6820      	ldr	r0, [r4, #0]
 8003954:	f000 fbd8 	bl	8004108 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003958:	68a2      	ldr	r2, [r4, #8]
 800395a:	6820      	ldr	r0, [r4, #0]
 800395c:	4631      	mov	r1, r6
 800395e:	f000 fc19 	bl	8004194 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003962:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003964:	68a2      	ldr	r2, [r4, #8]
 8003966:	6860      	ldr	r0, [r4, #4]
 8003968:	4629      	mov	r1, r5
 800396a:	f000 fc3c 	bl	80041e6 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800396e:	6822      	ldr	r2, [r4, #0]
 8003970:	68a1      	ldr	r1, [r4, #8]
 8003972:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003976:	f043 0301 	orr.w	r3, r3, #1
 800397a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800397e:	2301      	movs	r3, #1
 8003980:	f884 3049 	strb.w	r3, [r4, #73]	@ 0x49

  return HAL_OK;
 8003984:	2000      	movs	r0, #0
}
 8003986:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003988:	2001      	movs	r0, #1
 800398a:	e7fc      	b.n	8003986 <HAL_SRAM_Init+0x54>

0800398c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800398c:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800398e:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003990:	e852 3f00 	ldrex	r3, [r2]
 8003994:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003998:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800399c:	6802      	ldr	r2, [r0, #0]
 800399e:	2900      	cmp	r1, #0
 80039a0:	d1f5      	bne.n	800398e <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80039a2:	4c0f      	ldr	r4, [pc, #60]	@ (80039e0 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a4:	f102 0308 	add.w	r3, r2, #8
 80039a8:	e853 3f00 	ldrex	r3, [r3]
 80039ac:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ae:	f102 0c08 	add.w	ip, r2, #8
 80039b2:	e84c 3100 	strex	r1, r3, [ip]
 80039b6:	2900      	cmp	r1, #0
 80039b8:	d1f4      	bne.n	80039a4 <UART_EndRxTransfer+0x18>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039ba:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d107      	bne.n	80039d0 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c0:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039c4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c8:	e842 3100 	strex	r1, r3, [r2]
 80039cc:	2900      	cmp	r1, #0
 80039ce:	d1f7      	bne.n	80039c0 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039d0:	2320      	movs	r3, #32
 80039d2:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039d6:	2300      	movs	r3, #0
 80039d8:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039da:	6743      	str	r3, [r0, #116]	@ 0x74
}
 80039dc:	bd10      	pop	{r4, pc}
 80039de:	bf00      	nop
 80039e0:	effffffe 	.word	0xeffffffe

080039e4 <UART_SetConfig>:
{
 80039e4:	b538      	push	{r3, r4, r5, lr}
 80039e6:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039e8:	69c0      	ldr	r0, [r0, #28]
 80039ea:	6921      	ldr	r1, [r4, #16]
 80039ec:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039ee:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039f0:	430a      	orrs	r2, r1
 80039f2:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039f4:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039f6:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039f8:	4985      	ldr	r1, [pc, #532]	@ (8003c10 <UART_SetConfig+0x22c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039fa:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039fc:	4029      	ands	r1, r5
 80039fe:	430a      	orrs	r2, r1
 8003a00:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a02:	685a      	ldr	r2, [r3, #4]
 8003a04:	68e1      	ldr	r1, [r4, #12]
 8003a06:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a0e:	4a81      	ldr	r2, [pc, #516]	@ (8003c14 <UART_SetConfig+0x230>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a10:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a12:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8003a14:	bf1c      	itt	ne
 8003a16:	6a22      	ldrne	r2, [r4, #32]
 8003a18:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
 8003a20:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
 8003a24:	430a      	orrs	r2, r1
 8003a26:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a2a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003a2c:	f022 020f 	bic.w	r2, r2, #15
 8003a30:	430a      	orrs	r2, r1
 8003a32:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a34:	4a78      	ldr	r2, [pc, #480]	@ (8003c18 <UART_SetConfig+0x234>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d130      	bne.n	8003a9c <UART_SetConfig+0xb8>
 8003a3a:	4b78      	ldr	r3, [pc, #480]	@ (8003c1c <UART_SetConfig+0x238>)
 8003a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a40:	f003 0303 	and.w	r3, r3, #3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	f000 80da 	beq.w	8003bfe <UART_SetConfig+0x21a>
 8003a4a:	2b03      	cmp	r3, #3
 8003a4c:	f000 80ca 	beq.w	8003be4 <UART_SetConfig+0x200>
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	f000 80ce 	beq.w	8003bf2 <UART_SetConfig+0x20e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a56:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003a5a:	f040 80d5 	bne.w	8003c08 <UART_SetConfig+0x224>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a5e:	f7fe fb61 	bl	8002124 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8003a62:	2800      	cmp	r0, #0
 8003a64:	d077      	beq.n	8003b56 <UART_SetConfig+0x172>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a66:	6861      	ldr	r1, [r4, #4]
 8003a68:	4b6d      	ldr	r3, [pc, #436]	@ (8003c20 <UART_SetConfig+0x23c>)
 8003a6a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003a6c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003a70:	fbb0 f2f2 	udiv	r2, r0, r2
 8003a74:	084b      	lsrs	r3, r1, #1
 8003a76:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a7a:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a7e:	fbb3 f3f1 	udiv	r3, r3, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a82:	f1a3 0110 	sub.w	r1, r3, #16
 8003a86:	4291      	cmp	r1, r2
 8003a88:	d820      	bhi.n	8003acc <UART_SetConfig+0xe8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a8a:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8003a8e:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a90:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a92:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8003a96:	4313      	orrs	r3, r2
 8003a98:	60cb      	str	r3, [r1, #12]
 8003a9a:	e05c      	b.n	8003b56 <UART_SetConfig+0x172>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a9c:	4a61      	ldr	r2, [pc, #388]	@ (8003c24 <UART_SetConfig+0x240>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d116      	bne.n	8003ad0 <UART_SetConfig+0xec>
 8003aa2:	4b5e      	ldr	r3, [pc, #376]	@ (8003c1c <UART_SetConfig+0x238>)
 8003aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa8:	f003 030c 	and.w	r3, r3, #12
 8003aac:	2b08      	cmp	r3, #8
 8003aae:	f000 80a6 	beq.w	8003bfe <UART_SetConfig+0x21a>
 8003ab2:	d808      	bhi.n	8003ac6 <UART_SetConfig+0xe2>
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f040 809c 	bne.w	8003bf2 <UART_SetConfig+0x20e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aba:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003abe:	d17a      	bne.n	8003bb6 <UART_SetConfig+0x1d2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ac0:	f7fe fb1e 	bl	8002100 <HAL_RCC_GetPCLK1Freq>
        break;
 8003ac4:	e7cd      	b.n	8003a62 <UART_SetConfig+0x7e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ac6:	2b0c      	cmp	r3, #12
 8003ac8:	f000 808c 	beq.w	8003be4 <UART_SetConfig+0x200>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003acc:	2001      	movs	r0, #1
 8003ace:	e043      	b.n	8003b58 <UART_SetConfig+0x174>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ad0:	4a55      	ldr	r2, [pc, #340]	@ (8003c28 <UART_SetConfig+0x244>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d10a      	bne.n	8003aec <UART_SetConfig+0x108>
 8003ad6:	4b51      	ldr	r3, [pc, #324]	@ (8003c1c <UART_SetConfig+0x238>)
 8003ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003adc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003ae0:	2b20      	cmp	r3, #32
 8003ae2:	f000 808c 	beq.w	8003bfe <UART_SetConfig+0x21a>
 8003ae6:	d9e5      	bls.n	8003ab4 <UART_SetConfig+0xd0>
 8003ae8:	2b30      	cmp	r3, #48	@ 0x30
 8003aea:	e7ed      	b.n	8003ac8 <UART_SetConfig+0xe4>
 8003aec:	4a4f      	ldr	r2, [pc, #316]	@ (8003c2c <UART_SetConfig+0x248>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d109      	bne.n	8003b06 <UART_SetConfig+0x122>
 8003af2:	4b4a      	ldr	r3, [pc, #296]	@ (8003c1c <UART_SetConfig+0x238>)
 8003af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003af8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003afc:	2b80      	cmp	r3, #128	@ 0x80
 8003afe:	d07e      	beq.n	8003bfe <UART_SetConfig+0x21a>
 8003b00:	d9d8      	bls.n	8003ab4 <UART_SetConfig+0xd0>
 8003b02:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b04:	e7e0      	b.n	8003ac8 <UART_SetConfig+0xe4>
 8003b06:	4a4a      	ldr	r2, [pc, #296]	@ (8003c30 <UART_SetConfig+0x24c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d10b      	bne.n	8003b24 <UART_SetConfig+0x140>
 8003b0c:	4b43      	ldr	r3, [pc, #268]	@ (8003c1c <UART_SetConfig+0x238>)
 8003b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b1a:	d070      	beq.n	8003bfe <UART_SetConfig+0x21a>
 8003b1c:	d9ca      	bls.n	8003ab4 <UART_SetConfig+0xd0>
 8003b1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b22:	e7d1      	b.n	8003ac8 <UART_SetConfig+0xe4>
 8003b24:	4a3b      	ldr	r2, [pc, #236]	@ (8003c14 <UART_SetConfig+0x230>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d1d0      	bne.n	8003acc <UART_SetConfig+0xe8>
 8003b2a:	4b3c      	ldr	r3, [pc, #240]	@ (8003c1c <UART_SetConfig+0x238>)
 8003b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b30:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003b34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b38:	d015      	beq.n	8003b66 <UART_SetConfig+0x182>
 8003b3a:	d803      	bhi.n	8003b44 <UART_SetConfig+0x160>
 8003b3c:	b943      	cbnz	r3, 8003b50 <UART_SetConfig+0x16c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b3e:	f7fe fadf 	bl	8002100 <HAL_RCC_GetPCLK1Freq>
        break;
 8003b42:	e007      	b.n	8003b54 <UART_SetConfig+0x170>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b44:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b48:	d1c0      	bne.n	8003acc <UART_SetConfig+0xe8>
 8003b4a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003b4e:	e00b      	b.n	8003b68 <UART_SetConfig+0x184>
        pclk = HAL_RCC_GetSysClockFreq();
 8003b50:	f7fd fef4 	bl	800193c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8003b54:	b940      	cbnz	r0, 8003b68 <UART_SetConfig+0x184>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b56:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 8003b58:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8003b5c:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8003b5e:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8003b60:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
}
 8003b64:	bd38      	pop	{r3, r4, r5, pc}
        pclk = (uint32_t) HSI_VALUE;
 8003b66:	4833      	ldr	r0, [pc, #204]	@ (8003c34 <UART_SetConfig+0x250>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b68:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003b6a:	4b2d      	ldr	r3, [pc, #180]	@ (8003c20 <UART_SetConfig+0x23c>)
 8003b6c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b6e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003b72:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003b76:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b7a:	4299      	cmp	r1, r3
 8003b7c:	d8a6      	bhi.n	8003acc <UART_SetConfig+0xe8>
 8003b7e:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8003b82:	d8a3      	bhi.n	8003acc <UART_SetConfig+0xe8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b84:	2300      	movs	r3, #0
 8003b86:	4619      	mov	r1, r3
 8003b88:	f7fc fb8a 	bl	80002a0 <__aeabi_uldivmod>
 8003b8c:	0209      	lsls	r1, r1, #8
 8003b8e:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8003b92:	086b      	lsrs	r3, r5, #1
 8003b94:	0200      	lsls	r0, r0, #8
 8003b96:	18c0      	adds	r0, r0, r3
 8003b98:	462a      	mov	r2, r5
 8003b9a:	f04f 0300 	mov.w	r3, #0
 8003b9e:	f141 0100 	adc.w	r1, r1, #0
 8003ba2:	f7fc fb7d 	bl	80002a0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ba6:	4b24      	ldr	r3, [pc, #144]	@ (8003c38 <UART_SetConfig+0x254>)
 8003ba8:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d88d      	bhi.n	8003acc <UART_SetConfig+0xe8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003bb0:	6823      	ldr	r3, [r4, #0]
 8003bb2:	60d8      	str	r0, [r3, #12]
 8003bb4:	e7cf      	b.n	8003b56 <UART_SetConfig+0x172>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bb6:	f7fe faa3 	bl	8002100 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003bba:	2800      	cmp	r0, #0
 8003bbc:	d0cb      	beq.n	8003b56 <UART_SetConfig+0x172>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bbe:	6863      	ldr	r3, [r4, #4]
 8003bc0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003bc2:	4a17      	ldr	r2, [pc, #92]	@ (8003c20 <UART_SetConfig+0x23c>)
 8003bc4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8003bc8:	fbb0 f0f2 	udiv	r0, r0, r2
 8003bcc:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003bd0:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bd4:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 8003bd8:	f1a0 0210 	sub.w	r2, r0, #16
 8003bdc:	e7e6      	b.n	8003bac <UART_SetConfig+0x1c8>
        pclk = HAL_RCC_GetSysClockFreq();
 8003bde:	f7fd fead 	bl	800193c <HAL_RCC_GetSysClockFreq>
        break;
 8003be2:	e7ea      	b.n	8003bba <UART_SetConfig+0x1d6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003be4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003be8:	f43f af3d 	beq.w	8003a66 <UART_SetConfig+0x82>
        pclk = (uint32_t) LSE_VALUE;
 8003bec:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003bf0:	e7e5      	b.n	8003bbe <UART_SetConfig+0x1da>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bf2:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003bf6:	d1f2      	bne.n	8003bde <UART_SetConfig+0x1fa>
        pclk = HAL_RCC_GetSysClockFreq();
 8003bf8:	f7fd fea0 	bl	800193c <HAL_RCC_GetSysClockFreq>
        break;
 8003bfc:	e731      	b.n	8003a62 <UART_SetConfig+0x7e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bfe:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003c02:	480c      	ldr	r0, [pc, #48]	@ (8003c34 <UART_SetConfig+0x250>)
 8003c04:	d1db      	bne.n	8003bbe <UART_SetConfig+0x1da>
 8003c06:	e72e      	b.n	8003a66 <UART_SetConfig+0x82>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c08:	f7fe fa8c 	bl	8002124 <HAL_RCC_GetPCLK2Freq>
        break;
 8003c0c:	e7d5      	b.n	8003bba <UART_SetConfig+0x1d6>
 8003c0e:	bf00      	nop
 8003c10:	cfff69f3 	.word	0xcfff69f3
 8003c14:	40008000 	.word	0x40008000
 8003c18:	40013800 	.word	0x40013800
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	08007db8 	.word	0x08007db8
 8003c24:	40004400 	.word	0x40004400
 8003c28:	40004800 	.word	0x40004800
 8003c2c:	40004c00 	.word	0x40004c00
 8003c30:	40005000 	.word	0x40005000
 8003c34:	00f42400 	.word	0x00f42400
 8003c38:	000ffcff 	.word	0x000ffcff

08003c3c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c3c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003c3e:	071a      	lsls	r2, r3, #28
{
 8003c40:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c42:	d506      	bpl.n	8003c52 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c44:	6801      	ldr	r1, [r0, #0]
 8003c46:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8003c48:	684a      	ldr	r2, [r1, #4]
 8003c4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c4e:	4322      	orrs	r2, r4
 8003c50:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c52:	07dc      	lsls	r4, r3, #31
 8003c54:	d506      	bpl.n	8003c64 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c56:	6801      	ldr	r1, [r0, #0]
 8003c58:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8003c5a:	684a      	ldr	r2, [r1, #4]
 8003c5c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8003c60:	4322      	orrs	r2, r4
 8003c62:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c64:	0799      	lsls	r1, r3, #30
 8003c66:	d506      	bpl.n	8003c76 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c68:	6801      	ldr	r1, [r0, #0]
 8003c6a:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8003c6c:	684a      	ldr	r2, [r1, #4]
 8003c6e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003c72:	4322      	orrs	r2, r4
 8003c74:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c76:	075a      	lsls	r2, r3, #29
 8003c78:	d506      	bpl.n	8003c88 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c7a:	6801      	ldr	r1, [r0, #0]
 8003c7c:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8003c7e:	684a      	ldr	r2, [r1, #4]
 8003c80:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003c84:	4322      	orrs	r2, r4
 8003c86:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c88:	06dc      	lsls	r4, r3, #27
 8003c8a:	d506      	bpl.n	8003c9a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c8c:	6801      	ldr	r1, [r0, #0]
 8003c8e:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8003c90:	688a      	ldr	r2, [r1, #8]
 8003c92:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c96:	4322      	orrs	r2, r4
 8003c98:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c9a:	0699      	lsls	r1, r3, #26
 8003c9c:	d506      	bpl.n	8003cac <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c9e:	6801      	ldr	r1, [r0, #0]
 8003ca0:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8003ca2:	688a      	ldr	r2, [r1, #8]
 8003ca4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ca8:	4322      	orrs	r2, r4
 8003caa:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cac:	065a      	lsls	r2, r3, #25
 8003cae:	d50f      	bpl.n	8003cd0 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cb0:	6801      	ldr	r1, [r0, #0]
 8003cb2:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8003cb4:	684a      	ldr	r2, [r1, #4]
 8003cb6:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8003cba:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cbc:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cc0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cc2:	d105      	bne.n	8003cd0 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cc4:	684a      	ldr	r2, [r1, #4]
 8003cc6:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8003cc8:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8003ccc:	4322      	orrs	r2, r4
 8003cce:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cd0:	061b      	lsls	r3, r3, #24
 8003cd2:	d506      	bpl.n	8003ce2 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cd4:	6802      	ldr	r2, [r0, #0]
 8003cd6:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8003cd8:	6853      	ldr	r3, [r2, #4]
 8003cda:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8003cde:	430b      	orrs	r3, r1
 8003ce0:	6053      	str	r3, [r2, #4]
}
 8003ce2:	bd10      	pop	{r4, pc}

08003ce4 <UART_WaitOnFlagUntilTimeout>:
{
 8003ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ce8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003cec:	4604      	mov	r4, r0
 8003cee:	460d      	mov	r5, r1
 8003cf0:	4617      	mov	r7, r2
 8003cf2:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cf4:	6822      	ldr	r2, [r4, #0]
 8003cf6:	69d3      	ldr	r3, [r2, #28]
 8003cf8:	ea35 0303 	bics.w	r3, r5, r3
 8003cfc:	bf0c      	ite	eq
 8003cfe:	2301      	moveq	r3, #1
 8003d00:	2300      	movne	r3, #0
 8003d02:	42bb      	cmp	r3, r7
 8003d04:	d001      	beq.n	8003d0a <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8003d06:	2000      	movs	r0, #0
 8003d08:	e022      	b.n	8003d50 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8003d0a:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003d0e:	d0f2      	beq.n	8003cf6 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d10:	f7fd faec 	bl	80012ec <HAL_GetTick>
 8003d14:	eba0 0008 	sub.w	r0, r0, r8
 8003d18:	4548      	cmp	r0, r9
 8003d1a:	d829      	bhi.n	8003d70 <UART_WaitOnFlagUntilTimeout+0x8c>
 8003d1c:	f1b9 0f00 	cmp.w	r9, #0
 8003d20:	d026      	beq.n	8003d70 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d22:	6821      	ldr	r1, [r4, #0]
 8003d24:	680b      	ldr	r3, [r1, #0]
 8003d26:	075a      	lsls	r2, r3, #29
 8003d28:	d5e4      	bpl.n	8003cf4 <UART_WaitOnFlagUntilTimeout+0x10>
 8003d2a:	2d80      	cmp	r5, #128	@ 0x80
 8003d2c:	d0e2      	beq.n	8003cf4 <UART_WaitOnFlagUntilTimeout+0x10>
 8003d2e:	2d40      	cmp	r5, #64	@ 0x40
 8003d30:	d0e0      	beq.n	8003cf4 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d32:	69ce      	ldr	r6, [r1, #28]
 8003d34:	f016 0608 	ands.w	r6, r6, #8
 8003d38:	d00c      	beq.n	8003d54 <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d3a:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 8003d3c:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d3e:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 8003d40:	f7ff fe24 	bl	800398c <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 8003d44:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d46:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 8003d4a:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
          return HAL_ERROR;
 8003d4e:	2001      	movs	r0, #1
}
 8003d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d54:	69cb      	ldr	r3, [r1, #28]
 8003d56:	051b      	lsls	r3, r3, #20
 8003d58:	d5cc      	bpl.n	8003cf4 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003d5e:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 8003d60:	4620      	mov	r0, r4
 8003d62:	f7ff fe13 	bl	800398c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d66:	2320      	movs	r3, #32
 8003d68:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 8003d6c:	f884 6084 	strb.w	r6, [r4, #132]	@ 0x84
        return HAL_TIMEOUT;
 8003d70:	2003      	movs	r0, #3
 8003d72:	e7ed      	b.n	8003d50 <UART_WaitOnFlagUntilTimeout+0x6c>

08003d74 <HAL_UART_Transmit>:
{
 8003d74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003d78:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003d7a:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8003d7e:	2b20      	cmp	r3, #32
{
 8003d80:	4604      	mov	r4, r0
 8003d82:	460e      	mov	r6, r1
 8003d84:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003d86:	d146      	bne.n	8003e16 <HAL_UART_Transmit+0xa2>
    if ((pData == NULL) || (Size == 0U))
 8003d88:	2900      	cmp	r1, #0
 8003d8a:	d046      	beq.n	8003e1a <HAL_UART_Transmit+0xa6>
 8003d8c:	2a00      	cmp	r2, #0
 8003d8e:	d044      	beq.n	8003e1a <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d90:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d92:	2500      	movs	r5, #0
 8003d94:	f8c0 5090 	str.w	r5, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d98:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
 8003d9c:	f7fd faa6 	bl	80012ec <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003da0:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8003da2:	f8a4 7054 	strh.w	r7, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003da6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8003daa:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 8003dac:	f8a4 7056 	strh.w	r7, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003db0:	d103      	bne.n	8003dba <HAL_UART_Transmit+0x46>
 8003db2:	6923      	ldr	r3, [r4, #16]
 8003db4:	b90b      	cbnz	r3, 8003dba <HAL_UART_Transmit+0x46>
      pdata16bits = (const uint16_t *) pData;
 8003db6:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003db8:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 8003dba:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dbe:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8003dc2:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dc4:	464b      	mov	r3, r9
    while (huart->TxXferCount > 0U)
 8003dc6:	b942      	cbnz	r2, 8003dda <HAL_UART_Transmit+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dc8:	2140      	movs	r1, #64	@ 0x40
 8003dca:	4620      	mov	r0, r4
 8003dcc:	f7ff ff8a 	bl	8003ce4 <UART_WaitOnFlagUntilTimeout>
 8003dd0:	2320      	movs	r3, #32
 8003dd2:	b948      	cbnz	r0, 8003de8 <HAL_UART_Transmit+0x74>
    huart->gState = HAL_UART_STATE_READY;
 8003dd4:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
 8003dd8:	e009      	b.n	8003dee <HAL_UART_Transmit+0x7a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	2180      	movs	r1, #128	@ 0x80
 8003dde:	4620      	mov	r0, r4
 8003de0:	f7ff ff80 	bl	8003ce4 <UART_WaitOnFlagUntilTimeout>
 8003de4:	b130      	cbz	r0, 8003df4 <HAL_UART_Transmit+0x80>
        huart->gState = HAL_UART_STATE_READY;
 8003de6:	2320      	movs	r3, #32
 8003de8:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        return HAL_TIMEOUT;
 8003dec:	2003      	movs	r0, #3
}
 8003dee:	b003      	add	sp, #12
 8003df0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003df4:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8003df6:	b95e      	cbnz	r6, 8003e10 <HAL_UART_Transmit+0x9c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003df8:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e00:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8003e02:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 8003e06:	3a01      	subs	r2, #1
 8003e08:	b292      	uxth	r2, r2
 8003e0a:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
 8003e0e:	e7d4      	b.n	8003dba <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e10:	f816 3b01 	ldrb.w	r3, [r6], #1
 8003e14:	e7f4      	b.n	8003e00 <HAL_UART_Transmit+0x8c>
    return HAL_BUSY;
 8003e16:	2002      	movs	r0, #2
 8003e18:	e7e9      	b.n	8003dee <HAL_UART_Transmit+0x7a>
      return  HAL_ERROR;
 8003e1a:	2001      	movs	r0, #1
 8003e1c:	e7e7      	b.n	8003dee <HAL_UART_Transmit+0x7a>

08003e1e <HAL_UART_Receive>:
{
 8003e1e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003e22:	4698      	mov	r8, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e24:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 8003e28:	2b20      	cmp	r3, #32
{
 8003e2a:	4604      	mov	r4, r0
 8003e2c:	460f      	mov	r7, r1
 8003e2e:	4616      	mov	r6, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e30:	d15c      	bne.n	8003eec <HAL_UART_Receive+0xce>
    if ((pData == NULL) || (Size == 0U))
 8003e32:	2900      	cmp	r1, #0
 8003e34:	d05c      	beq.n	8003ef0 <HAL_UART_Receive+0xd2>
 8003e36:	2a00      	cmp	r2, #0
 8003e38:	d05a      	beq.n	8003ef0 <HAL_UART_Receive+0xd2>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e3a:	2322      	movs	r3, #34	@ 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e3c:	2500      	movs	r5, #0
 8003e3e:	f8c0 5090 	str.w	r5, [r0, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e42:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e46:	66c5      	str	r5, [r0, #108]	@ 0x6c
    tickstart = HAL_GetTick();
 8003e48:	f7fd fa50 	bl	80012ec <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8003e4c:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 8003e4e:	f8a4 605c 	strh.w	r6, [r4, #92]	@ 0x5c
    UART_MASK_COMPUTATION(huart);
 8003e52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8003e56:	4681      	mov	r9, r0
    huart->RxXferCount = Size;
 8003e58:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
    UART_MASK_COMPUTATION(huart);
 8003e5c:	d10d      	bne.n	8003e7a <HAL_UART_Receive+0x5c>
 8003e5e:	6923      	ldr	r3, [r4, #16]
 8003e60:	b1db      	cbz	r3, 8003e9a <HAL_UART_Receive+0x7c>
 8003e62:	22ff      	movs	r2, #255	@ 0xff
    uhMask = huart->Mask;
 8003e64:	4616      	mov	r6, r2
    UART_MASK_COMPUTATION(huart);
 8003e66:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
    while (huart->RxXferCount > 0U)
 8003e6a:	f8b4 005e 	ldrh.w	r0, [r4, #94]	@ 0x5e
 8003e6e:	b280      	uxth	r0, r0
 8003e70:	b9e0      	cbnz	r0, 8003eac <HAL_UART_Receive+0x8e>
    huart->RxState = HAL_UART_STATE_READY;
 8003e72:	2320      	movs	r3, #32
 8003e74:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
    return HAL_OK;
 8003e78:	e025      	b.n	8003ec6 <HAL_UART_Receive+0xa8>
    UART_MASK_COMPUTATION(huart);
 8003e7a:	b933      	cbnz	r3, 8003e8a <HAL_UART_Receive+0x6c>
 8003e7c:	6925      	ldr	r5, [r4, #16]
 8003e7e:	2d00      	cmp	r5, #0
 8003e80:	d0ef      	beq.n	8003e62 <HAL_UART_Receive+0x44>
 8003e82:	227f      	movs	r2, #127	@ 0x7f
    uhMask = huart->Mask;
 8003e84:	4616      	mov	r6, r2
      pdata16bits = NULL;
 8003e86:	461d      	mov	r5, r3
 8003e88:	e7ed      	b.n	8003e66 <HAL_UART_Receive+0x48>
    UART_MASK_COMPUTATION(huart);
 8003e8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e8e:	d10a      	bne.n	8003ea6 <HAL_UART_Receive+0x88>
 8003e90:	6923      	ldr	r3, [r4, #16]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0f5      	beq.n	8003e82 <HAL_UART_Receive+0x64>
 8003e96:	223f      	movs	r2, #63	@ 0x3f
 8003e98:	e7e4      	b.n	8003e64 <HAL_UART_Receive+0x46>
 8003e9a:	f240 12ff 	movw	r2, #511	@ 0x1ff
      pdata16bits = (uint16_t *) pData;
 8003e9e:	463d      	mov	r5, r7
    uhMask = huart->Mask;
 8003ea0:	4616      	mov	r6, r2
      pdata8bits  = NULL;
 8003ea2:	461f      	mov	r7, r3
 8003ea4:	e7df      	b.n	8003e66 <HAL_UART_Receive+0x48>
 8003ea6:	462a      	mov	r2, r5
    uhMask = huart->Mask;
 8003ea8:	462e      	mov	r6, r5
 8003eaa:	e7dc      	b.n	8003e66 <HAL_UART_Receive+0x48>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003eac:	f8cd 8000 	str.w	r8, [sp]
 8003eb0:	464b      	mov	r3, r9
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	2120      	movs	r1, #32
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	f7ff ff14 	bl	8003ce4 <UART_WaitOnFlagUntilTimeout>
 8003ebc:	b130      	cbz	r0, 8003ecc <HAL_UART_Receive+0xae>
        huart->RxState = HAL_UART_STATE_READY;
 8003ebe:	2320      	movs	r3, #32
 8003ec0:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        return HAL_TIMEOUT;
 8003ec4:	2003      	movs	r0, #3
}
 8003ec6:	b003      	add	sp, #12
 8003ec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003ecc:	6823      	ldr	r3, [r4, #0]
 8003ece:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003ed0:	4033      	ands	r3, r6
      if (pdata8bits == NULL)
 8003ed2:	b947      	cbnz	r7, 8003ee6 <HAL_UART_Receive+0xc8>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003ed4:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 8003ed8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8003ee4:	e7c1      	b.n	8003e6a <HAL_UART_Receive+0x4c>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003ee6:	f807 3b01 	strb.w	r3, [r7], #1
        pdata8bits++;
 8003eea:	e7f5      	b.n	8003ed8 <HAL_UART_Receive+0xba>
    return HAL_BUSY;
 8003eec:	2002      	movs	r0, #2
 8003eee:	e7ea      	b.n	8003ec6 <HAL_UART_Receive+0xa8>
      return  HAL_ERROR;
 8003ef0:	2001      	movs	r0, #1
 8003ef2:	e7e8      	b.n	8003ec6 <HAL_UART_Receive+0xa8>

08003ef4 <UART_CheckIdleState>:
{
 8003ef4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ef6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ef8:	2600      	movs	r6, #0
 8003efa:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 8003efe:	f7fd f9f5 	bl	80012ec <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f02:	6823      	ldr	r3, [r4, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8003f08:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f0a:	d51c      	bpl.n	8003f46 <UART_CheckIdleState+0x52>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	4632      	mov	r2, r6
 8003f14:	4603      	mov	r3, r0
 8003f16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003f1a:	4620      	mov	r0, r4
 8003f1c:	f7ff fee2 	bl	8003ce4 <UART_WaitOnFlagUntilTimeout>
 8003f20:	b188      	cbz	r0, 8003f46 <UART_CheckIdleState+0x52>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003f22:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f24:	e852 3f00 	ldrex	r3, [r2]
 8003f28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2c:	e842 3100 	strex	r1, r3, [r2]
 8003f30:	2900      	cmp	r1, #0
 8003f32:	d1f6      	bne.n	8003f22 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 8003f34:	2320      	movs	r3, #32
 8003f36:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 8003f3a:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8003f42:	b002      	add	sp, #8
 8003f44:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	075b      	lsls	r3, r3, #29
 8003f4c:	d524      	bpl.n	8003f98 <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f4e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	2200      	movs	r2, #0
 8003f56:	462b      	mov	r3, r5
 8003f58:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003f5c:	4620      	mov	r0, r4
 8003f5e:	f7ff fec1 	bl	8003ce4 <UART_WaitOnFlagUntilTimeout>
 8003f62:	b1c8      	cbz	r0, 8003f98 <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f64:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f66:	e852 3f00 	ldrex	r3, [r2]
 8003f6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6e:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8003f72:	6822      	ldr	r2, [r4, #0]
 8003f74:	2900      	cmp	r1, #0
 8003f76:	d1f5      	bne.n	8003f64 <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f78:	f102 0308 	add.w	r3, r2, #8
 8003f7c:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f80:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f84:	f102 0008 	add.w	r0, r2, #8
 8003f88:	e840 3100 	strex	r1, r3, [r0]
 8003f8c:	2900      	cmp	r1, #0
 8003f8e:	d1f3      	bne.n	8003f78 <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
 8003f90:	2320      	movs	r3, #32
 8003f92:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 8003f96:	e7d0      	b.n	8003f3a <UART_CheckIdleState+0x46>
  huart->gState = HAL_UART_STATE_READY;
 8003f98:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f9a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003f9c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003fa0:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa4:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fa6:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
 8003fa8:	e7c8      	b.n	8003f3c <UART_CheckIdleState+0x48>

08003faa <HAL_UART_Init>:
{
 8003faa:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003fac:	4604      	mov	r4, r0
 8003fae:	b350      	cbz	r0, 8004006 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003fb0:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8003fb4:	b91b      	cbnz	r3, 8003fbe <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8003fb6:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 8003fba:	f7fd f82d 	bl	8001018 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003fbe:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003fc0:	2324      	movs	r3, #36	@ 0x24
 8003fc2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8003fc6:	6813      	ldr	r3, [r2, #0]
 8003fc8:	f023 0301 	bic.w	r3, r3, #1
 8003fcc:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fce:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003fd0:	b113      	cbz	r3, 8003fd8 <HAL_UART_Init+0x2e>
    UART_AdvFeatureConfig(huart);
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	f7ff fe32 	bl	8003c3c <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fd8:	4620      	mov	r0, r4
 8003fda:	f7ff fd03 	bl	80039e4 <UART_SetConfig>
 8003fde:	2801      	cmp	r0, #1
 8003fe0:	d011      	beq.n	8004006 <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fe2:	6823      	ldr	r3, [r4, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fec:	689a      	ldr	r2, [r3, #8]
 8003fee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ff2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8003ffa:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8003ffc:	601a      	str	r2, [r3, #0]
}
 8003ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8004002:	f7ff bf77 	b.w	8003ef4 <UART_CheckIdleState>
}
 8004006:	2001      	movs	r0, #1
 8004008:	bd10      	pop	{r4, pc}
	...

0800400c <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800400c:	6e43      	ldr	r3, [r0, #100]	@ 0x64
{
 800400e:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004010:	b92b      	cbnz	r3, 800401e <UARTEx_SetNbDataToProcess+0x12>
  {
    huart->NbTxDataToProcess = 1U;
 8004012:	2301      	movs	r3, #1
 8004014:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004018:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800401c:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800401e:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004020:	4d09      	ldr	r5, [pc, #36]	@ (8004048 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004022:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004024:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8004026:	4c09      	ldr	r4, [pc, #36]	@ (800404c <UARTEx_SetNbDataToProcess+0x40>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004028:	0f49      	lsrs	r1, r1, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800402a:	f3c2 6242 	ubfx	r2, r2, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800402e:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 8004030:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004032:	00db      	lsls	r3, r3, #3
 8004034:	fbb3 f3f1 	udiv	r3, r3, r1
 8004038:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800403c:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 800403e:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8004046:	e7e7      	b.n	8004018 <UARTEx_SetNbDataToProcess+0xc>
 8004048:	08007dd8 	.word	0x08007dd8
 800404c:	08007dd0 	.word	0x08007dd0

08004050 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8004050:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8004054:	2b01      	cmp	r3, #1
 8004056:	d014      	beq.n	8004082 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004058:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800405a:	2324      	movs	r3, #36	@ 0x24
 800405c:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004060:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8004062:	6813      	ldr	r3, [r2, #0]
 8004064:	f023 0301 	bic.w	r3, r3, #1
 8004068:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800406a:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800406e:	2300      	movs	r3, #0
 8004070:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004072:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004074:	2220      	movs	r2, #32
 8004076:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800407a:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  return HAL_OK;
 800407e:	4618      	mov	r0, r3
 8004080:	4770      	bx	lr
  __HAL_LOCK(huart);
 8004082:	2002      	movs	r0, #2
}
 8004084:	4770      	bx	lr

08004086 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8004086:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8004088:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800408c:	2b01      	cmp	r3, #1
{
 800408e:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8004090:	d017      	beq.n	80040c2 <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004092:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004094:	2324      	movs	r3, #36	@ 0x24
 8004096:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800409a:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800409c:	682b      	ldr	r3, [r5, #0]
 800409e:	f023 0301 	bic.w	r3, r3, #1
 80040a2:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80040a4:	68ab      	ldr	r3, [r5, #8]
 80040a6:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 80040aa:	4319      	orrs	r1, r3
 80040ac:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 80040ae:	f7ff ffad 	bl	800400c <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 80040b2:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80040b4:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 80040b6:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 80040ba:	2000      	movs	r0, #0
 80040bc:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 80040c0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 80040c2:	2002      	movs	r0, #2
 80040c4:	e7fc      	b.n	80040c0 <HAL_UARTEx_SetTxFifoThreshold+0x3a>

080040c6 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80040c6:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 80040c8:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 80040cc:	2b01      	cmp	r3, #1
{
 80040ce:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 80040d0:	d017      	beq.n	8004102 <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040d2:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80040d4:	2324      	movs	r3, #36	@ 0x24
 80040d6:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040da:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80040dc:	682b      	ldr	r3, [r5, #0]
 80040de:	f023 0301 	bic.w	r3, r3, #1
 80040e2:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80040e4:	68ab      	ldr	r3, [r5, #8]
 80040e6:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 80040ea:	4319      	orrs	r1, r3
 80040ec:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 80040ee:	f7ff ff8d 	bl	800400c <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 80040f2:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80040f4:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 80040f6:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 80040fa:	2000      	movs	r0, #0
 80040fc:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8004100:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8004102:	2002      	movs	r0, #2
 8004104:	e7fc      	b.n	8004100 <HAL_UARTEx_SetRxFifoThreshold+0x3a>
	...

08004108 <FMC_NORSRAM_Init>:
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8004108:	680a      	ldr	r2, [r1, #0]
 800410a:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 800410e:	f023 0301 	bic.w	r3, r3, #1
{
 8004112:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8004114:	688d      	ldr	r5, [r1, #8]
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8004116:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800411a:	684b      	ldr	r3, [r1, #4]
 800411c:	68cf      	ldr	r7, [r1, #12]
 800411e:	f850 c022 	ldr.w	ip, [r0, r2, lsl #2]
 8004122:	432b      	orrs	r3, r5
 8004124:	433b      	orrs	r3, r7
 8004126:	690f      	ldr	r7, [r1, #16]
 8004128:	433b      	orrs	r3, r7
 800412a:	694f      	ldr	r7, [r1, #20]
 800412c:	433b      	orrs	r3, r7
 800412e:	698f      	ldr	r7, [r1, #24]
 8004130:	433b      	orrs	r3, r7
 8004132:	69cf      	ldr	r7, [r1, #28]
 8004134:	433b      	orrs	r3, r7
 8004136:	6a0f      	ldr	r7, [r1, #32]
 8004138:	433b      	orrs	r3, r7
 800413a:	6a4f      	ldr	r7, [r1, #36]	@ 0x24
 800413c:	433b      	orrs	r3, r7
 800413e:	6a8f      	ldr	r7, [r1, #40]	@ 0x28
  btcr_reg |= Init->WriteFifo;
 8004140:	e9d1 640c 	ldrd	r6, r4, [r1, #48]	@ 0x30
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004144:	433b      	orrs	r3, r7
 8004146:	6acf      	ldr	r7, [r1, #44]	@ 0x2c
 8004148:	433b      	orrs	r3, r7
 800414a:	4333      	orrs	r3, r6
 800414c:	6bcf      	ldr	r7, [r1, #60]	@ 0x3c
 800414e:	6b89      	ldr	r1, [r1, #56]	@ 0x38
 8004150:	4323      	orrs	r3, r4
 8004152:	433b      	orrs	r3, r7
 8004154:	430b      	orrs	r3, r1
 8004156:	490e      	ldr	r1, [pc, #56]	@ (8004190 <FMC_NORSRAM_Init+0x88>)
 8004158:	ea01 010c 	and.w	r1, r1, ip
 800415c:	430b      	orrs	r3, r1
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800415e:	f1a5 0108 	sub.w	r1, r5, #8
 8004162:	424d      	negs	r5, r1
 8004164:	414d      	adcs	r5, r1
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004166:	ea43 1385 	orr.w	r3, r3, r5, lsl #6

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800416a:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800416e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8004172:	d108      	bne.n	8004186 <FMC_NORSRAM_Init+0x7e>
 8004174:	b14a      	cbz	r2, 800418a <FMC_NORSRAM_Init+0x82>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8004176:	6803      	ldr	r3, [r0, #0]
 8004178:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800417c:	6003      	str	r3, [r0, #0]
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800417e:	6803      	ldr	r3, [r0, #0]
 8004180:	431c      	orrs	r4, r3
 8004182:	6004      	str	r4, [r0, #0]
 8004184:	e001      	b.n	800418a <FMC_NORSRAM_Init+0x82>
  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8004186:	2a00      	cmp	r2, #0
 8004188:	d1f9      	bne.n	800417e <FMC_NORSRAM_Init+0x76>
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
}
 800418a:	2000      	movs	r0, #0
 800418c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800418e:	bf00      	nop
 8004190:	ff000480 	.word	0xff000480

08004194 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004194:	b570      	push	{r4, r5, r6, lr}
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 8004196:	680b      	ldr	r3, [r1, #0]
 8004198:	69ce      	ldr	r6, [r1, #28]
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 800419a:	694d      	ldr	r5, [r1, #20]
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 800419c:	4333      	orrs	r3, r6
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 800419e:	684e      	ldr	r6, [r1, #4]
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 80041a0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 80041a4:	688e      	ldr	r6, [r1, #8]
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 80041a6:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 80041aa:	68ce      	ldr	r6, [r1, #12]
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 80041ac:	ea43 7386 	orr.w	r3, r3, r6, lsl #30
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 80041b0:	690e      	ldr	r6, [r1, #16]
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 80041b2:	6989      	ldr	r1, [r1, #24]
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 80041b4:	3d01      	subs	r5, #1
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 80041b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  Device->BTCR[Bank + 1U] =
 80041ba:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 80041bc:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 80041c0:	3902      	subs	r1, #2
 80041c2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
  Device->BTCR[Bank + 1U] =
 80041c6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
    Timing->AccessMode;
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80041ca:	6803      	ldr	r3, [r0, #0]
 80041cc:	02db      	lsls	r3, r3, #11
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 80041ce:	ea4f 5405 	mov.w	r4, r5, lsl #20
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80041d2:	d506      	bpl.n	80041e2 <FMC_NORSRAM_Timing_Init+0x4e>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 80041d4:	6843      	ldr	r3, [r0, #4]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 80041d6:	6842      	ldr	r2, [r0, #4]
 80041d8:	4313      	orrs	r3, r2
 80041da:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80041de:	4323      	orrs	r3, r4
 80041e0:	6043      	str	r3, [r0, #4]
  }

  return HAL_OK;
}
 80041e2:	2000      	movs	r0, #0
 80041e4:	bd70      	pop	{r4, r5, r6, pc}

080041e6 <FMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80041e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
{
 80041ea:	b530      	push	{r4, r5, lr}
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80041ec:	d117      	bne.n	800421e <FMC_NORSRAM_Extended_Timing_Init+0x38>
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FMC_BTRx_DATAHLD)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80041ee:	69cd      	ldr	r5, [r1, #28]
 80041f0:	680b      	ldr	r3, [r1, #0]
 80041f2:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 80041f6:	432b      	orrs	r3, r5
 80041f8:	684d      	ldr	r5, [r1, #4]
 80041fa:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 80041fe:	688d      	ldr	r5, [r1, #8]
 8004200:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8004204:	68cd      	ldr	r5, [r1, #12]
 8004206:	6909      	ldr	r1, [r1, #16]
 8004208:	ea43 7385 	orr.w	r3, r3, r5, lsl #30
 800420c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004210:	f004 617f 	and.w	r1, r4, #267386880	@ 0xff00000
 8004214:	430b      	orrs	r3, r1
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004216:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800421a:	2000      	movs	r0, #0
 800421c:	bd30      	pop	{r4, r5, pc}
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800421e:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 8004222:	e7f8      	b.n	8004216 <FMC_NORSRAM_Extended_Timing_Init+0x30>

08004224 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8004224:	b084      	sub	sp, #16
 8004226:	b510      	push	{r4, lr}
 8004228:	ac03      	add	r4, sp, #12
 800422a:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
#endif
  tmpreg |= (Init.ClockEdge           |\
 800422e:	9b03      	ldr	r3, [sp, #12]
             Init.HardwareFlowControl |\
             Init.ClockDiv
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8004230:	6841      	ldr	r1, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8004232:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 8004234:	9a05      	ldr	r2, [sp, #20]
 8004236:	4313      	orrs	r3, r2
             Init.BusWide             |\
 8004238:	9a06      	ldr	r2, [sp, #24]
 800423a:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 800423c:	9a07      	ldr	r2, [sp, #28]

  return HAL_OK;
}
 800423e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
             Init.HardwareFlowControl |\
 8004242:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8004244:	4a03      	ldr	r2, [pc, #12]	@ (8004254 <SDMMC_Init+0x30>)
 8004246:	400a      	ands	r2, r1
 8004248:	4313      	orrs	r3, r2
 800424a:	6043      	str	r3, [r0, #4]
}
 800424c:	b004      	add	sp, #16
 800424e:	2000      	movs	r0, #0
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	ffc02c00 	.word	0xffc02c00

08004258 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8004258:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
}
 800425c:	4770      	bx	lr

0800425e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800425e:	b508      	push	{r3, lr}
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8004260:	6803      	ldr	r3, [r0, #0]
 8004262:	f043 0303 	orr.w	r3, r3, #3
 8004266:	6003      	str	r3, [r0, #0]
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8004268:	2002      	movs	r0, #2
 800426a:	f7fd f845 	bl	80012f8 <HAL_Delay>

  return HAL_OK;
}
 800426e:	2000      	movs	r0, #0
 8004270:	bd08      	pop	{r3, pc}

08004272 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8004272:	6800      	ldr	r0, [r0, #0]
}
 8004274:	f000 0003 	and.w	r0, r0, #3
 8004278:	4770      	bx	lr
	...

0800427c <SDMMC_SendCommand>:
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800427c:	680b      	ldr	r3, [r1, #0]
{
 800427e:	b510      	push	{r4, lr}
  SDMMCx->ARG = Command->Argument;
 8004280:	6083      	str	r3, [r0, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004282:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
 8004286:	4313      	orrs	r3, r2
                       Command->Response         |\
 8004288:	68ca      	ldr	r2, [r1, #12]
                       Command->WaitForInterrupt |\
                       Command->CPSM);

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800428a:	68c4      	ldr	r4, [r0, #12]
                       Command->Response         |\
 800428c:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 800428e:	690a      	ldr	r2, [r1, #16]
 8004290:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004292:	4a03      	ldr	r2, [pc, #12]	@ (80042a0 <SDMMC_SendCommand+0x24>)
 8004294:	4022      	ands	r2, r4
 8004296:	4313      	orrs	r3, r2
 8004298:	60c3      	str	r3, [r0, #12]

  return HAL_OK;
}
 800429a:	2000      	movs	r0, #0
 800429c:	bd10      	pop	{r4, pc}
 800429e:	bf00      	nop
 80042a0:	fffee0c0 	.word	0xfffee0c0

080042a4 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80042a4:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 80042a6:	5840      	ldr	r0, [r0, r1]
}
 80042a8:	4770      	bx	lr

080042aa <SDMMC_ConfigData>:
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80042aa:	680b      	ldr	r3, [r1, #0]
{
 80042ac:	b510      	push	{r4, lr}
  SDMMCx->DTIMER = Data->DataTimeOut;
 80042ae:	6243      	str	r3, [r0, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80042b0:	684b      	ldr	r3, [r1, #4]
 80042b2:	6283      	str	r3, [r0, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80042b4:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
 80042b8:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 80042ba:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80042bc:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
                       Data->TransferMode  |\
 80042be:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 80042c0:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 80042c2:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80042c4:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80042c8:	4313      	orrs	r3, r2
 80042ca:	62c3      	str	r3, [r0, #44]	@ 0x2c

  return HAL_OK;

}
 80042cc:	2000      	movs	r0, #0
 80042ce:	bd10      	pop	{r4, pc}

080042d0 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80042d0:	b510      	push	{r4, lr}
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80042d2:	2300      	movs	r3, #0
{
 80042d4:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80042d6:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80042da:	e9cd 3303 	strd	r3, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80042de:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80042e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80042e4:	9305      	str	r3, [sp, #20]
{
 80042e6:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80042e8:	f7ff ffc8 	bl	800427c <SDMMC_SendCommand>
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80042ec:	4b0b      	ldr	r3, [pc, #44]	@ (800431c <SDMMC_CmdGoIdleState+0x4c>)
 80042ee:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80042f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042fc:	4353      	muls	r3, r2

  do
  {
    if (count-- == 0U)
 80042fe:	b14b      	cbz	r3, 8004314 <SDMMC_CmdGoIdleState+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8004300:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8004302:	0612      	lsls	r2, r2, #24
 8004304:	f103 33ff 	add.w	r3, r3, #4294967295
 8004308:	d5f9      	bpl.n	80042fe <SDMMC_CmdGoIdleState+0x2e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800430a:	4b05      	ldr	r3, [pc, #20]	@ (8004320 <SDMMC_CmdGoIdleState+0x50>)
 800430c:	63a3      	str	r3, [r4, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800430e:	2000      	movs	r0, #0
}
 8004310:	b006      	add	sp, #24
 8004312:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8004314:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
  return errorstate;
 8004318:	e7fa      	b.n	8004310 <SDMMC_CmdGoIdleState+0x40>
 800431a:	bf00      	nop
 800431c:	20000000 	.word	0x20000000
 8004320:	002000c5 	.word	0x002000c5

08004324 <SDMMC_GetCmdResp1>:
{
 8004324:	4603      	mov	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004326:	4844      	ldr	r0, [pc, #272]	@ (8004438 <SDMMC_GetCmdResp1+0x114>)
{
 8004328:	b510      	push	{r4, lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800432a:	6800      	ldr	r0, [r0, #0]
 800432c:	f44f 54fa 	mov.w	r4, #8000	@ 0x1f40
 8004330:	fbb0 f0f4 	udiv	r0, r0, r4
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8004334:	4c41      	ldr	r4, [pc, #260]	@ (800443c <SDMMC_GetCmdResp1+0x118>)
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004336:	4342      	muls	r2, r0
    if (count-- == 0U)
 8004338:	2a00      	cmp	r2, #0
 800433a:	d048      	beq.n	80043ce <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDMMCx->STA;
 800433c:	6b58      	ldr	r0, [r3, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800433e:	4220      	tst	r0, r4
 8004340:	d007      	beq.n	8004352 <SDMMC_GetCmdResp1+0x2e>
 8004342:	0480      	lsls	r0, r0, #18
 8004344:	d405      	bmi.n	8004352 <SDMMC_GetCmdResp1+0x2e>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004346:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004348:	0754      	lsls	r4, r2, #29
 800434a:	d504      	bpl.n	8004356 <SDMMC_GetCmdResp1+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800434c:	2004      	movs	r0, #4
 800434e:	6398      	str	r0, [r3, #56]	@ 0x38
}
 8004350:	bd10      	pop	{r4, pc}
 8004352:	3a01      	subs	r2, #1
 8004354:	e7f0      	b.n	8004338 <SDMMC_GetCmdResp1+0x14>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004356:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004358:	07d0      	lsls	r0, r2, #31
 800435a:	d503      	bpl.n	8004364 <SDMMC_GetCmdResp1+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800435c:	2201      	movs	r2, #1
 800435e:	639a      	str	r2, [r3, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004360:	2001      	movs	r0, #1
 8004362:	e7f5      	b.n	8004350 <SDMMC_GetCmdResp1+0x2c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004364:	4a36      	ldr	r2, [pc, #216]	@ (8004440 <SDMMC_GetCmdResp1+0x11c>)
 8004366:	639a      	str	r2, [r3, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8004368:	691a      	ldr	r2, [r3, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	4291      	cmp	r1, r2
 800436e:	d1f7      	bne.n	8004360 <SDMMC_GetCmdResp1+0x3c>
  return (*(__IO uint32_t *) tmp);
 8004370:	695b      	ldr	r3, [r3, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004372:	4834      	ldr	r0, [pc, #208]	@ (8004444 <SDMMC_GetCmdResp1+0x120>)
 8004374:	4018      	ands	r0, r3
 8004376:	2800      	cmp	r0, #0
 8004378:	d0ea      	beq.n	8004350 <SDMMC_GetCmdResp1+0x2c>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800437a:	2b00      	cmp	r3, #0
 800437c:	db2a      	blt.n	80043d4 <SDMMC_GetCmdResp1+0xb0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800437e:	005a      	lsls	r2, r3, #1
 8004380:	d42b      	bmi.n	80043da <SDMMC_GetCmdResp1+0xb6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004382:	009c      	lsls	r4, r3, #2
 8004384:	d42b      	bmi.n	80043de <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004386:	00d9      	lsls	r1, r3, #3
 8004388:	d42b      	bmi.n	80043e2 <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800438a:	011a      	lsls	r2, r3, #4
 800438c:	d42c      	bmi.n	80043e8 <SDMMC_GetCmdResp1+0xc4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800438e:	015c      	lsls	r4, r3, #5
 8004390:	d42d      	bmi.n	80043ee <SDMMC_GetCmdResp1+0xca>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004392:	01d9      	lsls	r1, r3, #7
 8004394:	d42e      	bmi.n	80043f4 <SDMMC_GetCmdResp1+0xd0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004396:	021a      	lsls	r2, r3, #8
 8004398:	d42f      	bmi.n	80043fa <SDMMC_GetCmdResp1+0xd6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800439a:	025c      	lsls	r4, r3, #9
 800439c:	d430      	bmi.n	8004400 <SDMMC_GetCmdResp1+0xdc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800439e:	0299      	lsls	r1, r3, #10
 80043a0:	d431      	bmi.n	8004406 <SDMMC_GetCmdResp1+0xe2>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80043a2:	02da      	lsls	r2, r3, #11
 80043a4:	d432      	bmi.n	800440c <SDMMC_GetCmdResp1+0xe8>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80043a6:	035c      	lsls	r4, r3, #13
 80043a8:	d433      	bmi.n	8004412 <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80043aa:	0399      	lsls	r1, r3, #14
 80043ac:	d434      	bmi.n	8004418 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80043ae:	03da      	lsls	r2, r3, #15
 80043b0:	d435      	bmi.n	800441e <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80043b2:	041c      	lsls	r4, r3, #16
 80043b4:	d436      	bmi.n	8004424 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80043b6:	0459      	lsls	r1, r3, #17
 80043b8:	d437      	bmi.n	800442a <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80043ba:	049a      	lsls	r2, r3, #18
 80043bc:	d438      	bmi.n	8004430 <SDMMC_GetCmdResp1+0x10c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80043be:	f013 0f08 	tst.w	r3, #8
 80043c2:	bf0c      	ite	eq
 80043c4:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 80043c8:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 80043cc:	e7c0      	b.n	8004350 <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80043ce:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80043d2:	e7bd      	b.n	8004350 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80043d4:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 80043d8:	e7ba      	b.n	8004350 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80043da:	2040      	movs	r0, #64	@ 0x40
 80043dc:	e7b8      	b.n	8004350 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80043de:	2080      	movs	r0, #128	@ 0x80
 80043e0:	e7b6      	b.n	8004350 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80043e2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80043e6:	e7b3      	b.n	8004350 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80043e8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80043ec:	e7b0      	b.n	8004350 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80043ee:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80043f2:	e7ad      	b.n	8004350 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80043f4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80043f8:	e7aa      	b.n	8004350 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80043fa:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80043fe:	e7a7      	b.n	8004350 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004400:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004404:	e7a4      	b.n	8004350 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004406:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800440a:	e7a1      	b.n	8004350 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 800440c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004410:	e79e      	b.n	8004350 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004412:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8004416:	e79b      	b.n	8004350 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004418:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800441c:	e798      	b.n	8004350 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800441e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004422:	e795      	b.n	8004350 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004424:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8004428:	e792      	b.n	8004350 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800442a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800442e:	e78f      	b.n	8004350 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 8004430:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8004434:	e78c      	b.n	8004350 <SDMMC_GetCmdResp1+0x2c>
 8004436:	bf00      	nop
 8004438:	20000000 	.word	0x20000000
 800443c:	00200045 	.word	0x00200045
 8004440:	002000c5 	.word	0x002000c5
 8004444:	fdffe008 	.word	0xfdffe008

08004448 <SDMMC_CmdBlockLength>:
{
 8004448:	b530      	push	{r4, r5, lr}
 800444a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800444c:	2510      	movs	r5, #16
 800444e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004452:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004456:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004458:	2200      	movs	r2, #0
 800445a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800445e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004460:	e9cd 2304 	strd	r2, r3, [sp, #16]
{
 8004464:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004466:	f7ff ff09 	bl	800427c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800446a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800446e:	4629      	mov	r1, r5
 8004470:	4620      	mov	r0, r4
}
 8004472:	b007      	add	sp, #28
 8004474:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8004478:	f7ff bf54 	b.w	8004324 <SDMMC_GetCmdResp1>

0800447c <SDMMC_CmdSelDesel>:
{
 800447c:	b530      	push	{r4, r5, lr}
 800447e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004480:	2507      	movs	r5, #7
 8004482:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004486:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800448a:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800448c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004490:	2200      	movs	r2, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004492:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004494:	e9cd 2304 	strd	r2, r3, [sp, #16]
{
 8004498:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800449a:	f7ff feef 	bl	800427c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800449e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044a2:	4629      	mov	r1, r5
 80044a4:	4620      	mov	r0, r4
}
 80044a6:	b007      	add	sp, #28
 80044a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80044ac:	f7ff bf3a 	b.w	8004324 <SDMMC_GetCmdResp1>

080044b0 <SDMMC_CmdAppCommand>:
{
 80044b0:	b530      	push	{r4, r5, lr}
 80044b2:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80044b4:	2537      	movs	r5, #55	@ 0x37
 80044b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80044ba:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80044be:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80044c0:	2200      	movs	r2, #0
 80044c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80044c6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80044c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
{
 80044cc:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80044ce:	f7ff fed5 	bl	800427c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80044d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044d6:	4629      	mov	r1, r5
 80044d8:	4620      	mov	r0, r4
}
 80044da:	b007      	add	sp, #28
 80044dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80044e0:	f7ff bf20 	b.w	8004324 <SDMMC_GetCmdResp1>

080044e4 <SDMMC_CmdBusWidth>:
{
 80044e4:	b530      	push	{r4, r5, lr}
 80044e6:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80044e8:	2506      	movs	r5, #6
 80044ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80044ee:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80044f2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80044f4:	2200      	movs	r2, #0
 80044f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80044fa:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80044fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
{
 8004500:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004502:	f7ff febb 	bl	800427c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8004506:	f241 3288 	movw	r2, #5000	@ 0x1388
 800450a:	4629      	mov	r1, r5
 800450c:	4620      	mov	r0, r4
}
 800450e:	b007      	add	sp, #28
 8004510:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8004514:	f7ff bf06 	b.w	8004324 <SDMMC_GetCmdResp1>

08004518 <SDMMC_CmdSendSCR>:
{
 8004518:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800451a:	2300      	movs	r3, #0
{
 800451c:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800451e:	2533      	movs	r5, #51	@ 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004520:	f44f 7280 	mov.w	r2, #256	@ 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004524:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004528:	e9cd 3501 	strd	r3, r5, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800452c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800452e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
{
 8004532:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004534:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004536:	f7ff fea1 	bl	800427c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800453a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800453e:	4629      	mov	r1, r5
 8004540:	4620      	mov	r0, r4
}
 8004542:	b007      	add	sp, #28
 8004544:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8004548:	f7ff beec 	b.w	8004324 <SDMMC_GetCmdResp1>

0800454c <SDMMC_CmdSendStatus>:
{
 800454c:	b530      	push	{r4, r5, lr}
 800454e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004550:	250d      	movs	r5, #13
 8004552:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004556:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = Argument;
 800455a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800455c:	2200      	movs	r2, #0
 800455e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004562:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004564:	e9cd 2304 	strd	r2, r3, [sp, #16]
{
 8004568:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800456a:	f7ff fe87 	bl	800427c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800456e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004572:	4629      	mov	r1, r5
 8004574:	4620      	mov	r0, r4
}
 8004576:	b007      	add	sp, #28
 8004578:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800457c:	f7ff bed2 	b.w	8004324 <SDMMC_GetCmdResp1>

08004580 <SDMMC_CmdStatusRegister>:
{
 8004580:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8004582:	2300      	movs	r3, #0
{
 8004584:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8004586:	250d      	movs	r5, #13
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004588:	f44f 7280 	mov.w	r2, #256	@ 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800458c:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8004590:	e9cd 3501 	strd	r3, r5, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004594:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004596:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
{
 800459a:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800459c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800459e:	f7ff fe6d 	bl	800427c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80045a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045a6:	4629      	mov	r1, r5
 80045a8:	4620      	mov	r0, r4
}
 80045aa:	b007      	add	sp, #28
 80045ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80045b0:	f7ff beb8 	b.w	8004324 <SDMMC_GetCmdResp1>

080045b4 <SDMMC_CmdVoltageSwitch>:
{
 80045b4:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 80045b6:	2300      	movs	r3, #0
{
 80045b8:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 80045ba:	250b      	movs	r5, #11
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80045bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80045c0:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 80045c4:	e9cd 3501 	strd	r3, r5, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80045c8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80045ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
{
 80045ce:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80045d0:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80045d2:	f7ff fe53 	bl	800427c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 80045d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045da:	4629      	mov	r1, r5
 80045dc:	4620      	mov	r0, r4
}
 80045de:	b007      	add	sp, #28
 80045e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 80045e4:	f7ff be9e 	b.w	8004324 <SDMMC_GetCmdResp1>

080045e8 <SDMMC_GetCmdResp2>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80045e8:	4b11      	ldr	r3, [pc, #68]	@ (8004630 <SDMMC_GetCmdResp2+0x48>)
 80045ea:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80045f4:	f241 3188 	movw	r1, #5000	@ 0x1388
{
 80045f8:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80045fa:	434b      	muls	r3, r1
    if (count-- == 0U)
 80045fc:	b1ab      	cbz	r3, 800462a <SDMMC_GetCmdResp2+0x42>
    sta_reg = SDMMCx->STA;
 80045fe:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004600:	f011 0f45 	tst.w	r1, #69	@ 0x45
 8004604:	d007      	beq.n	8004616 <SDMMC_GetCmdResp2+0x2e>
 8004606:	0489      	lsls	r1, r1, #18
 8004608:	d405      	bmi.n	8004616 <SDMMC_GetCmdResp2+0x2e>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800460a:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800460c:	075b      	lsls	r3, r3, #29
 800460e:	d504      	bpl.n	800461a <SDMMC_GetCmdResp2+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004610:	2004      	movs	r0, #4
 8004612:	6390      	str	r0, [r2, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004614:	4770      	bx	lr
 8004616:	3b01      	subs	r3, #1
 8004618:	e7f0      	b.n	80045fc <SDMMC_GetCmdResp2+0x14>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800461a:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 800461c:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004620:	bf0c      	ite	eq
 8004622:	4b04      	ldreq	r3, [pc, #16]	@ (8004634 <SDMMC_GetCmdResp2+0x4c>)
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004624:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004626:	6393      	str	r3, [r2, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 8004628:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800462a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 800462e:	4770      	bx	lr
 8004630:	20000000 	.word	0x20000000
 8004634:	002000c5 	.word	0x002000c5

08004638 <SDMMC_CmdSendCID>:
{
 8004638:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800463a:	2300      	movs	r3, #0
{
 800463c:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800463e:	2202      	movs	r2, #2
 8004640:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004644:	f44f 7240 	mov.w	r2, #768	@ 0x300
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004648:	e9cd 2303 	strd	r2, r3, [sp, #12]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800464c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800464e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
{
 8004652:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004654:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004656:	f7ff fe11 	bl	800427c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800465a:	4620      	mov	r0, r4
}
 800465c:	b006      	add	sp, #24
 800465e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004662:	f7ff bfc1 	b.w	80045e8 <SDMMC_GetCmdResp2>

08004666 <SDMMC_CmdSendCSD>:
{
 8004666:	b510      	push	{r4, lr}
 8004668:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800466a:	2209      	movs	r2, #9
 800466c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004670:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = Argument;
 8004674:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004676:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800467a:	2100      	movs	r1, #0
 800467c:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004680:	a901      	add	r1, sp, #4
{
 8004682:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004684:	f7ff fdfa 	bl	800427c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004688:	4620      	mov	r0, r4
}
 800468a:	b006      	add	sp, #24
 800468c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004690:	f7ff bfaa 	b.w	80045e8 <SDMMC_GetCmdResp2>

08004694 <SDMMC_GetCmdResp3>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004694:	4b0f      	ldr	r3, [pc, #60]	@ (80046d4 <SDMMC_GetCmdResp3+0x40>)
 8004696:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	fbb3 f3f1 	udiv	r3, r3, r1
 80046a0:	f241 3188 	movw	r1, #5000	@ 0x1388
{
 80046a4:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80046a6:	434b      	muls	r3, r1
    if (count-- == 0U)
 80046a8:	b183      	cbz	r3, 80046cc <SDMMC_GetCmdResp3+0x38>
    sta_reg = SDMMCx->STA;
 80046aa:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80046ac:	f011 0f45 	tst.w	r1, #69	@ 0x45
 80046b0:	d00a      	beq.n	80046c8 <SDMMC_GetCmdResp3+0x34>
 80046b2:	0489      	lsls	r1, r1, #18
 80046b4:	d408      	bmi.n	80046c8 <SDMMC_GetCmdResp3+0x34>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80046b6:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 80046b8:	f010 0004 	ands.w	r0, r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80046bc:	bf15      	itete	ne
 80046be:	2004      	movne	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80046c0:	4b05      	ldreq	r3, [pc, #20]	@ (80046d8 <SDMMC_GetCmdResp3+0x44>)
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80046c2:	6390      	strne	r0, [r2, #56]	@ 0x38
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80046c4:	6393      	streq	r3, [r2, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 80046c6:	4770      	bx	lr
 80046c8:	3b01      	subs	r3, #1
 80046ca:	e7ed      	b.n	80046a8 <SDMMC_GetCmdResp3+0x14>
      return SDMMC_ERROR_TIMEOUT;
 80046cc:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	20000000 	.word	0x20000000
 80046d8:	002000c5 	.word	0x002000c5

080046dc <SDMMC_CmdAppOperCommand>:
{
 80046dc:	b510      	push	{r4, lr}
 80046de:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80046e0:	2229      	movs	r2, #41	@ 0x29
 80046e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80046e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.Argument         = Argument;
 80046ea:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80046ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80046f0:	2100      	movs	r1, #0
 80046f2:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80046f6:	a901      	add	r1, sp, #4
{
 80046f8:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80046fa:	f7ff fdbf 	bl	800427c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80046fe:	4620      	mov	r0, r4
}
 8004700:	b006      	add	sp, #24
 8004702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8004706:	f7ff bfc5 	b.w	8004694 <SDMMC_GetCmdResp3>
	...

0800470c <SDMMC_GetCmdResp6>:
{
 800470c:	4603      	mov	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800470e:	481e      	ldr	r0, [pc, #120]	@ (8004788 <SDMMC_GetCmdResp6+0x7c>)
{
 8004710:	b510      	push	{r4, lr}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004712:	6800      	ldr	r0, [r0, #0]
 8004714:	f44f 54fa 	mov.w	r4, #8000	@ 0x1f40
 8004718:	fbb0 f0f4 	udiv	r0, r0, r4
 800471c:	f241 3488 	movw	r4, #5000	@ 0x1388
 8004720:	4360      	muls	r0, r4
    if (count-- == 0U)
 8004722:	b358      	cbz	r0, 800477c <SDMMC_GetCmdResp6+0x70>
    sta_reg = SDMMCx->STA;
 8004724:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004726:	f014 0f45 	tst.w	r4, #69	@ 0x45
 800472a:	d007      	beq.n	800473c <SDMMC_GetCmdResp6+0x30>
 800472c:	04a4      	lsls	r4, r4, #18
 800472e:	d405      	bmi.n	800473c <SDMMC_GetCmdResp6+0x30>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004730:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8004732:	0744      	lsls	r4, r0, #29
 8004734:	d504      	bpl.n	8004740 <SDMMC_GetCmdResp6+0x34>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004736:	2004      	movs	r0, #4
 8004738:	6398      	str	r0, [r3, #56]	@ 0x38
}
 800473a:	bd10      	pop	{r4, pc}
 800473c:	3801      	subs	r0, #1
 800473e:	e7f0      	b.n	8004722 <SDMMC_GetCmdResp6+0x16>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004740:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8004742:	07c0      	lsls	r0, r0, #31
 8004744:	d503      	bpl.n	800474e <SDMMC_GetCmdResp6+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004746:	2201      	movs	r2, #1
 8004748:	639a      	str	r2, [r3, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800474a:	2001      	movs	r0, #1
 800474c:	e7f5      	b.n	800473a <SDMMC_GetCmdResp6+0x2e>
  return (uint8_t)(SDMMCx->RESPCMD);
 800474e:	6918      	ldr	r0, [r3, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004750:	b2c0      	uxtb	r0, r0
 8004752:	4281      	cmp	r1, r0
 8004754:	d1f9      	bne.n	800474a <SDMMC_GetCmdResp6+0x3e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004756:	490d      	ldr	r1, [pc, #52]	@ (800478c <SDMMC_GetCmdResp6+0x80>)
 8004758:	6399      	str	r1, [r3, #56]	@ 0x38
  return (*(__IO uint32_t *) tmp);
 800475a:	695b      	ldr	r3, [r3, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800475c:	f413 4060 	ands.w	r0, r3, #57344	@ 0xe000
 8004760:	d102      	bne.n	8004768 <SDMMC_GetCmdResp6+0x5c>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004762:	0c1b      	lsrs	r3, r3, #16
 8004764:	8013      	strh	r3, [r2, #0]
    return SDMMC_ERROR_NONE;
 8004766:	e7e8      	b.n	800473a <SDMMC_GetCmdResp6+0x2e>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004768:	045a      	lsls	r2, r3, #17
 800476a:	d40a      	bmi.n	8004782 <SDMMC_GetCmdResp6+0x76>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800476c:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8004770:	bf0c      	ite	eq
 8004772:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 8004776:	f44f 5080 	movne.w	r0, #4096	@ 0x1000
 800477a:	e7de      	b.n	800473a <SDMMC_GetCmdResp6+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800477c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8004780:	e7db      	b.n	800473a <SDMMC_GetCmdResp6+0x2e>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004782:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004786:	e7d8      	b.n	800473a <SDMMC_GetCmdResp6+0x2e>
 8004788:	20000000 	.word	0x20000000
 800478c:	002000c5 	.word	0x002000c5

08004790 <SDMMC_CmdSetRelAdd>:
{
 8004790:	b570      	push	{r4, r5, r6, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004792:	2300      	movs	r3, #0
{
 8004794:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004796:	2603      	movs	r6, #3
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004798:	f44f 7280 	mov.w	r2, #256	@ 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800479c:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80047a0:	e9cd 3601 	strd	r3, r6, [sp, #4]
{
 80047a4:	460d      	mov	r5, r1
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80047a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80047aa:	a901      	add	r1, sp, #4
{
 80047ac:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80047ae:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80047b0:	f7ff fd64 	bl	800427c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80047b4:	462a      	mov	r2, r5
 80047b6:	4631      	mov	r1, r6
 80047b8:	4620      	mov	r0, r4
}
 80047ba:	b006      	add	sp, #24
 80047bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80047c0:	f7ff bfa4 	b.w	800470c <SDMMC_GetCmdResp6>

080047c4 <SDMMC_GetCmdResp7>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80047c4:	4b13      	ldr	r3, [pc, #76]	@ (8004814 <SDMMC_GetCmdResp7+0x50>)
 80047c6:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80047d0:	f241 3188 	movw	r1, #5000	@ 0x1388
{
 80047d4:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80047d6:	434b      	muls	r3, r1
    if (count-- == 0U)
 80047d8:	b1cb      	cbz	r3, 800480e <SDMMC_GetCmdResp7+0x4a>
    sta_reg = SDMMCx->STA;
 80047da:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80047dc:	f011 0f45 	tst.w	r1, #69	@ 0x45
 80047e0:	d007      	beq.n	80047f2 <SDMMC_GetCmdResp7+0x2e>
 80047e2:	0488      	lsls	r0, r1, #18
 80047e4:	d405      	bmi.n	80047f2 <SDMMC_GetCmdResp7+0x2e>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80047e6:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80047e8:	0759      	lsls	r1, r3, #29
 80047ea:	d504      	bpl.n	80047f6 <SDMMC_GetCmdResp7+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80047ec:	2004      	movs	r0, #4
 80047ee:	6390      	str	r0, [r2, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80047f0:	4770      	bx	lr
 80047f2:	3b01      	subs	r3, #1
 80047f4:	e7f0      	b.n	80047d8 <SDMMC_GetCmdResp7+0x14>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80047f6:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 80047f8:	f010 0001 	ands.w	r0, r0, #1
 80047fc:	d002      	beq.n	8004804 <SDMMC_GetCmdResp7+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80047fe:	2301      	movs	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8004800:	6393      	str	r3, [r2, #56]	@ 0x38
 8004802:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8004804:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8004806:	065b      	lsls	r3, r3, #25
 8004808:	d503      	bpl.n	8004812 <SDMMC_GetCmdResp7+0x4e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800480a:	2340      	movs	r3, #64	@ 0x40
 800480c:	e7f8      	b.n	8004800 <SDMMC_GetCmdResp7+0x3c>
      return SDMMC_ERROR_TIMEOUT;
 800480e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8004812:	4770      	bx	lr
 8004814:	20000000 	.word	0x20000000

08004818 <SDMMC_CmdOperCond>:
{
 8004818:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800481a:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
{
 800481e:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004820:	2308      	movs	r3, #8
 8004822:	e9cd 2301 	strd	r2, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004826:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800482a:	2300      	movs	r3, #0
 800482c:	e9cd 1303 	strd	r1, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004830:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004834:	a901      	add	r1, sp, #4
{
 8004836:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004838:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800483a:	f7ff fd1f 	bl	800427c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800483e:	4620      	mov	r0, r4
}
 8004840:	b006      	add	sp, #24
 8004842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8004846:	f7ff bfbd 	b.w	80047c4 <SDMMC_GetCmdResp7>

0800484a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800484a:	b084      	sub	sp, #16
 800484c:	b513      	push	{r0, r1, r4, lr}
 800484e:	4604      	mov	r4, r0
 8004850:	a805      	add	r0, sp, #20
 8004852:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004856:	68e3      	ldr	r3, [r4, #12]
 8004858:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800485c:	60e3      	str	r3, [r4, #12]
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t count = 0U;
 800485e:	2300      	movs	r3, #0
 8004860:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004862:	9b01      	ldr	r3, [sp, #4]
 8004864:	3301      	adds	r3, #1
 8004866:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8004868:	9b01      	ldr	r3, [sp, #4]
 800486a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800486e:	d81f      	bhi.n	80048b0 <USB_CoreInit+0x66>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004870:	6923      	ldr	r3, [r4, #16]
 8004872:	2b00      	cmp	r3, #0
 8004874:	daf5      	bge.n	8004862 <USB_CoreInit+0x18>

  /* Core Soft Reset */
  count = 0U;
 8004876:	2300      	movs	r3, #0
 8004878:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800487a:	6923      	ldr	r3, [r4, #16]
 800487c:	f043 0301 	orr.w	r3, r3, #1
 8004880:	6123      	str	r3, [r4, #16]

  do
  {
    count++;
 8004882:	9b01      	ldr	r3, [sp, #4]
 8004884:	3301      	adds	r3, #1
 8004886:	9301      	str	r3, [sp, #4]

    if (count > HAL_USB_TIMEOUT)
 8004888:	9b01      	ldr	r3, [sp, #4]
 800488a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800488e:	d80f      	bhi.n	80048b0 <USB_CoreInit+0x66>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004890:	6920      	ldr	r0, [r4, #16]
 8004892:	f010 0001 	ands.w	r0, r0, #1
 8004896:	d1f4      	bne.n	8004882 <USB_CoreInit+0x38>
  if (cfg.battery_charging_enable == 0U)
 8004898:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800489c:	b953      	cbnz	r3, 80048b4 <USB_CoreInit+0x6a>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800489e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80048a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80048a4:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 80048a6:	b002      	add	sp, #8
 80048a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048ac:	b004      	add	sp, #16
 80048ae:	4770      	bx	lr
      return HAL_TIMEOUT;
 80048b0:	2003      	movs	r0, #3
 80048b2:	e7f1      	b.n	8004898 <USB_CoreInit+0x4e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80048b4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80048b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048ba:	e7f3      	b.n	80048a4 <USB_CoreInit+0x5a>

080048bc <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80048bc:	6883      	ldr	r3, [r0, #8]
 80048be:	f023 0301 	bic.w	r3, r3, #1
 80048c2:	6083      	str	r3, [r0, #8]
}
 80048c4:	2000      	movs	r0, #0
 80048c6:	4770      	bx	lr

080048c8 <USB_SetCurrentMode>:
{
 80048c8:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80048ca:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80048cc:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80048ce:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
{
 80048d2:	4605      	mov	r5, r0
 80048d4:	460c      	mov	r4, r1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80048d6:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80048d8:	d114      	bne.n	8004904 <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80048da:	68c3      	ldr	r3, [r0, #12]
 80048dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80048e0:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 80048e2:	2400      	movs	r4, #0
      HAL_Delay(10U);
 80048e4:	200a      	movs	r0, #10
 80048e6:	f7fc fd07 	bl	80012f8 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 80048ea:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80048ec:	07d9      	lsls	r1, r3, #31
      ms += 10U;
 80048ee:	f104 040a 	add.w	r4, r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80048f2:	d402      	bmi.n	80048fa <USB_SetCurrentMode+0x32>
 80048f4:	2cc8      	cmp	r4, #200	@ 0xc8
 80048f6:	d1f5      	bne.n	80048e4 <USB_SetCurrentMode+0x1c>
      ms += 10U;
 80048f8:	24c8      	movs	r4, #200	@ 0xc8
  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80048fa:	f1a4 03c8 	sub.w	r3, r4, #200	@ 0xc8
 80048fe:	4258      	negs	r0, r3
 8004900:	4158      	adcs	r0, r3
}
 8004902:	bd38      	pop	{r3, r4, r5, pc}
  else if (mode == USB_DEVICE_MODE)
 8004904:	b971      	cbnz	r1, 8004924 <USB_SetCurrentMode+0x5c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004906:	68c3      	ldr	r3, [r0, #12]
 8004908:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800490c:	60c3      	str	r3, [r0, #12]
      HAL_Delay(10U);
 800490e:	200a      	movs	r0, #10
 8004910:	f7fc fcf2 	bl	80012f8 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8004914:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004916:	07da      	lsls	r2, r3, #31
      ms += 10U;
 8004918:	f104 040a 	add.w	r4, r4, #10
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800491c:	d5ed      	bpl.n	80048fa <USB_SetCurrentMode+0x32>
 800491e:	2cc8      	cmp	r4, #200	@ 0xc8
 8004920:	d1f5      	bne.n	800490e <USB_SetCurrentMode+0x46>
 8004922:	e7e9      	b.n	80048f8 <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 8004924:	2001      	movs	r0, #1
 8004926:	e7ec      	b.n	8004902 <USB_SetCurrentMode+0x3a>

08004928 <USB_FlushTxFifo>:
{
 8004928:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800492a:	2300      	movs	r3, #0
{
 800492c:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 800492e:	9301      	str	r3, [sp, #4]
    count++;
 8004930:	9b01      	ldr	r3, [sp, #4]
 8004932:	3301      	adds	r3, #1
 8004934:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8004936:	9b01      	ldr	r3, [sp, #4]
 8004938:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800493c:	d815      	bhi.n	800496a <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800493e:	6913      	ldr	r3, [r2, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	daf5      	bge.n	8004930 <USB_FlushTxFifo+0x8>
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004944:	0189      	lsls	r1, r1, #6
  count = 0U;
 8004946:	2300      	movs	r3, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004948:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 800494c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800494e:	6111      	str	r1, [r2, #16]
    count++;
 8004950:	9b01      	ldr	r3, [sp, #4]
 8004952:	3301      	adds	r3, #1
 8004954:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8004956:	9b01      	ldr	r3, [sp, #4]
 8004958:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800495c:	d805      	bhi.n	800496a <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800495e:	6910      	ldr	r0, [r2, #16]
 8004960:	f010 0020 	ands.w	r0, r0, #32
 8004964:	d1f4      	bne.n	8004950 <USB_FlushTxFifo+0x28>
}
 8004966:	b002      	add	sp, #8
 8004968:	4770      	bx	lr
      return HAL_TIMEOUT;
 800496a:	2003      	movs	r0, #3
 800496c:	e7fb      	b.n	8004966 <USB_FlushTxFifo+0x3e>

0800496e <USB_FlushRxFifo>:
{
 800496e:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8004970:	2300      	movs	r3, #0
{
 8004972:	4602      	mov	r2, r0
  __IO uint32_t count = 0U;
 8004974:	9301      	str	r3, [sp, #4]
    count++;
 8004976:	9b01      	ldr	r3, [sp, #4]
 8004978:	3301      	adds	r3, #1
 800497a:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 800497c:	9b01      	ldr	r3, [sp, #4]
 800497e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004982:	d813      	bhi.n	80049ac <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004984:	6913      	ldr	r3, [r2, #16]
 8004986:	2b00      	cmp	r3, #0
 8004988:	daf5      	bge.n	8004976 <USB_FlushRxFifo+0x8>
  count = 0U;
 800498a:	2300      	movs	r3, #0
 800498c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800498e:	2310      	movs	r3, #16
 8004990:	6113      	str	r3, [r2, #16]
    count++;
 8004992:	9b01      	ldr	r3, [sp, #4]
 8004994:	3301      	adds	r3, #1
 8004996:	9301      	str	r3, [sp, #4]
    if (count > HAL_USB_TIMEOUT)
 8004998:	9b01      	ldr	r3, [sp, #4]
 800499a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800499e:	d805      	bhi.n	80049ac <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049a0:	6910      	ldr	r0, [r2, #16]
 80049a2:	f010 0010 	ands.w	r0, r0, #16
 80049a6:	d1f4      	bne.n	8004992 <USB_FlushRxFifo+0x24>
}
 80049a8:	b002      	add	sp, #8
 80049aa:	4770      	bx	lr
      return HAL_TIMEOUT;
 80049ac:	2003      	movs	r0, #3
 80049ae:	e7fb      	b.n	80049a8 <USB_FlushRxFifo+0x3a>

080049b0 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 80049b0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	@ 0x800
 80049b4:	4319      	orrs	r1, r3
 80049b6:	f8c0 1800 	str.w	r1, [r0, #2048]	@ 0x800
}
 80049ba:	2000      	movs	r0, #0
 80049bc:	4770      	bx	lr
	...

080049c0 <USB_DevInit>:
{
 80049c0:	b084      	sub	sp, #16
 80049c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049c6:	4604      	mov	r4, r0
 80049c8:	a809      	add	r0, sp, #36	@ 0x24
 80049ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 80049ce:	2300      	movs	r3, #0
 80049d0:	f89d 8024 	ldrb.w	r8, [sp, #36]	@ 0x24
 80049d4:	f89d 702e 	ldrb.w	r7, [sp, #46]	@ 0x2e
    USBx->DIEPTXF[i] = 0U;
 80049d8:	4619      	mov	r1, r3
 80049da:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80049de:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 80049e2:	3301      	adds	r3, #1
 80049e4:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 80049e6:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 80049e8:	d1f7      	bne.n	80049da <USB_DevInit+0x1a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049ea:	f504 6600 	add.w	r6, r4, #2048	@ 0x800
  if (cfg.vbus_sensing_enable == 0U)
 80049ee:	2f00      	cmp	r7, #0
 80049f0:	d161      	bne.n	8004ab6 <USB_DevInit+0xf6>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049f2:	6873      	ldr	r3, [r6, #4]
 80049f4:	f043 0302 	orr.w	r3, r3, #2
 80049f8:	6073      	str	r3, [r6, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80049fa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80049fc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004a00:	63a3      	str	r3, [r4, #56]	@ 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a08:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a10:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8004a12:	2500      	movs	r5, #0
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a14:	2103      	movs	r1, #3
  USBx_PCGCCTL = 0U;
 8004a16:	f8c4 5e00 	str.w	r5, [r4, #3584]	@ 0xe00
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	f7ff ffc8 	bl	80049b0 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a20:	2110      	movs	r1, #16
 8004a22:	4620      	mov	r0, r4
 8004a24:	f7ff ff80 	bl	8004928 <USB_FlushTxFifo>
 8004a28:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	f7ff ff9f 	bl	800496e <USB_FlushRxFifo>
 8004a30:	4308      	orrs	r0, r1
 8004a32:	b2c0      	uxtb	r0, r0
 8004a34:	1b40      	subs	r0, r0, r5
  USBx_DEVICE->DIEPMSK = 0U;
 8004a36:	6135      	str	r5, [r6, #16]
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a38:	bf18      	it	ne
 8004a3a:	2001      	movne	r0, #1
  USBx_DEVICE->DOEPMSK = 0U;
 8004a3c:	6175      	str	r5, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a3e:	f504 6310 	add.w	r3, r4, #2304	@ 0x900
 8004a42:	61f5      	str	r5, [r6, #28]
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a44:	462a      	mov	r2, r5
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a46:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a4a:	f04f 6c00 	mov.w	ip, #134217728	@ 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a4e:	f64f 3e7f 	movw	lr, #64383	@ 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a52:	45a8      	cmp	r8, r5
 8004a54:	d834      	bhi.n	8004ac0 <USB_DevInit+0x100>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a56:	2200      	movs	r2, #0
 8004a58:	f504 6330 	add.w	r3, r4, #2816	@ 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a5c:	4611      	mov	r1, r2
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a5e:	f04f 4590 	mov.w	r5, #1207959552	@ 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a62:	f04f 6c00 	mov.w	ip, #134217728	@ 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a66:	f64f 3e7f 	movw	lr, #64383	@ 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a6a:	4590      	cmp	r8, r2
 8004a6c:	d83a      	bhi.n	8004ae4 <USB_DevInit+0x124>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a6e:	6933      	ldr	r3, [r6, #16]
 8004a70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a74:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a7a:	f06f 4380 	mvn.w	r3, #1073741824	@ 0x40000000
 8004a7e:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a80:	69a3      	ldr	r3, [r4, #24]
 8004a82:	f043 0310 	orr.w	r3, r3, #16
 8004a86:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a88:	69a2      	ldr	r2, [r4, #24]
 8004a8a:	4b1f      	ldr	r3, [pc, #124]	@ (8004b08 <USB_DevInit+0x148>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8004a90:	f89d 302a 	ldrb.w	r3, [sp, #42]	@ 0x2a
 8004a94:	b11b      	cbz	r3, 8004a9e <USB_DevInit+0xde>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a96:	69a3      	ldr	r3, [r4, #24]
 8004a98:	f043 0308 	orr.w	r3, r3, #8
 8004a9c:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8004a9e:	2f01      	cmp	r7, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004aa0:	bf01      	itttt	eq
 8004aa2:	69a3      	ldreq	r3, [r4, #24]
 8004aa4:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 8004aa8:	f043 0304 	orreq.w	r3, r3, #4
 8004aac:	61a3      	streq	r3, [r4, #24]
}
 8004aae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ab2:	b004      	add	sp, #16
 8004ab4:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004ab6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004ab8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004abc:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004abe:	e7a8      	b.n	8004a12 <USB_DevInit+0x52>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ac0:	f8d3 9000 	ldr.w	r9, [r3]
 8004ac4:	f1b9 0f00 	cmp.w	r9, #0
 8004ac8:	da0a      	bge.n	8004ae0 <USB_DevInit+0x120>
      if (i == 0U)
 8004aca:	b93d      	cbnz	r5, 8004adc <USB_DevInit+0x11c>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004acc:	f8c3 c000 	str.w	ip, [r3]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004ad0:	611a      	str	r2, [r3, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ad2:	3501      	adds	r5, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ad4:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ad8:	3320      	adds	r3, #32
 8004ada:	e7ba      	b.n	8004a52 <USB_DevInit+0x92>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004adc:	6019      	str	r1, [r3, #0]
 8004ade:	e7f7      	b.n	8004ad0 <USB_DevInit+0x110>
      USBx_INEP(i)->DIEPCTL = 0U;
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	e7f5      	b.n	8004ad0 <USB_DevInit+0x110>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ae4:	f8d3 9000 	ldr.w	r9, [r3]
 8004ae8:	f1b9 0f00 	cmp.w	r9, #0
 8004aec:	da0a      	bge.n	8004b04 <USB_DevInit+0x144>
      if (i == 0U)
 8004aee:	b93a      	cbnz	r2, 8004b00 <USB_DevInit+0x140>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004af0:	f8c3 c000 	str.w	ip, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004af4:	6119      	str	r1, [r3, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004af6:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004af8:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004afc:	3320      	adds	r3, #32
 8004afe:	e7b4      	b.n	8004a6a <USB_DevInit+0xaa>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b00:	601d      	str	r5, [r3, #0]
 8004b02:	e7f7      	b.n	8004af4 <USB_DevInit+0x134>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b04:	6019      	str	r1, [r3, #0]
 8004b06:	e7f5      	b.n	8004af4 <USB_DevInit+0x134>
 8004b08:	803c3800 	.word	0x803c3800

08004b0c <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b0c:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	@ 0xe00
 8004b10:	f023 0303 	bic.w	r3, r3, #3
 8004b14:	f8c0 3e00 	str.w	r3, [r0, #3584]	@ 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b18:	f8d0 3804 	ldr.w	r3, [r0, #2052]	@ 0x804
 8004b1c:	f043 0302 	orr.w	r3, r3, #2
 8004b20:	f8c0 3804 	str.w	r3, [r0, #2052]	@ 0x804
}
 8004b24:	2000      	movs	r0, #0
 8004b26:	4770      	bx	lr

08004b28 <wait_for_synchronization_UART>:
/**
  * @brief  Attend la synchronisation UART.
  *         Attend de recevoir l’octet SYNCHRONISATION (0xAB) du PC et répond par ACKNOWLEDGE (0xCD).
  */
void wait_for_synchronization_UART(void)
{
 8004b28:	b507      	push	{r0, r1, r2, lr}
  uint8_t rx;
  while (1)
  {
    if (HAL_UART_Receive(&huart2, &rx, 1, TIMEOUT) == HAL_OK)
 8004b2a:	480e      	ldr	r0, [pc, #56]	@ (8004b64 <wait_for_synchronization_UART+0x3c>)
 8004b2c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b30:	2201      	movs	r2, #1
 8004b32:	f10d 0106 	add.w	r1, sp, #6
 8004b36:	f7ff f972 	bl	8003e1e <HAL_UART_Receive>
 8004b3a:	2800      	cmp	r0, #0
 8004b3c:	d1f5      	bne.n	8004b2a <wait_for_synchronization_UART+0x2>
    {
      if (rx == SYNCHRONISATION)
 8004b3e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004b42:	2bab      	cmp	r3, #171	@ 0xab
 8004b44:	d1f1      	bne.n	8004b2a <wait_for_synchronization_UART+0x2>
      {
        uint8_t ack = ACKNOWLEDGE;
 8004b46:	23cd      	movs	r3, #205	@ 0xcd
 8004b48:	f88d 3007 	strb.w	r3, [sp, #7]
        HAL_UART_Transmit(&huart2, &ack, 1, TIMEOUT);
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b52:	f10d 0107 	add.w	r1, sp, #7
 8004b56:	4803      	ldr	r0, [pc, #12]	@ (8004b64 <wait_for_synchronization_UART+0x3c>)
 8004b58:	f7ff f90c 	bl	8003d74 <HAL_UART_Transmit>
        // Lecture d'un éventuel octet supplémentaire si nécessaire (optionnel)
        break;
      }
    }
  }
}
 8004b5c:	b003      	add	sp, #12
 8004b5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b62:	bf00      	nop
 8004b64:	20000e58 	.word	0x20000e58

08004b68 <acquire_and_process_data>:
  * @brief  Acquiert les données d'entrée via UART et les copie dans le buffer d'entrée.
  * @param  data : pointeur vers le buffer d'entrée (ai_input[0].data)
  * @retval 0 si succès, 1 sinon.
  */
int acquire_and_process_data(ai_i8* data)
{
 8004b68:	b530      	push	{r4, r5, lr}
 8004b6a:	b087      	sub	sp, #28
  uint8_t tmp[INPUT_BUFFER_SIZE] = {0};
 8004b6c:	2214      	movs	r2, #20
 8004b6e:	2100      	movs	r1, #0
{
 8004b70:	4604      	mov	r4, r0
  uint8_t tmp[INPUT_BUFFER_SIZE] = {0};
 8004b72:	a801      	add	r0, sp, #4
 8004b74:	f002 faa6 	bl	80070c4 <memset>
  HAL_StatusTypeDef status = HAL_UART_Receive(&huart2, tmp, INPUT_BUFFER_SIZE, TIMEOUT);
 8004b78:	a901      	add	r1, sp, #4
 8004b7a:	480f      	ldr	r0, [pc, #60]	@ (8004bb8 <acquire_and_process_data+0x50>)
 8004b7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b80:	2214      	movs	r2, #20
 8004b82:	f7ff f94c 	bl	8003e1e <HAL_UART_Receive>
  if (status != HAL_OK)
 8004b86:	4601      	mov	r1, r0
 8004b88:	b128      	cbz	r0, 8004b96 <acquire_and_process_data+0x2e>
  {
    printf("Erreur de réception UART: %d\n", status);
 8004b8a:	480c      	ldr	r0, [pc, #48]	@ (8004bbc <acquire_and_process_data+0x54>)
 8004b8c:	f002 f952 	bl	8006e34 <iprintf>
    return 1;
 8004b90:	2001      	movs	r0, #1
  }
  // On suppose ici que les données reçues sont déjà au format attendu.
  memcpy(data, tmp, INPUT_BUFFER_SIZE);
  return 0;
}
 8004b92:	b007      	add	sp, #28
 8004b94:	bd30      	pop	{r4, r5, pc}
  memcpy(data, tmp, INPUT_BUFFER_SIZE);
 8004b96:	aa01      	add	r2, sp, #4
 8004b98:	4623      	mov	r3, r4
 8004b9a:	ad05      	add	r5, sp, #20
 8004b9c:	4614      	mov	r4, r2
 8004b9e:	cc03      	ldmia	r4!, {r0, r1}
 8004ba0:	42ac      	cmp	r4, r5
 8004ba2:	6018      	str	r0, [r3, #0]
 8004ba4:	6059      	str	r1, [r3, #4]
 8004ba6:	4622      	mov	r2, r4
 8004ba8:	f103 0308 	add.w	r3, r3, #8
 8004bac:	d1f6      	bne.n	8004b9c <acquire_and_process_data+0x34>
 8004bae:	6820      	ldr	r0, [r4, #0]
 8004bb0:	6018      	str	r0, [r3, #0]
  return 0;
 8004bb2:	2000      	movs	r0, #0
 8004bb4:	e7ed      	b.n	8004b92 <acquire_and_process_data+0x2a>
 8004bb6:	bf00      	nop
 8004bb8:	20000e58 	.word	0x20000e58
 8004bbc:	08007de0 	.word	0x08007de0

08004bc0 <post_process>:
  *         La sortie est supposée contenir CLASS_NUMBER valeurs float sur 4 octets.
  * @param  data : pointeur vers le buffer de sortie (ai_output[0].data)
  * @retval 0 si succès, 1 sinon.
  */
int post_process(ai_i8* data)
{
 8004bc0:	b507      	push	{r0, r1, r2, lr}
  uint8_t out_uint8[CLASS_NUMBER] = {0};
 8004bc2:	2300      	movs	r3, #0
    for (size_t j = 0; j < 4; j++)
    {
      temp[j] = ((uint8_t*)data)[i * 4 + j];
    }
    float val = *(float*)temp;
    out_uint8[i] = (uint8_t)(val * 255);
 8004bc4:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8004c10 <post_process+0x50>
  uint8_t out_uint8[CLASS_NUMBER] = {0};
 8004bc8:	9300      	str	r3, [sp, #0]
 8004bca:	f88d 3004 	strb.w	r3, [sp, #4]
  for (size_t i = 0; i < CLASS_NUMBER; i++)
 8004bce:	466a      	mov	r2, sp
 8004bd0:	f100 0114 	add.w	r1, r0, #20
      temp[j] = ((uint8_t*)data)[i * 4 + j];
 8004bd4:	f850 3b04 	ldr.w	r3, [r0], #4
 8004bd8:	ee07 3a90 	vmov	s15, r3
    out_uint8[i] = (uint8_t)(val * 255);
 8004bdc:	ee67 7a87 	vmul.f32	s15, s15, s14
  for (size_t i = 0; i < CLASS_NUMBER; i++)
 8004be0:	4288      	cmp	r0, r1
    out_uint8[i] = (uint8_t)(val * 255);
 8004be2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004be6:	ee17 3a90 	vmov	r3, s15
 8004bea:	f802 3b01 	strb.w	r3, [r2], #1
  for (size_t i = 0; i < CLASS_NUMBER; i++)
 8004bee:	d1f1      	bne.n	8004bd4 <post_process+0x14>
  }
  HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, out_uint8, CLASS_NUMBER, TIMEOUT);
 8004bf0:	4669      	mov	r1, sp
 8004bf2:	4808      	ldr	r0, [pc, #32]	@ (8004c14 <post_process+0x54>)
 8004bf4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004bf8:	2205      	movs	r2, #5
 8004bfa:	f7ff f8bb 	bl	8003d74 <HAL_UART_Transmit>
  if (status != HAL_OK)
 8004bfe:	4601      	mov	r1, r0
 8004c00:	b118      	cbz	r0, 8004c0a <post_process+0x4a>
  {
    printf("Erreur d'envoi UART: %d\n", status);
 8004c02:	4805      	ldr	r0, [pc, #20]	@ (8004c18 <post_process+0x58>)
 8004c04:	f002 f916 	bl	8006e34 <iprintf>
    return 1;
 8004c08:	2001      	movs	r0, #1
  }
  return 0;
}
 8004c0a:	b003      	add	sp, #12
 8004c0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c10:	437f0000 	.word	0x437f0000
 8004c14:	20000e58 	.word	0x20000e58
 8004c18:	08007dff 	.word	0x08007dff

08004c1c <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8004c1c:	b570      	push	{r4, r5, r6, lr}
  err = ai_network_create_and_init(&network, act_addr, NULL);
 8004c1e:	4c13      	ldr	r4, [pc, #76]	@ (8004c6c <MX_X_CUBE_AI_Init+0x50>)
  /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - Initialisation\r\n");
 8004c20:	4813      	ldr	r0, [pc, #76]	@ (8004c70 <MX_X_CUBE_AI_Init+0x54>)
 8004c22:	f002 f96f 	bl	8006f04 <puts>
  err = ai_network_create_and_init(&network, act_addr, NULL);
 8004c26:	4913      	ldr	r1, [pc, #76]	@ (8004c74 <MX_X_CUBE_AI_Init+0x58>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	4620      	mov	r0, r4
 8004c2c:	f000 f97c 	bl	8004f28 <ai_network_create_and_init>
  if (err.type != AI_ERROR_NONE) {
 8004c30:	f010 05ff 	ands.w	r5, r0, #255	@ 0xff
 8004c34:	d006      	beq.n	8004c44 <MX_X_CUBE_AI_Init+0x28>
    printf("TEMPLATE - Erreur (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8004c36:	0a03      	lsrs	r3, r0, #8
 8004c38:	490f      	ldr	r1, [pc, #60]	@ (8004c78 <MX_X_CUBE_AI_Init+0x5c>)
 8004c3a:	4810      	ldr	r0, [pc, #64]	@ (8004c7c <MX_X_CUBE_AI_Init+0x60>)
 8004c3c:	462a      	mov	r2, r5
 8004c3e:	f002 f8f9 	bl	8006e34 <iprintf>
  do {} while (1);
 8004c42:	e7fe      	b.n	8004c42 <MX_X_CUBE_AI_Init+0x26>
  ai_input = ai_network_inputs_get(network, NULL);
 8004c44:	4629      	mov	r1, r5
 8004c46:	6820      	ldr	r0, [r4, #0]
 8004c48:	4e0d      	ldr	r6, [pc, #52]	@ (8004c80 <MX_X_CUBE_AI_Init+0x64>)
 8004c4a:	f000 f86d 	bl	8004d28 <ai_network_inputs_get>
  ai_output = ai_network_outputs_get(network, NULL);
 8004c4e:	4629      	mov	r1, r5
  ai_input = ai_network_inputs_get(network, NULL);
 8004c50:	6030      	str	r0, [r6, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 8004c52:	6820      	ldr	r0, [r4, #0]
 8004c54:	f000 f872 	bl	8004d3c <ai_network_outputs_get>
 8004c58:	4b0a      	ldr	r3, [pc, #40]	@ (8004c84 <MX_X_CUBE_AI_Init+0x68>)
 8004c5a:	6018      	str	r0, [r3, #0]
    data_ins[idx] = ai_input[idx].data;
 8004c5c:	6833      	ldr	r3, [r6, #0]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	4b09      	ldr	r3, [pc, #36]	@ (8004c88 <MX_X_CUBE_AI_Init+0x6c>)
 8004c62:	601a      	str	r2, [r3, #0]
    data_outs[idx] = ai_output[idx].data;
 8004c64:	4b09      	ldr	r3, [pc, #36]	@ (8004c8c <MX_X_CUBE_AI_Init+0x70>)
 8004c66:	6842      	ldr	r2, [r0, #4]
 8004c68:	601a      	str	r2, [r3, #0]
  ai_boostrap(data_activations0);
  /* USER CODE END 5 */
}
 8004c6a:	bd70      	pop	{r4, r5, r6, pc}
 8004c6c:	200013dc 	.word	0x200013dc
 8004c70:	08007e18 	.word	0x08007e18
 8004c74:	2000000c 	.word	0x2000000c
 8004c78:	08007e35 	.word	0x08007e35
 8004c7c:	08007e50 	.word	0x08007e50
 8004c80:	200013d8 	.word	0x200013d8
 8004c84:	200013d4 	.word	0x200013d4
 8004c88:	20001de4 	.word	0x20001de4
 8004c8c:	20001de0 	.word	0x20001de0

08004c90 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8004c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE BEGIN 6 */
  int res = -1;
  uint8_t *in_data = (uint8_t*)ai_input[0].data;
 8004c94:	4d16      	ldr	r5, [pc, #88]	@ (8004cf0 <MX_X_CUBE_AI_Process+0x60>)
  uint8_t *out_data = (uint8_t*)ai_output[0].data;
 8004c96:	4e17      	ldr	r6, [pc, #92]	@ (8004cf4 <MX_X_CUBE_AI_Process+0x64>)
  uint8_t *in_data = (uint8_t*)ai_input[0].data;
 8004c98:	682b      	ldr	r3, [r5, #0]

  // Synchronisation UART : attend la requête du PC
  wait_for_synchronization_UART();

  if (network)
 8004c9a:	4c17      	ldr	r4, [pc, #92]	@ (8004cf8 <MX_X_CUBE_AI_Process+0x68>)
  uint8_t *in_data = (uint8_t*)ai_input[0].data;
 8004c9c:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint8_t *out_data = (uint8_t*)ai_output[0].data;
 8004ca0:	6833      	ldr	r3, [r6, #0]
 8004ca2:	685f      	ldr	r7, [r3, #4]
  wait_for_synchronization_UART();
 8004ca4:	f7ff ff40 	bl	8004b28 <wait_for_synchronization_UART>
  if (network)
 8004ca8:	6823      	ldr	r3, [r4, #0]
 8004caa:	b1cb      	cbz	r3, 8004ce0 <MX_X_CUBE_AI_Process+0x50>
  {
    do
    {
      // 1. Acquisition et prétraitement des données d'entrée
      res = acquire_and_process_data((ai_i8*)in_data);
 8004cac:	4640      	mov	r0, r8
 8004cae:	f7ff ff5b 	bl	8004b68 <acquire_and_process_data>

      // 2. Exécution de l'inférence
      if (res == 0)
 8004cb2:	b9a8      	cbnz	r0, 8004ce0 <MX_X_CUBE_AI_Process+0x50>
  batch = ai_network_run(network, ai_input, ai_output);
 8004cb4:	6832      	ldr	r2, [r6, #0]
 8004cb6:	6829      	ldr	r1, [r5, #0]
 8004cb8:	6820      	ldr	r0, [r4, #0]
 8004cba:	f000 f97f 	bl	8004fbc <ai_network_run>
  if (batch != 1) {
 8004cbe:	2801      	cmp	r0, #1
 8004cc0:	d009      	beq.n	8004cd6 <MX_X_CUBE_AI_Process+0x46>
    ai_log_err(ai_network_get_error(network), "ai_network_run");
 8004cc2:	6820      	ldr	r0, [r4, #0]
 8004cc4:	f000 f820 	bl	8004d08 <ai_network_get_error>
    printf("TEMPLATE - Erreur (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8004cc8:	490c      	ldr	r1, [pc, #48]	@ (8004cfc <MX_X_CUBE_AI_Process+0x6c>)
 8004cca:	0a03      	lsrs	r3, r0, #8
 8004ccc:	b2c2      	uxtb	r2, r0
 8004cce:	480c      	ldr	r0, [pc, #48]	@ (8004d00 <MX_X_CUBE_AI_Process+0x70>)
 8004cd0:	f002 f8b0 	bl	8006e34 <iprintf>
  do {} while (1);
 8004cd4:	e7fe      	b.n	8004cd4 <MX_X_CUBE_AI_Process+0x44>
        res = ai_run();

      // 3. Post-traitement et transmission des résultats
      if (res == 0)
        res = post_process((ai_i8*)out_data);
 8004cd6:	4638      	mov	r0, r7
 8004cd8:	f7ff ff72 	bl	8004bc0 <post_process>

    } while (res == 0);
 8004cdc:	2800      	cmp	r0, #0
 8004cde:	d0e5      	beq.n	8004cac <MX_X_CUBE_AI_Process+0x1c>
    printf("TEMPLATE - Erreur (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8004ce0:	4908      	ldr	r1, [pc, #32]	@ (8004d04 <MX_X_CUBE_AI_Process+0x74>)
 8004ce2:	4807      	ldr	r0, [pc, #28]	@ (8004d00 <MX_X_CUBE_AI_Process+0x70>)
 8004ce4:	2310      	movs	r3, #16
 8004ce6:	2211      	movs	r2, #17
 8004ce8:	f002 f8a4 	bl	8006e34 <iprintf>
  do {} while (1);
 8004cec:	e7fe      	b.n	8004cec <MX_X_CUBE_AI_Process+0x5c>
 8004cee:	bf00      	nop
 8004cf0:	200013d8 	.word	0x200013d8
 8004cf4:	200013d4 	.word	0x200013d4
 8004cf8:	200013dc 	.word	0x200013dc
 8004cfc:	08007e83 	.word	0x08007e83
 8004d00:	08007e50 	.word	0x08007e50
 8004d04:	08007e92 	.word	0x08007e92

08004d08 <ai_network_get_error>:


AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8004d08:	f000 ba8a 	b.w	8005220 <ai_platform_network_get_error>

08004d0c <ai_network_create>:


AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8004d0c:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8004d0e:	2305      	movs	r3, #5
 8004d10:	2200      	movs	r2, #0
 8004d12:	e9cd 3200 	strd	r3, r2, [sp]
 8004d16:	4a03      	ldr	r2, [pc, #12]	@ (8004d24 <ai_network_create+0x18>)
 8004d18:	2301      	movs	r3, #1
 8004d1a:	f000 fb7d 	bl	8005418 <ai_platform_network_create>
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8004d1e:	b003      	add	sp, #12
 8004d20:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d24:	20000010 	.word	0x20000010

08004d28 <ai_network_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8004d28:	b910      	cbnz	r0, 8004d30 <ai_network_inputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8004d2a:	4802      	ldr	r0, [pc, #8]	@ (8004d34 <ai_network_inputs_get+0xc>)
 8004d2c:	4b02      	ldr	r3, [pc, #8]	@ (8004d38 <ai_network_inputs_get+0x10>)
 8004d2e:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8004d30:	f000 ba88 	b.w	8005244 <ai_platform_inputs_get>
 8004d34:	20000010 	.word	0x20000010
 8004d38:	a1c00100 	.word	0xa1c00100

08004d3c <ai_network_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
  if (network == AI_HANDLE_NULL) {
 8004d3c:	b910      	cbnz	r0, 8004d44 <ai_network_outputs_get+0x8>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8004d3e:	4802      	ldr	r0, [pc, #8]	@ (8004d48 <ai_network_outputs_get+0xc>)
 8004d40:	4b02      	ldr	r3, [pc, #8]	@ (8004d4c <ai_network_outputs_get+0x10>)
 8004d42:	6003      	str	r3, [r0, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8004d44:	f000 baf4 	b.w	8005330 <ai_platform_outputs_get>
 8004d48:	20000010 	.word	0x20000010
 8004d4c:	a1c00100 	.word	0xa1c00100

08004d50 <ai_network_init>:


AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8004d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d54:	4606      	mov	r6, r0
 8004d56:	460f      	mov	r7, r1
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 8004d58:	f000 fba0 	bl	800549c <ai_platform_network_init>
  ai_bool ok = true;

  if (!net_ctx) return false;
 8004d5c:	4604      	mov	r4, r0
 8004d5e:	2800      	cmp	r0, #0
 8004d60:	f000 80a5 	beq.w	8004eae <ai_network_init+0x15e>
  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8004d64:	f8df 81b8 	ldr.w	r8, [pc, #440]	@ 8004f20 <ai_network_init+0x1d0>
 8004d68:	463a      	mov	r2, r7
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	4640      	mov	r0, r8
 8004d6e:	f000 f98d 	bl	800508c <ai_platform_get_weights_map>
 8004d72:	4605      	mov	r5, r0
 8004d74:	2800      	cmp	r0, #0
 8004d76:	f000 809c 	beq.w	8004eb2 <ai_network_init+0x162>
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8004d7a:	4a54      	ldr	r2, [pc, #336]	@ (8004ecc <ai_network_init+0x17c>)
 8004d7c:	6813      	ldr	r3, [r2, #0]
 8004d7e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d82:	6013      	str	r3, [r2, #0]
    gemm_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8004d84:	f8d8 3000 	ldr.w	r3, [r8]
    gemm_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8004d88:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8004d8c:	4a50      	ldr	r2, [pc, #320]	@ (8004ed0 <ai_network_init+0x180>)
 8004d8e:	6811      	ldr	r1, [r2, #0]
 8004d90:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004d94:	6011      	str	r1, [r2, #0]
    gemm_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 10240);
 8004d96:	f503 5120 	add.w	r1, r3, #10240	@ 0x2800
    gemm_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 10240);
 8004d9a:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004d9e:	4a4d      	ldr	r2, [pc, #308]	@ (8004ed4 <ai_network_init+0x184>)
 8004da0:	6811      	ldr	r1, [r2, #0]
 8004da2:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004da6:	6011      	str	r1, [r2, #0]
    gemm_1_weights_array.data = AI_PTR(g_network_weights_map[0] + 12288);
 8004da8:	f503 5140 	add.w	r1, r3, #12288	@ 0x3000
    gemm_1_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 12288);
 8004dac:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8004db0:	4a49      	ldr	r2, [pc, #292]	@ (8004ed8 <ai_network_init+0x188>)
 8004db2:	6811      	ldr	r1, [r2, #0]
    gemm_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 274432);
 8004db4:	f503 2086 	add.w	r0, r3, #274432	@ 0x43000
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8004db8:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004dbc:	6011      	str	r1, [r2, #0]
    gemm_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 274432);
 8004dbe:	e9c2 0002 	strd	r0, r0, [r2, #8]
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8004dc2:	4a46      	ldr	r2, [pc, #280]	@ (8004edc <ai_network_init+0x18c>)
 8004dc4:	6811      	ldr	r1, [r2, #0]
 8004dc6:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004dca:	6011      	str	r1, [r2, #0]
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8004dcc:	4944      	ldr	r1, [pc, #272]	@ (8004ee0 <ai_network_init+0x190>)
    gemm_2_weights_array.data = AI_PTR(g_network_weights_map[0] + 274944);
 8004dce:	f500 7000 	add.w	r0, r0, #512	@ 0x200
    gemm_2_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 274944);
 8004dd2:	e9c2 0002 	strd	r0, r0, [r2, #8]
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8004dd6:	680a      	ldr	r2, [r1, #0]
 8004dd8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004ddc:	600a      	str	r2, [r1, #0]
    gemm_2_bias_array.data = AI_PTR(g_network_weights_map[0] + 307712);
 8004dde:	f503 2296 	add.w	r2, r3, #307200	@ 0x4b000
 8004de2:	f502 7000 	add.w	r0, r2, #512	@ 0x200
    gemm_2_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 307712);
 8004de6:	e9c1 0002 	strd	r0, r0, [r1, #8]
    gemm_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8004dea:	493e      	ldr	r1, [pc, #248]	@ (8004ee4 <ai_network_init+0x194>)
    gemm_3_weights_array.data = AI_PTR(g_network_weights_map[0] + 307968);
 8004dec:	f502 7240 	add.w	r2, r2, #768	@ 0x300
    gemm_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8004df0:	6808      	ldr	r0, [r1, #0]
    gemm_3_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 307968);
 8004df2:	e9c1 2202 	strd	r2, r2, [r1, #8]
    gemm_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8004df6:	4a3c      	ldr	r2, [pc, #240]	@ (8004ee8 <ai_network_init+0x198>)
    gemm_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8004df8:	f040 4080 	orr.w	r0, r0, #1073741824	@ 0x40000000
 8004dfc:	6008      	str	r0, [r1, #0]
    gemm_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8004dfe:	6811      	ldr	r1, [r2, #0]
    gemm_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 316160);
 8004e00:	f503 239a 	add.w	r3, r3, #315392	@ 0x4d000
    gemm_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8004e04:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004e08:	6011      	str	r1, [r2, #0]
    gemm_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 316160);
 8004e0a:	f503 7140 	add.w	r1, r3, #768	@ 0x300
    gemm_3_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 316160);
 8004e0e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8004e12:	4a36      	ldr	r2, [pc, #216]	@ (8004eec <ai_network_init+0x19c>)
 8004e14:	6811      	ldr	r1, [r2, #0]
 8004e16:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004e1a:	6011      	str	r1, [r2, #0]
    gemm_4_weights_array.data = AI_PTR(g_network_weights_map[0] + 316288);
 8004e1c:	f503 7160 	add.w	r1, r3, #896	@ 0x380
    gemm_4_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 316288);
 8004e20:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8004e24:	4a32      	ldr	r2, [pc, #200]	@ (8004ef0 <ai_network_init+0x1a0>)
    gemm_4_bias_array.data = AI_PTR(g_network_weights_map[0] + 316928);
 8004e26:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
    gemm_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8004e2a:	6811      	ldr	r1, [r2, #0]
    gemm_4_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 316928);
 8004e2c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    gemm_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8004e30:	f041 4180 	orr.w	r1, r1, #1073741824	@ 0x40000000
 8004e34:	6011      	str	r1, [r2, #0]
  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8004e36:	f8df 80ec 	ldr.w	r8, [pc, #236]	@ 8004f24 <ai_network_init+0x1d4>
 8004e3a:	463a      	mov	r2, r7
 8004e3c:	2101      	movs	r1, #1
 8004e3e:	4640      	mov	r0, r8
 8004e40:	f000 f978 	bl	8005134 <ai_platform_get_activations_map>
 8004e44:	4607      	mov	r7, r0
 8004e46:	2800      	cmp	r0, #0
 8004e48:	d039      	beq.n	8004ebe <ai_network_init+0x16e>
    serving_default_keras_tensor_1200_output_array.data = AI_PTR(g_network_activations_map[0] + 492);
 8004e4a:	f8d8 3000 	ldr.w	r3, [r8]
 8004e4e:	4a29      	ldr	r2, [pc, #164]	@ (8004ef4 <ai_network_init+0x1a4>)
 8004e50:	f503 71f6 	add.w	r1, r3, #492	@ 0x1ec
    serving_default_keras_tensor_1200_output_array.data_start = AI_PTR(g_network_activations_map[0] + 492);
 8004e54:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_0_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 8004e58:	4927      	ldr	r1, [pc, #156]	@ (8004ef8 <ai_network_init+0x1a8>)
 8004e5a:	f503 7200 	add.w	r2, r3, #512	@ 0x200
    gemm_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 512);
 8004e5e:	e9c1 2202 	strd	r2, r2, [r1, #8]
    nl_0_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 8004e62:	4926      	ldr	r1, [pc, #152]	@ (8004efc <ai_network_init+0x1ac>)
    nl_0_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 512);
 8004e64:	e9c1 2202 	strd	r2, r2, [r1, #8]
    gemm_1_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8004e68:	4925      	ldr	r1, [pc, #148]	@ (8004f00 <ai_network_init+0x1b0>)
    gemm_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8004e6a:	e9c1 3302 	strd	r3, r3, [r1, #8]
    nl_1_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 512);
 8004e6e:	4925      	ldr	r1, [pc, #148]	@ (8004f04 <ai_network_init+0x1b4>)
    nl_1_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 512);
 8004e70:	e9c1 2202 	strd	r2, r2, [r1, #8]
    gemm_2_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8004e74:	4a24      	ldr	r2, [pc, #144]	@ (8004f08 <ai_network_init+0x1b8>)
    gemm_2_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8004e76:	e9c2 3302 	strd	r3, r3, [r2, #8]
    nl_2_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 256);
 8004e7a:	4a24      	ldr	r2, [pc, #144]	@ (8004f0c <ai_network_init+0x1bc>)
 8004e7c:	f503 7180 	add.w	r1, r3, #256	@ 0x100
    nl_2_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 256);
 8004e80:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_3_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8004e84:	4a22      	ldr	r2, [pc, #136]	@ (8004f10 <ai_network_init+0x1c0>)
    gemm_3_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8004e86:	e9c2 3302 	strd	r3, r3, [r2, #8]
    nl_3_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 128);
 8004e8a:	4a22      	ldr	r2, [pc, #136]	@ (8004f14 <ai_network_init+0x1c4>)
 8004e8c:	f103 0180 	add.w	r1, r3, #128	@ 0x80
    nl_3_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 128);
 8004e90:	e9c2 1102 	strd	r1, r1, [r2, #8]
    gemm_4_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8004e94:	4a20      	ldr	r2, [pc, #128]	@ (8004f18 <ai_network_init+0x1c8>)
    gemm_4_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8004e96:	e9c2 3302 	strd	r3, r3, [r2, #8]
    nl_5_output_array.data = AI_PTR(g_network_activations_map[0] + 20);
 8004e9a:	4a20      	ldr	r2, [pc, #128]	@ (8004f1c <ai_network_init+0x1cc>)
 8004e9c:	3314      	adds	r3, #20
    nl_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 20);
 8004e9e:	e9c2 3302 	strd	r3, r3, [r2, #8]
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8004ea2:	4630      	mov	r0, r6
 8004ea4:	f000 fbc8 	bl	8005638 <ai_platform_network_post_init>
 8004ea8:	4038      	ands	r0, r7
 8004eaa:	4005      	ands	r5, r0
 8004eac:	b2e8      	uxtb	r0, r5

  return ok;
}
 8004eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8004eb2:	2212      	movs	r2, #18
 8004eb4:	2130      	movs	r1, #48	@ 0x30
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	f000 f9be 	bl	8005238 <ai_platform_network_set_error>
  return false;
 8004ebc:	e7bb      	b.n	8004e36 <ai_network_init+0xe6>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8004ebe:	2213      	movs	r2, #19
 8004ec0:	2130      	movs	r1, #48	@ 0x30
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	f000 f9b8 	bl	8005238 <ai_platform_network_set_error>
  return false;
 8004ec8:	e7eb      	b.n	8004ea2 <ai_network_init+0x152>
 8004eca:	bf00      	nop
 8004ecc:	200009f0 	.word	0x200009f0
 8004ed0:	200009e0 	.word	0x200009e0
 8004ed4:	200009d0 	.word	0x200009d0
 8004ed8:	200009c0 	.word	0x200009c0
 8004edc:	200009b0 	.word	0x200009b0
 8004ee0:	200009a0 	.word	0x200009a0
 8004ee4:	20000990 	.word	0x20000990
 8004ee8:	20000980 	.word	0x20000980
 8004eec:	20000970 	.word	0x20000970
 8004ef0:	20000960 	.word	0x20000960
 8004ef4:	20000aa0 	.word	0x20000aa0
 8004ef8:	20000a90 	.word	0x20000a90
 8004efc:	20000a80 	.word	0x20000a80
 8004f00:	20000a70 	.word	0x20000a70
 8004f04:	20000a60 	.word	0x20000a60
 8004f08:	20000a50 	.word	0x20000a50
 8004f0c:	20000a40 	.word	0x20000a40
 8004f10:	20000a30 	.word	0x20000a30
 8004f14:	20000a20 	.word	0x20000a20
 8004f18:	20000a10 	.word	0x20000a10
 8004f1c:	20000a00 	.word	0x20000a00
 8004f20:	20001e8c 	.word	0x20001e8c
 8004f24:	20001e90 	.word	0x20001e90

08004f28 <ai_network_create_and_init>:
{
 8004f28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f2c:	4689      	mov	r9, r1
 8004f2e:	b08f      	sub	sp, #60	@ 0x3c
  err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8004f30:	2100      	movs	r1, #0
{
 8004f32:	4606      	mov	r6, r0
 8004f34:	4690      	mov	r8, r2
  err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8004f36:	f7ff fee9 	bl	8004d0c <ai_network_create>
  if (err.type != AI_ERROR_NONE) {
 8004f3a:	f010 07ff 	ands.w	r7, r0, #255	@ 0xff
  err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8004f3e:	4604      	mov	r4, r0
  if (err.type != AI_ERROR_NONE) {
 8004f40:	d107      	bne.n	8004f52 <ai_network_create_and_init+0x2a>
  if (ai_network_data_params_get(&params) != true) {
 8004f42:	4668      	mov	r0, sp
 8004f44:	f000 f83c 	bl	8004fc0 <ai_network_data_params_get>
 8004f48:	b9a0      	cbnz	r0, 8004f74 <ai_network_create_and_init+0x4c>
  return ai_platform_network_get_error(network);
 8004f4a:	6830      	ldr	r0, [r6, #0]
 8004f4c:	f000 f968 	bl	8005220 <ai_platform_network_get_error>
 8004f50:	4604      	mov	r4, r0
}
 8004f52:	4620      	mov	r0, r4
 8004f54:	b00f      	add	sp, #60	@ 0x3c
 8004f56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8004f5a:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
 8004f5e:	4629      	mov	r1, r5
 8004f60:	a803      	add	r0, sp, #12
 8004f62:	f000 f883 	bl	800506c <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8004f66:	3501      	adds	r5, #1
 8004f68:	b2ad      	uxth	r5, r5
 8004f6a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8004f6e:	42ab      	cmp	r3, r5
 8004f70:	d8f3      	bhi.n	8004f5a <ai_network_create_and_init+0x32>
 8004f72:	e002      	b.n	8004f7a <ai_network_create_and_init+0x52>
 8004f74:	f1b9 0f00 	cmp.w	r9, #0
 8004f78:	d10f      	bne.n	8004f9a <ai_network_create_and_init+0x72>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8004f7a:	f1b8 0f00 	cmp.w	r8, #0
 8004f7e:	d11b      	bne.n	8004fb8 <ai_network_create_and_init+0x90>
  if (ai_network_init(*network, &params) != true) {
 8004f80:	6830      	ldr	r0, [r6, #0]
 8004f82:	4669      	mov	r1, sp
 8004f84:	f7ff fee4 	bl	8004d50 <ai_network_init>
 8004f88:	b920      	cbnz	r0, 8004f94 <ai_network_create_and_init+0x6c>
  return ai_platform_network_get_error(network);
 8004f8a:	6830      	ldr	r0, [r6, #0]
 8004f8c:	f000 f948 	bl	8005220 <ai_platform_network_get_error>
 8004f90:	4604      	mov	r4, r0
 8004f92:	b2c7      	uxtb	r7, r0
  return err;
 8004f94:	f367 0407 	bfi	r4, r7, #0, #8
 8004f98:	e7db      	b.n	8004f52 <ai_network_create_and_init+0x2a>
 8004f9a:	463d      	mov	r5, r7
 8004f9c:	e7e5      	b.n	8004f6a <ai_network_create_and_init+0x42>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8004f9e:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 8004fa2:	4629      	mov	r1, r5
 8004fa4:	a801      	add	r0, sp, #4
 8004fa6:	f000 f861 	bl	800506c <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8004faa:	3501      	adds	r5, #1
 8004fac:	b2ad      	uxth	r5, r5
 8004fae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004fb2:	42ab      	cmp	r3, r5
 8004fb4:	d8f3      	bhi.n	8004f9e <ai_network_create_and_init+0x76>
 8004fb6:	e7e3      	b.n	8004f80 <ai_network_create_and_init+0x58>
 8004fb8:	2500      	movs	r5, #0
 8004fba:	e7f8      	b.n	8004fae <ai_network_create_and_init+0x86>

08004fbc <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8004fbc:	f000 bb6c 	b.w	8005698 <ai_platform_network_process>

08004fc0 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8004fc0:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 8004fc2:	4603      	mov	r3, r0
{
 8004fc4:	b085      	sub	sp, #20
  if (!params) return false;
 8004fc6:	b170      	cbz	r0, 8004fe6 <ai_network_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 8004fc8:	4c08      	ldr	r4, [pc, #32]	@ (8004fec <ai_network_data_params_get+0x2c>)
 8004fca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004fce:	466a      	mov	r2, sp
 8004fd0:	e882 0003 	stmia.w	r2, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8004fd4:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8004fd8:	ad02      	add	r5, sp, #8
 8004fda:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8004fde:	4629      	mov	r1, r5
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f000 f8fb 	bl	80051dc <ai_platform_bind_network_params>
}
 8004fe6:	b005      	add	sp, #20
 8004fe8:	bd30      	pop	{r4, r5, pc}
 8004fea:	bf00      	nop
 8004fec:	08007d60 	.word	0x08007d60

08004ff0 <ai_buffer_get_size>:
 8004ff0:	b378      	cbz	r0, 8005052 <ai_buffer_get_size+0x62>
 8004ff2:	b410      	push	{r4}
 8004ff4:	6803      	ldr	r3, [r0, #0]
 8004ff6:	4a17      	ldr	r2, [pc, #92]	@ (8005054 <ai_buffer_get_size+0x64>)
 8004ff8:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8004ffc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005000:	4293      	cmp	r3, r2
 8005002:	d01e      	beq.n	8005042 <ai_buffer_get_size+0x52>
 8005004:	6984      	ldr	r4, [r0, #24]
 8005006:	6862      	ldr	r2, [r4, #4]
 8005008:	7d03      	ldrb	r3, [r0, #20]
 800500a:	6941      	ldr	r1, [r0, #20]
 800500c:	f1a3 0301 	sub.w	r3, r3, #1
 8005010:	fab3 f383 	clz	r3, r3
 8005014:	095b      	lsrs	r3, r3, #5
 8005016:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800501a:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800501e:	da0b      	bge.n	8005038 <ai_buffer_get_size+0x48>
 8005020:	2b01      	cmp	r3, #1
 8005022:	d102      	bne.n	800502a <ai_buffer_get_size+0x3a>
 8005024:	2802      	cmp	r0, #2
 8005026:	d007      	beq.n	8005038 <ai_buffer_get_size+0x48>
 8005028:	2302      	movs	r3, #2
 800502a:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800502e:	3301      	adds	r3, #1
 8005030:	4298      	cmp	r0, r3
 8005032:	fb01 f202 	mul.w	r2, r1, r2
 8005036:	d1f3      	bne.n	8005020 <ai_buffer_get_size+0x30>
 8005038:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800503c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	2900      	cmp	r1, #0
 8005044:	d0de      	beq.n	8005004 <ai_buffer_get_size+0x14>
 8005046:	6984      	ldr	r4, [r0, #24]
 8005048:	6862      	ldr	r2, [r4, #4]
 800504a:	321f      	adds	r2, #31
 800504c:	f022 021f 	bic.w	r2, r2, #31
 8005050:	e7da      	b.n	8005008 <ai_buffer_get_size+0x18>
 8005052:	4770      	bx	lr
 8005054:	000400c0 	.word	0x000400c0

08005058 <ai_buffer_array_sane>:
 8005058:	b138      	cbz	r0, 800506a <ai_buffer_array_sane+0x12>
 800505a:	6843      	ldr	r3, [r0, #4]
 800505c:	b123      	cbz	r3, 8005068 <ai_buffer_array_sane+0x10>
 800505e:	8840      	ldrh	r0, [r0, #2]
 8005060:	3800      	subs	r0, #0
 8005062:	bf18      	it	ne
 8005064:	2001      	movne	r0, #1
 8005066:	4770      	bx	lr
 8005068:	4618      	mov	r0, r3
 800506a:	4770      	bx	lr

0800506c <ai_buffer_array_item_set_address>:
 800506c:	b150      	cbz	r0, 8005084 <ai_buffer_array_item_set_address+0x18>
 800506e:	6843      	ldr	r3, [r0, #4]
 8005070:	b14b      	cbz	r3, 8005086 <ai_buffer_array_item_set_address+0x1a>
 8005072:	8840      	ldrh	r0, [r0, #2]
 8005074:	b900      	cbnz	r0, 8005078 <ai_buffer_array_item_set_address+0xc>
 8005076:	4770      	bx	lr
 8005078:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800507c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005080:	2001      	movs	r0, #1
 8005082:	605a      	str	r2, [r3, #4]
 8005084:	4770      	bx	lr
 8005086:	4618      	mov	r0, r3
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop

0800508c <ai_platform_get_weights_map>:
 800508c:	2a00      	cmp	r2, #0
 800508e:	d037      	beq.n	8005100 <ai_platform_get_weights_map+0x74>
 8005090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005092:	4604      	mov	r4, r0
 8005094:	b1a0      	cbz	r0, 80050c0 <ai_platform_get_weights_map+0x34>
 8005096:	460f      	mov	r7, r1
 8005098:	b191      	cbz	r1, 80050c0 <ai_platform_get_weights_map+0x34>
 800509a:	4b25      	ldr	r3, [pc, #148]	@ (8005130 <ai_platform_get_weights_map+0xa4>)
 800509c:	6810      	ldr	r0, [r2, #0]
 800509e:	4298      	cmp	r0, r3
 80050a0:	4615      	mov	r5, r2
 80050a2:	d00f      	beq.n	80050c4 <ai_platform_get_weights_map+0x38>
 80050a4:	6855      	ldr	r5, [r2, #4]
 80050a6:	b15d      	cbz	r5, 80050c0 <ai_platform_get_weights_map+0x34>
 80050a8:	682e      	ldr	r6, [r5, #0]
 80050aa:	429e      	cmp	r6, r3
 80050ac:	d02a      	beq.n	8005104 <ai_platform_get_weights_map+0x78>
 80050ae:	f1a1 0001 	sub.w	r0, r1, #1
 80050b2:	6025      	str	r5, [r4, #0]
 80050b4:	fab0 f080 	clz	r0, r0
 80050b8:	0940      	lsrs	r0, r0, #5
 80050ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050bc:	42a7      	cmp	r7, r4
 80050be:	d034      	beq.n	800512a <ai_platform_get_weights_map+0x9e>
 80050c0:	2000      	movs	r0, #0
 80050c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050c4:	1d10      	adds	r0, r2, #4
 80050c6:	f7ff ffc7 	bl	8005058 <ai_buffer_array_sane>
 80050ca:	2800      	cmp	r0, #0
 80050cc:	d0f8      	beq.n	80050c0 <ai_platform_get_weights_map+0x34>
 80050ce:	88eb      	ldrh	r3, [r5, #6]
 80050d0:	429f      	cmp	r7, r3
 80050d2:	d1f5      	bne.n	80050c0 <ai_platform_get_weights_map+0x34>
 80050d4:	f04f 0c00 	mov.w	ip, #0
 80050d8:	1f20      	subs	r0, r4, #4
 80050da:	46e6      	mov	lr, ip
 80050dc:	68ab      	ldr	r3, [r5, #8]
 80050de:	4463      	add	r3, ip
 80050e0:	f10c 0c1c 	add.w	ip, ip, #28
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	b12b      	cbz	r3, 80050f4 <ai_platform_get_weights_map+0x68>
 80050e8:	f10e 0e01 	add.w	lr, lr, #1
 80050ec:	4577      	cmp	r7, lr
 80050ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80050f2:	d1f3      	bne.n	80050dc <ai_platform_get_weights_map+0x50>
 80050f4:	eba7 000e 	sub.w	r0, r7, lr
 80050f8:	fab0 f080 	clz	r0, r0
 80050fc:	0940      	lsrs	r0, r0, #5
 80050fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005100:	2000      	movs	r0, #0
 8005102:	4770      	bx	lr
 8005104:	1f20      	subs	r0, r4, #4
 8005106:	462a      	mov	r2, r5
 8005108:	2400      	movs	r4, #0
 800510a:	e000      	b.n	800510e <ai_platform_get_weights_map+0x82>
 800510c:	461c      	mov	r4, r3
 800510e:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8005112:	42b3      	cmp	r3, r6
 8005114:	d0d2      	beq.n	80050bc <ai_platform_get_weights_map+0x30>
 8005116:	f840 3f04 	str.w	r3, [r0, #4]!
 800511a:	1c63      	adds	r3, r4, #1
 800511c:	429f      	cmp	r7, r3
 800511e:	d1f5      	bne.n	800510c <ai_platform_get_weights_map+0x80>
 8005120:	3402      	adds	r4, #2
 8005122:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8005126:	42b3      	cmp	r3, r6
 8005128:	d1ca      	bne.n	80050c0 <ai_platform_get_weights_map+0x34>
 800512a:	2001      	movs	r0, #1
 800512c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800512e:	bf00      	nop
 8005130:	a1facade 	.word	0xa1facade

08005134 <ai_platform_get_activations_map>:
 8005134:	2a00      	cmp	r2, #0
 8005136:	d038      	beq.n	80051aa <ai_platform_get_activations_map+0x76>
 8005138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513a:	4604      	mov	r4, r0
 800513c:	b1a0      	cbz	r0, 8005168 <ai_platform_get_activations_map+0x34>
 800513e:	460f      	mov	r7, r1
 8005140:	b191      	cbz	r1, 8005168 <ai_platform_get_activations_map+0x34>
 8005142:	4b25      	ldr	r3, [pc, #148]	@ (80051d8 <ai_platform_get_activations_map+0xa4>)
 8005144:	6810      	ldr	r0, [r2, #0]
 8005146:	4298      	cmp	r0, r3
 8005148:	4615      	mov	r5, r2
 800514a:	d00f      	beq.n	800516c <ai_platform_get_activations_map+0x38>
 800514c:	6a15      	ldr	r5, [r2, #32]
 800514e:	b15d      	cbz	r5, 8005168 <ai_platform_get_activations_map+0x34>
 8005150:	682e      	ldr	r6, [r5, #0]
 8005152:	429e      	cmp	r6, r3
 8005154:	d02b      	beq.n	80051ae <ai_platform_get_activations_map+0x7a>
 8005156:	f1a1 0001 	sub.w	r0, r1, #1
 800515a:	6025      	str	r5, [r4, #0]
 800515c:	fab0 f080 	clz	r0, r0
 8005160:	0940      	lsrs	r0, r0, #5
 8005162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005164:	42a7      	cmp	r7, r4
 8005166:	d035      	beq.n	80051d4 <ai_platform_get_activations_map+0xa0>
 8005168:	2000      	movs	r0, #0
 800516a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800516c:	f102 000c 	add.w	r0, r2, #12
 8005170:	f7ff ff72 	bl	8005058 <ai_buffer_array_sane>
 8005174:	2800      	cmp	r0, #0
 8005176:	d0f7      	beq.n	8005168 <ai_platform_get_activations_map+0x34>
 8005178:	89eb      	ldrh	r3, [r5, #14]
 800517a:	429f      	cmp	r7, r3
 800517c:	d1f4      	bne.n	8005168 <ai_platform_get_activations_map+0x34>
 800517e:	f04f 0c00 	mov.w	ip, #0
 8005182:	1f20      	subs	r0, r4, #4
 8005184:	46e6      	mov	lr, ip
 8005186:	692b      	ldr	r3, [r5, #16]
 8005188:	4463      	add	r3, ip
 800518a:	f10c 0c1c 	add.w	ip, ip, #28
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	b12b      	cbz	r3, 800519e <ai_platform_get_activations_map+0x6a>
 8005192:	f10e 0e01 	add.w	lr, lr, #1
 8005196:	4577      	cmp	r7, lr
 8005198:	f840 3f04 	str.w	r3, [r0, #4]!
 800519c:	d1f3      	bne.n	8005186 <ai_platform_get_activations_map+0x52>
 800519e:	eba7 000e 	sub.w	r0, r7, lr
 80051a2:	fab0 f080 	clz	r0, r0
 80051a6:	0940      	lsrs	r0, r0, #5
 80051a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051aa:	2000      	movs	r0, #0
 80051ac:	4770      	bx	lr
 80051ae:	1f20      	subs	r0, r4, #4
 80051b0:	462a      	mov	r2, r5
 80051b2:	2400      	movs	r4, #0
 80051b4:	e000      	b.n	80051b8 <ai_platform_get_activations_map+0x84>
 80051b6:	461c      	mov	r4, r3
 80051b8:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80051bc:	42b3      	cmp	r3, r6
 80051be:	d0d1      	beq.n	8005164 <ai_platform_get_activations_map+0x30>
 80051c0:	f840 3f04 	str.w	r3, [r0, #4]!
 80051c4:	1c63      	adds	r3, r4, #1
 80051c6:	429f      	cmp	r7, r3
 80051c8:	d1f5      	bne.n	80051b6 <ai_platform_get_activations_map+0x82>
 80051ca:	3402      	adds	r4, #2
 80051cc:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80051d0:	42b3      	cmp	r3, r6
 80051d2:	d1c9      	bne.n	8005168 <ai_platform_get_activations_map+0x34>
 80051d4:	2001      	movs	r0, #1
 80051d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051d8:	a1facade 	.word	0xa1facade

080051dc <ai_platform_bind_network_params>:
 80051dc:	b1a0      	cbz	r0, 8005208 <ai_platform_bind_network_params+0x2c>
 80051de:	b1b1      	cbz	r1, 800520e <ai_platform_bind_network_params+0x32>
 80051e0:	b1c2      	cbz	r2, 8005214 <ai_platform_bind_network_params+0x38>
 80051e2:	b410      	push	{r4}
 80051e4:	4603      	mov	r3, r0
 80051e6:	4c0d      	ldr	r4, [pc, #52]	@ (800521c <ai_platform_bind_network_params+0x40>)
 80051e8:	f843 4b04 	str.w	r4, [r3], #4
 80051ec:	f100 0c0c 	add.w	ip, r0, #12
 80051f0:	c903      	ldmia	r1, {r0, r1}
 80051f2:	e883 0003 	stmia.w	r3, {r0, r1}
 80051f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80051fa:	e88c 0003 	stmia.w	ip, {r0, r1}
 80051fe:	2301      	movs	r3, #1
 8005200:	4618      	mov	r0, r3
 8005202:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	4603      	mov	r3, r0
 800520a:	4618      	mov	r0, r3
 800520c:	4770      	bx	lr
 800520e:	460b      	mov	r3, r1
 8005210:	4618      	mov	r0, r3
 8005212:	4770      	bx	lr
 8005214:	4613      	mov	r3, r2
 8005216:	4618      	mov	r0, r3
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	a1facade 	.word	0xa1facade

08005220 <ai_platform_network_get_error>:
 8005220:	4b04      	ldr	r3, [pc, #16]	@ (8005234 <ai_platform_network_get_error+0x14>)
 8005222:	6802      	ldr	r2, [r0, #0]
 8005224:	4393      	bics	r3, r2
 8005226:	d102      	bne.n	800522e <ai_platform_network_get_error+0xe>
 8005228:	300c      	adds	r0, #12
 800522a:	f000 bc77 	b.w	8005b1c <core_get_error>
 800522e:	f241 0010 	movw	r0, #4112	@ 0x1010
 8005232:	4770      	bx	lr
 8005234:	a1c00100 	.word	0xa1c00100

08005238 <ai_platform_network_set_error>:
 8005238:	b110      	cbz	r0, 8005240 <ai_platform_network_set_error+0x8>
 800523a:	300c      	adds	r0, #12
 800523c:	f000 bc74 	b.w	8005b28 <core_set_error>
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop

08005244 <ai_platform_inputs_get>:
 8005244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005248:	4b38      	ldr	r3, [pc, #224]	@ (800532c <ai_platform_inputs_get+0xe8>)
 800524a:	6802      	ldr	r2, [r0, #0]
 800524c:	b085      	sub	sp, #20
 800524e:	4393      	bics	r3, r2
 8005250:	9003      	str	r0, [sp, #12]
 8005252:	9102      	str	r1, [sp, #8]
 8005254:	d160      	bne.n	8005318 <ai_platform_inputs_get+0xd4>
 8005256:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8005258:	2b00      	cmp	r3, #0
 800525a:	d04f      	beq.n	80052fc <ai_platform_inputs_get+0xb8>
 800525c:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 8005260:	f1ba 0f00 	cmp.w	sl, #0
 8005264:	d04a      	beq.n	80052fc <ai_platform_inputs_get+0xb8>
 8005266:	f04f 0b00 	mov.w	fp, #0
 800526a:	465d      	mov	r5, fp
 800526c:	e016      	b.n	800529c <ai_platform_inputs_get+0x58>
 800526e:	9901      	ldr	r1, [sp, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	507a      	str	r2, [r7, r1]
 8005274:	69b1      	ldr	r1, [r6, #24]
 8005276:	684e      	ldr	r6, [r1, #4]
 8005278:	60a3      	str	r3, [r4, #8]
 800527a:	f04f 0201 	mov.w	r2, #1
 800527e:	7522      	strb	r2, [r4, #20]
 8005280:	6961      	ldr	r1, [r4, #20]
 8005282:	6020      	str	r0, [r4, #0]
 8005284:	f369 211f 	bfi	r1, r9, #8, #24
 8005288:	2300      	movs	r3, #0
 800528a:	e9c4 3603 	strd	r3, r6, [r4, #12]
 800528e:	e9c4 1805 	strd	r1, r8, [r4, #20]
 8005292:	f8c4 c004 	str.w	ip, [r4, #4]
 8005296:	3501      	adds	r5, #1
 8005298:	f10b 0b1c 	add.w	fp, fp, #28
 800529c:	f8ba 3000 	ldrh.w	r3, [sl]
 80052a0:	42ab      	cmp	r3, r5
 80052a2:	b2aa      	uxth	r2, r5
 80052a4:	d93c      	bls.n	8005320 <ai_platform_inputs_get+0xdc>
 80052a6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80052aa:	00e9      	lsls	r1, r5, #3
 80052ac:	9101      	str	r1, [sp, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d036      	beq.n	8005320 <ai_platform_inputs_get+0xdc>
 80052b2:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80052b6:	2e00      	cmp	r6, #0
 80052b8:	d032      	beq.n	8005320 <ai_platform_inputs_get+0xdc>
 80052ba:	f8da 3008 	ldr.w	r3, [sl, #8]
 80052be:	69b2      	ldr	r2, [r6, #24]
 80052c0:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80052c4:	6810      	ldr	r0, [r2, #0]
 80052c6:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80052ca:	68b3      	ldr	r3, [r6, #8]
 80052cc:	f3c3 2917 	ubfx	r9, r3, #8, #24
 80052d0:	f001 fba0 	bl	8006a14 <ai_array_to_buffer_fmt>
 80052d4:	69b1      	ldr	r1, [r6, #24]
 80052d6:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 80052da:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80052de:	445c      	add	r4, fp
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d0c8      	beq.n	8005276 <ai_platform_inputs_get+0x32>
 80052e4:	2100      	movs	r1, #0
 80052e6:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80052ea:	6831      	ldr	r1, [r6, #0]
 80052ec:	6059      	str	r1, [r3, #4]
 80052ee:	b111      	cbz	r1, 80052f6 <ai_platform_inputs_get+0xb2>
 80052f0:	8849      	ldrh	r1, [r1, #2]
 80052f2:	2900      	cmp	r1, #0
 80052f4:	d1bb      	bne.n	800526e <ai_platform_inputs_get+0x2a>
 80052f6:	69b1      	ldr	r1, [r6, #24]
 80052f8:	2300      	movs	r3, #0
 80052fa:	e7bc      	b.n	8005276 <ai_platform_inputs_get+0x32>
 80052fc:	9803      	ldr	r0, [sp, #12]
 80052fe:	2218      	movs	r2, #24
 8005300:	2111      	movs	r1, #17
 8005302:	300c      	adds	r0, #12
 8005304:	f000 fc10 	bl	8005b28 <core_set_error>
 8005308:	2200      	movs	r2, #0
 800530a:	4610      	mov	r0, r2
 800530c:	9b02      	ldr	r3, [sp, #8]
 800530e:	b103      	cbz	r3, 8005312 <ai_platform_inputs_get+0xce>
 8005310:	801a      	strh	r2, [r3, #0]
 8005312:	b005      	add	sp, #20
 8005314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005318:	2000      	movs	r0, #0
 800531a:	b005      	add	sp, #20
 800531c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005320:	2a00      	cmp	r2, #0
 8005322:	d0eb      	beq.n	80052fc <ai_platform_inputs_get+0xb8>
 8005324:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005328:	6858      	ldr	r0, [r3, #4]
 800532a:	e7ef      	b.n	800530c <ai_platform_inputs_get+0xc8>
 800532c:	a1c00100 	.word	0xa1c00100

08005330 <ai_platform_outputs_get>:
 8005330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005334:	4b37      	ldr	r3, [pc, #220]	@ (8005414 <ai_platform_outputs_get+0xe4>)
 8005336:	6802      	ldr	r2, [r0, #0]
 8005338:	b085      	sub	sp, #20
 800533a:	4393      	bics	r3, r2
 800533c:	9003      	str	r0, [sp, #12]
 800533e:	9102      	str	r1, [sp, #8]
 8005340:	d15d      	bne.n	80053fe <ai_platform_outputs_get+0xce>
 8005342:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8005344:	2b01      	cmp	r3, #1
 8005346:	d94c      	bls.n	80053e2 <ai_platform_outputs_get+0xb2>
 8005348:	f04f 0b00 	mov.w	fp, #0
 800534c:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 8005350:	465d      	mov	r5, fp
 8005352:	46d8      	mov	r8, fp
 8005354:	e016      	b.n	8005384 <ai_platform_outputs_get+0x54>
 8005356:	9a01      	ldr	r2, [sp, #4]
 8005358:	2101      	movs	r1, #1
 800535a:	50b9      	str	r1, [r7, r2]
 800535c:	69b2      	ldr	r2, [r6, #24]
 800535e:	6856      	ldr	r6, [r2, #4]
 8005360:	6020      	str	r0, [r4, #0]
 8005362:	f04f 0201 	mov.w	r2, #1
 8005366:	7522      	strb	r2, [r4, #20]
 8005368:	6960      	ldr	r0, [r4, #20]
 800536a:	f8c4 c004 	str.w	ip, [r4, #4]
 800536e:	f369 201f 	bfi	r0, r9, #8, #24
 8005372:	e9c4 6004 	strd	r6, r0, [r4, #16]
 8005376:	e9c4 3802 	strd	r3, r8, [r4, #8]
 800537a:	9b00      	ldr	r3, [sp, #0]
 800537c:	61a3      	str	r3, [r4, #24]
 800537e:	3501      	adds	r5, #1
 8005380:	f10b 0b1c 	add.w	fp, fp, #28
 8005384:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8005388:	42ab      	cmp	r3, r5
 800538a:	b2aa      	uxth	r2, r5
 800538c:	d93b      	bls.n	8005406 <ai_platform_outputs_get+0xd6>
 800538e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8005392:	00e9      	lsls	r1, r5, #3
 8005394:	9101      	str	r1, [sp, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d035      	beq.n	8005406 <ai_platform_outputs_get+0xd6>
 800539a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800539e:	2e00      	cmp	r6, #0
 80053a0:	d031      	beq.n	8005406 <ai_platform_outputs_get+0xd6>
 80053a2:	f8da 3014 	ldr.w	r3, [sl, #20]
 80053a6:	69b2      	ldr	r2, [r6, #24]
 80053a8:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80053ac:	68b3      	ldr	r3, [r6, #8]
 80053ae:	6810      	ldr	r0, [r2, #0]
 80053b0:	f3c3 2917 	ubfx	r9, r3, #8, #24
 80053b4:	68f3      	ldr	r3, [r6, #12]
 80053b6:	9300      	str	r3, [sp, #0]
 80053b8:	f001 fb2c 	bl	8006a14 <ai_array_to_buffer_fmt>
 80053bc:	69b2      	ldr	r2, [r6, #24]
 80053be:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 80053c2:	f8d2 c008 	ldr.w	ip, [r2, #8]
 80053c6:	445c      	add	r4, fp
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d0c8      	beq.n	800535e <ai_platform_outputs_get+0x2e>
 80053cc:	f847 8035 	str.w	r8, [r7, r5, lsl #3]
 80053d0:	6832      	ldr	r2, [r6, #0]
 80053d2:	605a      	str	r2, [r3, #4]
 80053d4:	b112      	cbz	r2, 80053dc <ai_platform_outputs_get+0xac>
 80053d6:	8852      	ldrh	r2, [r2, #2]
 80053d8:	2a00      	cmp	r2, #0
 80053da:	d1bc      	bne.n	8005356 <ai_platform_outputs_get+0x26>
 80053dc:	69b2      	ldr	r2, [r6, #24]
 80053de:	2300      	movs	r3, #0
 80053e0:	e7bd      	b.n	800535e <ai_platform_outputs_get+0x2e>
 80053e2:	9803      	ldr	r0, [sp, #12]
 80053e4:	2218      	movs	r2, #24
 80053e6:	2111      	movs	r1, #17
 80053e8:	300c      	adds	r0, #12
 80053ea:	f000 fb9d 	bl	8005b28 <core_set_error>
 80053ee:	2200      	movs	r2, #0
 80053f0:	4610      	mov	r0, r2
 80053f2:	9b02      	ldr	r3, [sp, #8]
 80053f4:	b103      	cbz	r3, 80053f8 <ai_platform_outputs_get+0xc8>
 80053f6:	801a      	strh	r2, [r3, #0]
 80053f8:	b005      	add	sp, #20
 80053fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053fe:	2000      	movs	r0, #0
 8005400:	b005      	add	sp, #20
 8005402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005406:	2a00      	cmp	r2, #0
 8005408:	d0eb      	beq.n	80053e2 <ai_platform_outputs_get+0xb2>
 800540a:	f8da 3014 	ldr.w	r3, [sl, #20]
 800540e:	6858      	ldr	r0, [r3, #4]
 8005410:	e7ef      	b.n	80053f2 <ai_platform_outputs_get+0xc2>
 8005412:	bf00      	nop
 8005414:	a1c00100 	.word	0xa1c00100

08005418 <ai_platform_network_create>:
 8005418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800541c:	b083      	sub	sp, #12
 800541e:	f89d 9028 	ldrb.w	r9, [sp, #40]	@ 0x28
 8005422:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8005426:	b320      	cbz	r0, 8005472 <ai_platform_network_create+0x5a>
 8005428:	6002      	str	r2, [r0, #0]
 800542a:	4616      	mov	r6, r2
 800542c:	461f      	mov	r7, r3
 800542e:	4604      	mov	r4, r0
 8005430:	f000 fb72 	bl	8005b18 <core_init>
 8005434:	b970      	cbnz	r0, 8005454 <ai_platform_network_create+0x3c>
 8005436:	2530      	movs	r5, #48	@ 0x30
 8005438:	2300      	movs	r3, #0
 800543a:	6023      	str	r3, [r4, #0]
 800543c:	2410      	movs	r4, #16
 800543e:	4642      	mov	r2, r8
 8005440:	4649      	mov	r1, r9
 8005442:	4638      	mov	r0, r7
 8005444:	f001 fb68 	bl	8006b18 <ai_version_get>
 8005448:	60b0      	str	r0, [r6, #8]
 800544a:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800544e:	b003      	add	sp, #12
 8005450:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005454:	2200      	movs	r2, #0
 8005456:	4649      	mov	r1, r9
 8005458:	4638      	mov	r0, r7
 800545a:	f001 fb5d 	bl	8006b18 <ai_version_get>
 800545e:	2200      	movs	r2, #0
 8005460:	4605      	mov	r5, r0
 8005462:	2105      	movs	r1, #5
 8005464:	2001      	movs	r0, #1
 8005466:	f001 fb57 	bl	8006b18 <ai_version_get>
 800546a:	4285      	cmp	r5, r0
 800546c:	d008      	beq.n	8005480 <ai_platform_network_create+0x68>
 800546e:	2501      	movs	r5, #1
 8005470:	e7e2      	b.n	8005438 <ai_platform_network_create+0x20>
 8005472:	2510      	movs	r5, #16
 8005474:	462c      	mov	r4, r5
 8005476:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800547a:	b003      	add	sp, #12
 800547c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005480:	4b05      	ldr	r3, [pc, #20]	@ (8005498 <ai_platform_network_create+0x80>)
 8005482:	9301      	str	r3, [sp, #4]
 8005484:	a801      	add	r0, sp, #4
 8005486:	f000 fb5b 	bl	8005b40 <ai_check_custom_types>
 800548a:	b110      	cbz	r0, 8005492 <ai_platform_network_create+0x7a>
 800548c:	2400      	movs	r4, #0
 800548e:	4625      	mov	r5, r4
 8005490:	e7d5      	b.n	800543e <ai_platform_network_create+0x26>
 8005492:	2502      	movs	r5, #2
 8005494:	e7d0      	b.n	8005438 <ai_platform_network_create+0x20>
 8005496:	bf00      	nop
 8005498:	84048403 	.word	0x84048403

0800549c <ai_platform_network_init>:
 800549c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a0:	4b63      	ldr	r3, [pc, #396]	@ (8005630 <ai_platform_network_init+0x194>)
 80054a2:	6802      	ldr	r2, [r0, #0]
 80054a4:	4393      	bics	r3, r2
 80054a6:	b083      	sub	sp, #12
 80054a8:	d156      	bne.n	8005558 <ai_platform_network_init+0xbc>
 80054aa:	4604      	mov	r4, r0
 80054ac:	460f      	mov	r7, r1
 80054ae:	2900      	cmp	r1, #0
 80054b0:	f000 80a9 	beq.w	8005606 <ai_platform_network_init+0x16a>
 80054b4:	680b      	ldr	r3, [r1, #0]
 80054b6:	495f      	ldr	r1, [pc, #380]	@ (8005634 <ai_platform_network_init+0x198>)
 80054b8:	428b      	cmp	r3, r1
 80054ba:	d113      	bne.n	80054e4 <ai_platform_network_init+0x48>
 80054bc:	495c      	ldr	r1, [pc, #368]	@ (8005630 <ai_platform_network_init+0x194>)
 80054be:	89bd      	ldrh	r5, [r7, #12]
 80054c0:	f8b7 a00e 	ldrh.w	sl, [r7, #14]
 80054c4:	f8d7 8010 	ldr.w	r8, [r7, #16]
 80054c8:	f8b7 b004 	ldrh.w	fp, [r7, #4]
 80054cc:	f8b7 9006 	ldrh.w	r9, [r7, #6]
 80054d0:	68be      	ldr	r6, [r7, #8]
 80054d2:	428a      	cmp	r2, r1
 80054d4:	d02c      	beq.n	8005530 <ai_platform_network_init+0x94>
 80054d6:	2303      	movs	r3, #3
 80054d8:	6123      	str	r3, [r4, #16]
 80054da:	4627      	mov	r7, r4
 80054dc:	4638      	mov	r0, r7
 80054de:	b003      	add	sp, #12
 80054e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054e4:	2101      	movs	r1, #1
 80054e6:	4638      	mov	r0, r7
 80054e8:	9301      	str	r3, [sp, #4]
 80054ea:	f8d7 b004 	ldr.w	fp, [r7, #4]
 80054ee:	f7ff fd7f 	bl	8004ff0 <ai_buffer_get_size>
 80054f2:	f107 081c 	add.w	r8, r7, #28
 80054f6:	4605      	mov	r5, r0
 80054f8:	2101      	movs	r1, #1
 80054fa:	4640      	mov	r0, r8
 80054fc:	463e      	mov	r6, r7
 80054fe:	6a3f      	ldr	r7, [r7, #32]
 8005500:	f7ff fd76 	bl	8004ff0 <ai_buffer_get_size>
 8005504:	2d00      	cmp	r5, #0
 8005506:	9b01      	ldr	r3, [sp, #4]
 8005508:	bf0a      	itet	eq
 800550a:	46a9      	moveq	r9, r5
 800550c:	f04f 0901 	movne.w	r9, #1
 8005510:	462e      	moveq	r6, r5
 8005512:	b330      	cbz	r0, 8005562 <ai_platform_network_init+0xc6>
 8005514:	2f00      	cmp	r7, #0
 8005516:	f000 8084 	beq.w	8005622 <ai_platform_network_init+0x186>
 800551a:	f04f 0a01 	mov.w	sl, #1
 800551e:	f1bb 0f00 	cmp.w	fp, #0
 8005522:	d021      	beq.n	8005568 <ai_platform_network_init+0xcc>
 8005524:	2500      	movs	r5, #0
 8005526:	6822      	ldr	r2, [r4, #0]
 8005528:	4941      	ldr	r1, [pc, #260]	@ (8005630 <ai_platform_network_init+0x194>)
 800552a:	428a      	cmp	r2, r1
 800552c:	46ab      	mov	fp, r5
 800552e:	d1d2      	bne.n	80054d6 <ai_platform_network_init+0x3a>
 8005530:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
 8005532:	454a      	cmp	r2, r9
 8005534:	4a3f      	ldr	r2, [pc, #252]	@ (8005634 <ai_platform_network_init+0x198>)
 8005536:	d221      	bcs.n	800557c <ai_platform_network_init+0xe0>
 8005538:	4293      	cmp	r3, r2
 800553a:	d15c      	bne.n	80055f6 <ai_platform_network_init+0x15a>
 800553c:	6266      	str	r6, [r4, #36]	@ 0x24
 800553e:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 8005542:	f8a4 b020 	strh.w	fp, [r4, #32]
 8005546:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
 800554a:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
 800554e:	8525      	strh	r5, [r4, #40]	@ 0x28
 8005550:	4620      	mov	r0, r4
 8005552:	f000 fb1f 	bl	8005b94 <ai_layers_init_all>
 8005556:	e7be      	b.n	80054d6 <ai_platform_network_init+0x3a>
 8005558:	2700      	movs	r7, #0
 800555a:	4638      	mov	r0, r7
 800555c:	b003      	add	sp, #12
 800555e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005562:	4680      	mov	r8, r0
 8005564:	4682      	mov	sl, r0
 8005566:	e7da      	b.n	800551e <ai_platform_network_init+0x82>
 8005568:	2d00      	cmp	r5, #0
 800556a:	d0dc      	beq.n	8005526 <ai_platform_network_init+0x8a>
 800556c:	2212      	movs	r2, #18
 800556e:	2110      	movs	r1, #16
 8005570:	f104 000c 	add.w	r0, r4, #12
 8005574:	f000 fad8 	bl	8005b28 <core_set_error>
 8005578:	465f      	mov	r7, fp
 800557a:	e7af      	b.n	80054dc <ai_platform_network_init+0x40>
 800557c:	4293      	cmp	r3, r2
 800557e:	d0dd      	beq.n	800553c <ai_platform_network_init+0xa0>
 8005580:	f1b9 0f00 	cmp.w	r9, #0
 8005584:	d018      	beq.n	80055b8 <ai_platform_network_init+0x11c>
 8005586:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005590:	2700      	movs	r7, #0
 8005592:	4699      	mov	r9, r3
 8005594:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005596:	eb06 0e07 	add.w	lr, r6, r7
 800559a:	eb03 0c07 	add.w	ip, r3, r7
 800559e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80055a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80055a6:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80055aa:	371c      	adds	r7, #28
 80055ac:	45b9      	cmp	r9, r7
 80055ae:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80055b2:	d1ef      	bne.n	8005594 <ai_platform_network_init+0xf8>
 80055b4:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80055b8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80055ba:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 80055be:	4553      	cmp	r3, sl
 80055c0:	f8a4 b020 	strh.w	fp, [r4, #32]
 80055c4:	d325      	bcc.n	8005612 <ai_platform_network_init+0x176>
 80055c6:	f1ba 0f00 	cmp.w	sl, #0
 80055ca:	d0be      	beq.n	800554a <ai_platform_network_init+0xae>
 80055cc:	ebca 0eca 	rsb	lr, sl, sl, lsl #3
 80055d0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80055d4:	f04f 0c00 	mov.w	ip, #0
 80055d8:	eb08 070c 	add.w	r7, r8, ip
 80055dc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80055de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80055e0:	4466      	add	r6, ip
 80055e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80055e4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80055e8:	f10c 0c1c 	add.w	ip, ip, #28
 80055ec:	45f4      	cmp	ip, lr
 80055ee:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80055f2:	d1f1      	bne.n	80055d8 <ai_platform_network_init+0x13c>
 80055f4:	e7a9      	b.n	800554a <ai_platform_network_init+0xae>
 80055f6:	2212      	movs	r2, #18
 80055f8:	2116      	movs	r1, #22
 80055fa:	f104 000c 	add.w	r0, r4, #12
 80055fe:	f000 fa93 	bl	8005b28 <core_set_error>
 8005602:	2700      	movs	r7, #0
 8005604:	e76a      	b.n	80054dc <ai_platform_network_init+0x40>
 8005606:	2211      	movs	r2, #17
 8005608:	2110      	movs	r1, #16
 800560a:	300c      	adds	r0, #12
 800560c:	f000 fa8c 	bl	8005b28 <core_set_error>
 8005610:	e764      	b.n	80054dc <ai_platform_network_init+0x40>
 8005612:	2213      	movs	r2, #19
 8005614:	2116      	movs	r1, #22
 8005616:	f104 000c 	add.w	r0, r4, #12
 800561a:	f000 fa85 	bl	8005b28 <core_set_error>
 800561e:	2700      	movs	r7, #0
 8005620:	e75c      	b.n	80054dc <ai_platform_network_init+0x40>
 8005622:	2213      	movs	r2, #19
 8005624:	2110      	movs	r1, #16
 8005626:	f104 000c 	add.w	r0, r4, #12
 800562a:	f000 fa7d 	bl	8005b28 <core_set_error>
 800562e:	e755      	b.n	80054dc <ai_platform_network_init+0x40>
 8005630:	a1c00100 	.word	0xa1c00100
 8005634:	a1facade 	.word	0xa1facade

08005638 <ai_platform_network_post_init>:
 8005638:	b538      	push	{r3, r4, r5, lr}
 800563a:	4b16      	ldr	r3, [pc, #88]	@ (8005694 <ai_platform_network_post_init+0x5c>)
 800563c:	6802      	ldr	r2, [r0, #0]
 800563e:	ea02 0103 	and.w	r1, r2, r3
 8005642:	4393      	bics	r3, r2
 8005644:	d108      	bne.n	8005658 <ai_platform_network_post_init+0x20>
 8005646:	6903      	ldr	r3, [r0, #16]
 8005648:	f013 0502 	ands.w	r5, r3, #2
 800564c:	4604      	mov	r4, r0
 800564e:	d005      	beq.n	800565c <ai_platform_network_post_init+0x24>
 8005650:	428a      	cmp	r2, r1
 8005652:	d00a      	beq.n	800566a <ai_platform_network_post_init+0x32>
 8005654:	2001      	movs	r0, #1
 8005656:	bd38      	pop	{r3, r4, r5, pc}
 8005658:	2000      	movs	r0, #0
 800565a:	bd38      	pop	{r3, r4, r5, pc}
 800565c:	2210      	movs	r2, #16
 800565e:	2111      	movs	r1, #17
 8005660:	300c      	adds	r0, #12
 8005662:	f000 fa61 	bl	8005b28 <core_set_error>
 8005666:	4628      	mov	r0, r5
 8005668:	bd38      	pop	{r3, r4, r5, pc}
 800566a:	f000 faa1 	bl	8005bb0 <ai_layers_post_init_all>
 800566e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005670:	2b00      	cmp	r3, #0
 8005672:	d0ef      	beq.n	8005654 <ai_platform_network_post_init+0x1c>
 8005674:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8005676:	e008      	b.n	800568a <ai_platform_network_post_init+0x52>
 8005678:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 800567c:	4798      	blx	r3
 800567e:	692b      	ldr	r3, [r5, #16]
 8005680:	42ab      	cmp	r3, r5
 8005682:	d0e7      	beq.n	8005654 <ai_platform_network_post_init+0x1c>
 8005684:	2b00      	cmp	r3, #0
 8005686:	d0e5      	beq.n	8005654 <ai_platform_network_post_init+0x1c>
 8005688:	461d      	mov	r5, r3
 800568a:	4629      	mov	r1, r5
 800568c:	2000      	movs	r0, #0
 800568e:	2d00      	cmp	r5, #0
 8005690:	d1f2      	bne.n	8005678 <ai_platform_network_post_init+0x40>
 8005692:	e7df      	b.n	8005654 <ai_platform_network_post_init+0x1c>
 8005694:	a1c00100 	.word	0xa1c00100

08005698 <ai_platform_network_process>:
 8005698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800569c:	4bb5      	ldr	r3, [pc, #724]	@ (8005974 <ai_platform_network_process+0x2dc>)
 800569e:	4605      	mov	r5, r0
 80056a0:	6800      	ldr	r0, [r0, #0]
 80056a2:	b085      	sub	sp, #20
 80056a4:	4383      	bics	r3, r0
 80056a6:	9202      	str	r2, [sp, #8]
 80056a8:	f040 8140 	bne.w	800592c <ai_platform_network_process+0x294>
 80056ac:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f000 8125 	beq.w	80058fe <ai_platform_network_process+0x266>
 80056b4:	692b      	ldr	r3, [r5, #16]
 80056b6:	f8d5 a034 	ldr.w	sl, [r5, #52]	@ 0x34
 80056ba:	f003 0303 	and.w	r3, r3, #3
 80056be:	2700      	movs	r7, #0
 80056c0:	2b03      	cmp	r3, #3
 80056c2:	61af      	str	r7, [r5, #24]
 80056c4:	f040 8137 	bne.w	8005936 <ai_platform_network_process+0x29e>
 80056c8:	2900      	cmp	r1, #0
 80056ca:	f000 811e 	beq.w	800590a <ai_platform_network_process+0x272>
 80056ce:	f1ba 0f00 	cmp.w	sl, #0
 80056d2:	f000 811a 	beq.w	800590a <ai_platform_network_process+0x272>
 80056d6:	f8ba 3000 	ldrh.w	r3, [sl]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 8115 	beq.w	800590a <ai_platform_network_process+0x272>
 80056e0:	698b      	ldr	r3, [r1, #24]
 80056e2:	9503      	str	r5, [sp, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	9301      	str	r3, [sp, #4]
 80056e8:	460e      	mov	r6, r1
 80056ea:	f8da 3004 	ldr.w	r3, [sl, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d072      	beq.n	80057d8 <ai_platform_network_process+0x140>
 80056f2:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 80056f6:	2c00      	cmp	r4, #0
 80056f8:	d06e      	beq.n	80057d8 <ai_platform_network_process+0x140>
 80056fa:	f8da 3008 	ldr.w	r3, [sl, #8]
 80056fe:	f8d3 9000 	ldr.w	r9, [r3]
 8005702:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8005706:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800570a:	f000 81d3 	beq.w	8005ab4 <ai_platform_network_process+0x41c>
 800570e:	69a3      	ldr	r3, [r4, #24]
 8005710:	2101      	movs	r1, #1
 8005712:	4630      	mov	r0, r6
 8005714:	685d      	ldr	r5, [r3, #4]
 8005716:	f7ff fc6b 	bl	8004ff0 <ai_buffer_get_size>
 800571a:	4285      	cmp	r5, r0
 800571c:	f0c0 8116 	bcc.w	800594c <ai_platform_network_process+0x2b4>
 8005720:	68e0      	ldr	r0, [r4, #12]
 8005722:	69b1      	ldr	r1, [r6, #24]
 8005724:	68c2      	ldr	r2, [r0, #12]
 8005726:	68cb      	ldr	r3, [r1, #12]
 8005728:	429a      	cmp	r2, r3
 800572a:	f040 810f 	bne.w	800594c <ai_platform_network_process+0x2b4>
 800572e:	6882      	ldr	r2, [r0, #8]
 8005730:	688b      	ldr	r3, [r1, #8]
 8005732:	429a      	cmp	r2, r3
 8005734:	f040 810a 	bne.w	800594c <ai_platform_network_process+0x2b4>
 8005738:	6842      	ldr	r2, [r0, #4]
 800573a:	684b      	ldr	r3, [r1, #4]
 800573c:	429a      	cmp	r2, r3
 800573e:	f040 8105 	bne.w	800594c <ai_platform_network_process+0x2b4>
 8005742:	69a3      	ldr	r3, [r4, #24]
 8005744:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005748:	f001 f9d4 	bl	8006af4 <ai_array_get_data_byte_size>
 800574c:	4605      	mov	r5, r0
 800574e:	4620      	mov	r0, r4
 8005750:	f001 f9e8 	bl	8006b24 <get_tensor_byte_size>
 8005754:	4285      	cmp	r5, r0
 8005756:	f0c0 80f9 	bcc.w	800594c <ai_platform_network_process+0x2b4>
 800575a:	69a3      	ldr	r3, [r4, #24]
 800575c:	6818      	ldr	r0, [r3, #0]
 800575e:	f001 f959 	bl	8006a14 <ai_array_to_buffer_fmt>
 8005762:	6833      	ldr	r3, [r6, #0]
 8005764:	4058      	eors	r0, r3
 8005766:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 800576a:	f040 81a5 	bne.w	8005ab8 <ai_platform_network_process+0x420>
 800576e:	6873      	ldr	r3, [r6, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 819f 	beq.w	8005ab4 <ai_platform_network_process+0x41c>
 8005776:	69b3      	ldr	r3, [r6, #24]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	f000 81a5 	beq.w	8005aca <ai_platform_network_process+0x432>
 8005780:	9a01      	ldr	r2, [sp, #4]
 8005782:	429a      	cmp	r2, r3
 8005784:	bf38      	it	cc
 8005786:	461a      	movcc	r2, r3
 8005788:	4620      	mov	r0, r4
 800578a:	9201      	str	r2, [sp, #4]
 800578c:	f001 f9ca 	bl	8006b24 <get_tensor_byte_size>
 8005790:	f8c8 0008 	str.w	r0, [r8, #8]
 8005794:	69b3      	ldr	r3, [r6, #24]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	fb00 f303 	mul.w	r3, r0, r3
 800579c:	f8c8 300c 	str.w	r3, [r8, #12]
 80057a0:	6871      	ldr	r1, [r6, #4]
 80057a2:	f8c8 1004 	str.w	r1, [r8, #4]
 80057a6:	440b      	add	r3, r1
 80057a8:	f849 300b 	str.w	r3, [r9, fp]
 80057ac:	69a0      	ldr	r0, [r4, #24]
 80057ae:	6803      	ldr	r3, [r0, #0]
 80057b0:	009a      	lsls	r2, r3, #2
 80057b2:	f107 0701 	add.w	r7, r7, #1
 80057b6:	f106 061c 	add.w	r6, r6, #28
 80057ba:	f100 80b1 	bmi.w	8005920 <ai_platform_network_process+0x288>
 80057be:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80057c2:	1a9b      	subs	r3, r3, r2
 80057c4:	4419      	add	r1, r3
 80057c6:	6081      	str	r1, [r0, #8]
 80057c8:	69a3      	ldr	r3, [r4, #24]
 80057ca:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80057ce:	60da      	str	r2, [r3, #12]
 80057d0:	f8ba 3000 	ldrh.w	r3, [sl]
 80057d4:	42bb      	cmp	r3, r7
 80057d6:	d888      	bhi.n	80056ea <ai_platform_network_process+0x52>
 80057d8:	9d03      	ldr	r5, [sp, #12]
 80057da:	9b02      	ldr	r3, [sp, #8]
 80057dc:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f000 817c 	beq.w	8005adc <ai_platform_network_process+0x444>
 80057e4:	2a01      	cmp	r2, #1
 80057e6:	f240 80bd 	bls.w	8005964 <ai_platform_network_process+0x2cc>
 80057ea:	f8d5 8034 	ldr.w	r8, [r5, #52]	@ 0x34
 80057ee:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f000 80b6 	beq.w	8005964 <ai_platform_network_process+0x2cc>
 80057f8:	f8dd b008 	ldr.w	fp, [sp, #8]
 80057fc:	2700      	movs	r7, #0
 80057fe:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 80bd 	beq.w	8005982 <ai_platform_network_process+0x2ea>
 8005808:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 800580c:	2e00      	cmp	r6, #0
 800580e:	f000 80b8 	beq.w	8005982 <ai_platform_network_process+0x2ea>
 8005812:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005816:	681c      	ldr	r4, [r3, #0]
 8005818:	eb14 1907 	adds.w	r9, r4, r7, lsl #4
 800581c:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8005820:	f000 8160 	beq.w	8005ae4 <ai_platform_network_process+0x44c>
 8005824:	69b3      	ldr	r3, [r6, #24]
 8005826:	2101      	movs	r1, #1
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	9302      	str	r3, [sp, #8]
 800582c:	4658      	mov	r0, fp
 800582e:	f7ff fbdf 	bl	8004ff0 <ai_buffer_get_size>
 8005832:	9b02      	ldr	r3, [sp, #8]
 8005834:	4283      	cmp	r3, r0
 8005836:	f0c0 8095 	bcc.w	8005964 <ai_platform_network_process+0x2cc>
 800583a:	68f0      	ldr	r0, [r6, #12]
 800583c:	f8db 1018 	ldr.w	r1, [fp, #24]
 8005840:	68c2      	ldr	r2, [r0, #12]
 8005842:	68cb      	ldr	r3, [r1, #12]
 8005844:	429a      	cmp	r2, r3
 8005846:	f040 808d 	bne.w	8005964 <ai_platform_network_process+0x2cc>
 800584a:	6882      	ldr	r2, [r0, #8]
 800584c:	688b      	ldr	r3, [r1, #8]
 800584e:	429a      	cmp	r2, r3
 8005850:	f040 8088 	bne.w	8005964 <ai_platform_network_process+0x2cc>
 8005854:	6842      	ldr	r2, [r0, #4]
 8005856:	684b      	ldr	r3, [r1, #4]
 8005858:	429a      	cmp	r2, r3
 800585a:	f040 8083 	bne.w	8005964 <ai_platform_network_process+0x2cc>
 800585e:	69b3      	ldr	r3, [r6, #24]
 8005860:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005864:	f001 f946 	bl	8006af4 <ai_array_get_data_byte_size>
 8005868:	9002      	str	r0, [sp, #8]
 800586a:	4630      	mov	r0, r6
 800586c:	f001 f95a 	bl	8006b24 <get_tensor_byte_size>
 8005870:	9b02      	ldr	r3, [sp, #8]
 8005872:	4283      	cmp	r3, r0
 8005874:	d376      	bcc.n	8005964 <ai_platform_network_process+0x2cc>
 8005876:	69b3      	ldr	r3, [r6, #24]
 8005878:	6818      	ldr	r0, [r3, #0]
 800587a:	f001 f8cb 	bl	8006a14 <ai_array_to_buffer_fmt>
 800587e:	f8db 3000 	ldr.w	r3, [fp]
 8005882:	4058      	eors	r0, r3
 8005884:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8005888:	f040 8134 	bne.w	8005af4 <ai_platform_network_process+0x45c>
 800588c:	f8db 3004 	ldr.w	r3, [fp, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	f000 8127 	beq.w	8005ae4 <ai_platform_network_process+0x44c>
 8005896:	f8db 3018 	ldr.w	r3, [fp, #24]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	f000 8133 	beq.w	8005b08 <ai_platform_network_process+0x470>
 80058a2:	9a01      	ldr	r2, [sp, #4]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	bf38      	it	cc
 80058a8:	461a      	movcc	r2, r3
 80058aa:	4630      	mov	r0, r6
 80058ac:	9201      	str	r2, [sp, #4]
 80058ae:	f001 f939 	bl	8006b24 <get_tensor_byte_size>
 80058b2:	f8c9 0008 	str.w	r0, [r9, #8]
 80058b6:	f8db 3018 	ldr.w	r3, [fp, #24]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	fb00 f303 	mul.w	r3, r0, r3
 80058c0:	f8c9 300c 	str.w	r3, [r9, #12]
 80058c4:	f8db 1004 	ldr.w	r1, [fp, #4]
 80058c8:	f8c9 1004 	str.w	r1, [r9, #4]
 80058cc:	440b      	add	r3, r1
 80058ce:	f844 300a 	str.w	r3, [r4, sl]
 80058d2:	69b0      	ldr	r0, [r6, #24]
 80058d4:	6803      	ldr	r3, [r0, #0]
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	f107 0701 	add.w	r7, r7, #1
 80058dc:	f10b 0b1c 	add.w	fp, fp, #28
 80058e0:	d44a      	bmi.n	8005978 <ai_platform_network_process+0x2e0>
 80058e2:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80058e6:	1a9b      	subs	r3, r3, r2
 80058e8:	4419      	add	r1, r3
 80058ea:	6081      	str	r1, [r0, #8]
 80058ec:	69b3      	ldr	r3, [r6, #24]
 80058ee:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80058f2:	60da      	str	r2, [r3, #12]
 80058f4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80058f8:	42bb      	cmp	r3, r7
 80058fa:	d880      	bhi.n	80057fe <ai_platform_network_process+0x166>
 80058fc:	e041      	b.n	8005982 <ai_platform_network_process+0x2ea>
 80058fe:	692a      	ldr	r2, [r5, #16]
 8005900:	61ab      	str	r3, [r5, #24]
 8005902:	f002 0203 	and.w	r2, r2, #3
 8005906:	2a03      	cmp	r2, #3
 8005908:	d115      	bne.n	8005936 <ai_platform_network_process+0x29e>
 800590a:	2217      	movs	r2, #23
 800590c:	2112      	movs	r1, #18
 800590e:	f105 000c 	add.w	r0, r5, #12
 8005912:	f000 f909 	bl	8005b28 <core_set_error>
 8005916:	2400      	movs	r4, #0
 8005918:	4620      	mov	r0, r4
 800591a:	b005      	add	sp, #20
 800591c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005920:	f8ba 3000 	ldrh.w	r3, [sl]
 8005924:	429f      	cmp	r7, r3
 8005926:	f4ff aee0 	bcc.w	80056ea <ai_platform_network_process+0x52>
 800592a:	e755      	b.n	80057d8 <ai_platform_network_process+0x140>
 800592c:	2400      	movs	r4, #0
 800592e:	4620      	mov	r0, r4
 8005930:	b005      	add	sp, #20
 8005932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005936:	2230      	movs	r2, #48	@ 0x30
 8005938:	2111      	movs	r1, #17
 800593a:	f105 000c 	add.w	r0, r5, #12
 800593e:	f000 f8f3 	bl	8005b28 <core_set_error>
 8005942:	2400      	movs	r4, #0
 8005944:	4620      	mov	r0, r4
 8005946:	b005      	add	sp, #20
 8005948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800594c:	9d03      	ldr	r5, [sp, #12]
 800594e:	2218      	movs	r2, #24
 8005950:	2112      	movs	r1, #18
 8005952:	f105 000c 	add.w	r0, r5, #12
 8005956:	f000 f8e7 	bl	8005b28 <core_set_error>
 800595a:	2400      	movs	r4, #0
 800595c:	4620      	mov	r0, r4
 800595e:	b005      	add	sp, #20
 8005960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005964:	2218      	movs	r2, #24
 8005966:	2113      	movs	r1, #19
 8005968:	f105 000c 	add.w	r0, r5, #12
 800596c:	f000 f8dc 	bl	8005b28 <core_set_error>
 8005970:	2400      	movs	r4, #0
 8005972:	e7d1      	b.n	8005918 <ai_platform_network_process+0x280>
 8005974:	a1c00100 	.word	0xa1c00100
 8005978:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800597c:	429f      	cmp	r7, r3
 800597e:	f4ff af3e 	bcc.w	80057fe <ai_platform_network_process+0x166>
 8005982:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005986:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8005988:	832b      	strh	r3, [r5, #24]
 800598a:	2a00      	cmp	r2, #0
 800598c:	f040 808c 	bne.w	8005aa8 <ai_platform_network_process+0x410>
 8005990:	4616      	mov	r6, r2
 8005992:	4617      	mov	r7, r2
 8005994:	8b6c      	ldrh	r4, [r5, #26]
 8005996:	429c      	cmp	r4, r3
 8005998:	bf38      	it	cc
 800599a:	46ab      	movcc	fp, r5
 800599c:	d2bc      	bcs.n	8005918 <ai_platform_network_process+0x280>
 800599e:	2e00      	cmp	r6, #0
 80059a0:	d030      	beq.n	8005a04 <ai_platform_network_process+0x36c>
 80059a2:	f04f 0800 	mov.w	r8, #0
 80059a6:	e014      	b.n	80059d2 <ai_platform_network_process+0x33a>
 80059a8:	6882      	ldr	r2, [r0, #8]
 80059aa:	68c5      	ldr	r5, [r0, #12]
 80059ac:	6863      	ldr	r3, [r4, #4]
 80059ae:	1b52      	subs	r2, r2, r5
 80059b0:	4413      	add	r3, r2
 80059b2:	6083      	str	r3, [r0, #8]
 80059b4:	698b      	ldr	r3, [r1, #24]
 80059b6:	6862      	ldr	r2, [r4, #4]
 80059b8:	60da      	str	r2, [r3, #12]
 80059ba:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80059be:	f859 200a 	ldr.w	r2, [r9, sl]
 80059c2:	440b      	add	r3, r1
 80059c4:	4293      	cmp	r3, r2
 80059c6:	bf24      	itt	cs
 80059c8:	68e3      	ldrcs	r3, [r4, #12]
 80059ca:	1ad3      	subcs	r3, r2, r3
 80059cc:	6063      	str	r3, [r4, #4]
 80059ce:	f108 0801 	add.w	r8, r8, #1
 80059d2:	8833      	ldrh	r3, [r6, #0]
 80059d4:	4543      	cmp	r3, r8
 80059d6:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 80059da:	d913      	bls.n	8005a04 <ai_platform_network_process+0x36c>
 80059dc:	6873      	ldr	r3, [r6, #4]
 80059de:	b18b      	cbz	r3, 8005a04 <ai_platform_network_process+0x36c>
 80059e0:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 80059e4:	b171      	cbz	r1, 8005a04 <ai_platform_network_process+0x36c>
 80059e6:	6988      	ldr	r0, [r1, #24]
 80059e8:	68b2      	ldr	r2, [r6, #8]
 80059ea:	6803      	ldr	r3, [r0, #0]
 80059ec:	f8d2 9000 	ldr.w	r9, [r2]
 80059f0:	009d      	lsls	r5, r3, #2
 80059f2:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 80059f6:	d5d7      	bpl.n	80059a8 <ai_platform_network_process+0x310>
 80059f8:	6881      	ldr	r1, [r0, #8]
 80059fa:	68a2      	ldr	r2, [r4, #8]
 80059fc:	6860      	ldr	r0, [r4, #4]
 80059fe:	f000 ff67 	bl	80068d0 <st_int8_copy>
 8005a02:	e7da      	b.n	80059ba <ai_platform_network_process+0x322>
 8005a04:	4658      	mov	r0, fp
 8005a06:	f000 f8e7 	bl	8005bd8 <ai_layers_forward_all>
 8005a0a:	2f00      	cmp	r7, #0
 8005a0c:	d03d      	beq.n	8005a8a <ai_platform_network_process+0x3f2>
 8005a0e:	2400      	movs	r4, #0
 8005a10:	e016      	b.n	8005a40 <ai_platform_network_process+0x3a8>
 8005a12:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8005a16:	f859 100a 	ldr.w	r1, [r9, sl]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	428b      	cmp	r3, r1
 8005a1e:	bf24      	itt	cs
 8005a20:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8005a24:	1acb      	subcs	r3, r1, r3
 8005a26:	f8c8 3004 	str.w	r3, [r8, #4]
 8005a2a:	6981      	ldr	r1, [r0, #24]
 8005a2c:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8005a30:	1b52      	subs	r2, r2, r5
 8005a32:	4413      	add	r3, r2
 8005a34:	608b      	str	r3, [r1, #8]
 8005a36:	6983      	ldr	r3, [r0, #24]
 8005a38:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005a3c:	60da      	str	r2, [r3, #12]
 8005a3e:	3401      	adds	r4, #1
 8005a40:	883b      	ldrh	r3, [r7, #0]
 8005a42:	42a3      	cmp	r3, r4
 8005a44:	d921      	bls.n	8005a8a <ai_platform_network_process+0x3f2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	b1fb      	cbz	r3, 8005a8a <ai_platform_network_process+0x3f2>
 8005a4a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005a4e:	b1e0      	cbz	r0, 8005a8a <ai_platform_network_process+0x3f2>
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	6983      	ldr	r3, [r0, #24]
 8005a54:	f8d2 9000 	ldr.w	r9, [r2]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	0092      	lsls	r2, r2, #2
 8005a5c:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8005a60:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8005a64:	d5d5      	bpl.n	8005a12 <ai_platform_network_process+0x37a>
 8005a66:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8005a6a:	6898      	ldr	r0, [r3, #8]
 8005a6c:	f000 ff30 	bl	80068d0 <st_int8_copy>
 8005a70:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8005a74:	f859 200a 	ldr.w	r2, [r9, sl]
 8005a78:	440b      	add	r3, r1
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	bf24      	itt	cs
 8005a7e:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8005a82:	1ad3      	subcs	r3, r2, r3
 8005a84:	f8c8 3004 	str.w	r3, [r8, #4]
 8005a88:	e7d9      	b.n	8005a3e <ai_platform_network_process+0x3a6>
 8005a8a:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 8005a8e:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 8005a92:	3401      	adds	r4, #1
 8005a94:	b2a4      	uxth	r4, r4
 8005a96:	42a3      	cmp	r3, r4
 8005a98:	f8ab 401a 	strh.w	r4, [fp, #26]
 8005a9c:	f63f af7f 	bhi.w	800599e <ai_platform_network_process+0x306>
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	b005      	add	sp, #20
 8005aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aa8:	2a01      	cmp	r2, #1
 8005aaa:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 8005aac:	d02a      	beq.n	8005b04 <ai_platform_network_process+0x46c>
 8005aae:	f106 070c 	add.w	r7, r6, #12
 8005ab2:	e76f      	b.n	8005994 <ai_platform_network_process+0x2fc>
 8005ab4:	9d03      	ldr	r5, [sp, #12]
 8005ab6:	e728      	b.n	800590a <ai_platform_network_process+0x272>
 8005ab8:	9d03      	ldr	r5, [sp, #12]
 8005aba:	2219      	movs	r2, #25
 8005abc:	2112      	movs	r1, #18
 8005abe:	f105 000c 	add.w	r0, r5, #12
 8005ac2:	f000 f831 	bl	8005b28 <core_set_error>
 8005ac6:	2400      	movs	r4, #0
 8005ac8:	e726      	b.n	8005918 <ai_platform_network_process+0x280>
 8005aca:	9d03      	ldr	r5, [sp, #12]
 8005acc:	4604      	mov	r4, r0
 8005ace:	2221      	movs	r2, #33	@ 0x21
 8005ad0:	2112      	movs	r1, #18
 8005ad2:	f105 000c 	add.w	r0, r5, #12
 8005ad6:	f000 f827 	bl	8005b28 <core_set_error>
 8005ada:	e71d      	b.n	8005918 <ai_platform_network_process+0x280>
 8005adc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005ae0:	832b      	strh	r3, [r5, #24]
 8005ae2:	e752      	b.n	800598a <ai_platform_network_process+0x2f2>
 8005ae4:	2217      	movs	r2, #23
 8005ae6:	2113      	movs	r1, #19
 8005ae8:	f105 000c 	add.w	r0, r5, #12
 8005aec:	f000 f81c 	bl	8005b28 <core_set_error>
 8005af0:	2400      	movs	r4, #0
 8005af2:	e711      	b.n	8005918 <ai_platform_network_process+0x280>
 8005af4:	2219      	movs	r2, #25
 8005af6:	2113      	movs	r1, #19
 8005af8:	f105 000c 	add.w	r0, r5, #12
 8005afc:	f000 f814 	bl	8005b28 <core_set_error>
 8005b00:	2400      	movs	r4, #0
 8005b02:	e709      	b.n	8005918 <ai_platform_network_process+0x280>
 8005b04:	2700      	movs	r7, #0
 8005b06:	e745      	b.n	8005994 <ai_platform_network_process+0x2fc>
 8005b08:	4604      	mov	r4, r0
 8005b0a:	2221      	movs	r2, #33	@ 0x21
 8005b0c:	2113      	movs	r1, #19
 8005b0e:	f105 000c 	add.w	r0, r5, #12
 8005b12:	f000 f809 	bl	8005b28 <core_set_error>
 8005b16:	e6ff      	b.n	8005918 <ai_platform_network_process+0x280>

08005b18 <core_init>:
 8005b18:	2001      	movs	r0, #1
 8005b1a:	4770      	bx	lr

08005b1c <core_get_error>:
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2200      	movs	r2, #0
 8005b20:	6800      	ldr	r0, [r0, #0]
 8005b22:	601a      	str	r2, [r3, #0]
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop

08005b28 <core_set_error>:
 8005b28:	4603      	mov	r3, r0
 8005b2a:	7800      	ldrb	r0, [r0, #0]
 8005b2c:	b108      	cbz	r0, 8005b32 <core_set_error+0xa>
 8005b2e:	2000      	movs	r0, #0
 8005b30:	4770      	bx	lr
 8005b32:	7019      	strb	r1, [r3, #0]
 8005b34:	6819      	ldr	r1, [r3, #0]
 8005b36:	f362 211f 	bfi	r1, r2, #8, #24
 8005b3a:	2001      	movs	r0, #1
 8005b3c:	6019      	str	r1, [r3, #0]
 8005b3e:	4770      	bx	lr

08005b40 <ai_check_custom_types>:
 8005b40:	b082      	sub	sp, #8
 8005b42:	4b13      	ldr	r3, [pc, #76]	@ (8005b90 <ai_check_custom_types+0x50>)
 8005b44:	9301      	str	r3, [sp, #4]
 8005b46:	b118      	cbz	r0, 8005b50 <ai_check_custom_types+0x10>
 8005b48:	7803      	ldrb	r3, [r0, #0]
 8005b4a:	2b03      	cmp	r3, #3
 8005b4c:	d002      	beq.n	8005b54 <ai_check_custom_types+0x14>
 8005b4e:	2000      	movs	r0, #0
 8005b50:	b002      	add	sp, #8
 8005b52:	4770      	bx	lr
 8005b54:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d004      	beq.n	8005b66 <ai_check_custom_types+0x26>
 8005b5c:	2001      	movs	r0, #1
 8005b5e:	f080 0001 	eor.w	r0, r0, #1
 8005b62:	b002      	add	sp, #8
 8005b64:	4770      	bx	lr
 8005b66:	7842      	ldrb	r2, [r0, #1]
 8005b68:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	f100 0001 	add.w	r0, r0, #1
 8005b72:	d1f3      	bne.n	8005b5c <ai_check_custom_types+0x1c>
 8005b74:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8005b78:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d1ed      	bne.n	8005b5c <ai_check_custom_types+0x1c>
 8005b80:	7842      	ldrb	r2, [r0, #1]
 8005b82:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d1e8      	bne.n	8005b5c <ai_check_custom_types+0x1c>
 8005b8a:	2000      	movs	r0, #0
 8005b8c:	e7e7      	b.n	8005b5e <ai_check_custom_types+0x1e>
 8005b8e:	bf00      	nop
 8005b90:	84048403 	.word	0x84048403

08005b94 <ai_layers_init_all>:
 8005b94:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8005b96:	2100      	movs	r1, #0
 8005b98:	b143      	cbz	r3, 8005bac <ai_layers_init_all+0x18>
 8005b9a:	691a      	ldr	r2, [r3, #16]
 8005b9c:	60d8      	str	r0, [r3, #12]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	f101 0101 	add.w	r1, r1, #1
 8005ba4:	d002      	beq.n	8005bac <ai_layers_init_all+0x18>
 8005ba6:	b10a      	cbz	r2, 8005bac <ai_layers_init_all+0x18>
 8005ba8:	4613      	mov	r3, r2
 8005baa:	e7f5      	b.n	8005b98 <ai_layers_init_all+0x4>
 8005bac:	4608      	mov	r0, r1
 8005bae:	4770      	bx	lr

08005bb0 <ai_layers_post_init_all>:
 8005bb0:	b538      	push	{r3, r4, r5, lr}
 8005bb2:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8005bb4:	2500      	movs	r5, #0
 8005bb6:	b16c      	cbz	r4, 8005bd4 <ai_layers_post_init_all+0x24>
 8005bb8:	6863      	ldr	r3, [r4, #4]
 8005bba:	07db      	lsls	r3, r3, #31
 8005bbc:	d504      	bpl.n	8005bc8 <ai_layers_post_init_all+0x18>
 8005bbe:	6a23      	ldr	r3, [r4, #32]
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	b10b      	cbz	r3, 8005bc8 <ai_layers_post_init_all+0x18>
 8005bc4:	4798      	blx	r3
 8005bc6:	3501      	adds	r5, #1
 8005bc8:	6923      	ldr	r3, [r4, #16]
 8005bca:	42a3      	cmp	r3, r4
 8005bcc:	d002      	beq.n	8005bd4 <ai_layers_post_init_all+0x24>
 8005bce:	b10b      	cbz	r3, 8005bd4 <ai_layers_post_init_all+0x24>
 8005bd0:	461c      	mov	r4, r3
 8005bd2:	e7f0      	b.n	8005bb6 <ai_layers_post_init_all+0x6>
 8005bd4:	4628      	mov	r0, r5
 8005bd6:	bd38      	pop	{r3, r4, r5, pc}

08005bd8 <ai_layers_forward_all>:
 8005bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bdc:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 8005be0:	4604      	mov	r4, r0
 8005be2:	f1b8 0f00 	cmp.w	r8, #0
 8005be6:	d02b      	beq.n	8005c40 <ai_layers_forward_all+0x68>
 8005be8:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8005bea:	63c1      	str	r1, [r0, #60]	@ 0x3c
 8005bec:	b321      	cbz	r1, 8005c38 <ai_layers_forward_all+0x60>
 8005bee:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8005bf0:	2001      	movs	r0, #1
 8005bf2:	47c0      	blx	r8
 8005bf4:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 8005bf6:	b1fe      	cbz	r6, 8005c38 <ai_layers_forward_all+0x60>
 8005bf8:	2700      	movs	r7, #0
 8005bfa:	4631      	mov	r1, r6
 8005bfc:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005bfe:	2002      	movs	r0, #2
 8005c00:	47c0      	blx	r8
 8005c02:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8005c04:	4628      	mov	r0, r5
 8005c06:	696b      	ldr	r3, [r5, #20]
 8005c08:	4798      	blx	r3
 8005c0a:	692e      	ldr	r6, [r5, #16]
 8005c0c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005c0e:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8005c10:	42b5      	cmp	r5, r6
 8005c12:	f04f 0003 	mov.w	r0, #3
 8005c16:	d007      	beq.n	8005c28 <ai_layers_forward_all+0x50>
 8005c18:	47c0      	blx	r8
 8005c1a:	3701      	adds	r7, #1
 8005c1c:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8005c1e:	2e00      	cmp	r6, #0
 8005c20:	d1eb      	bne.n	8005bfa <ai_layers_forward_all+0x22>
 8005c22:	4638      	mov	r0, r7
 8005c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c28:	2003      	movs	r0, #3
 8005c2a:	47c0      	blx	r8
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	3701      	adds	r7, #1
 8005c30:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8005c32:	4638      	mov	r0, r7
 8005c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c38:	2700      	movs	r7, #0
 8005c3a:	4638      	mov	r0, r7
 8005c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c40:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 8005c42:	63c5      	str	r5, [r0, #60]	@ 0x3c
 8005c44:	2d00      	cmp	r5, #0
 8005c46:	d0f7      	beq.n	8005c38 <ai_layers_forward_all+0x60>
 8005c48:	4647      	mov	r7, r8
 8005c4a:	696b      	ldr	r3, [r5, #20]
 8005c4c:	4628      	mov	r0, r5
 8005c4e:	4798      	blx	r3
 8005c50:	462b      	mov	r3, r5
 8005c52:	692d      	ldr	r5, [r5, #16]
 8005c54:	429d      	cmp	r5, r3
 8005c56:	d004      	beq.n	8005c62 <ai_layers_forward_all+0x8a>
 8005c58:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8005c5a:	3701      	adds	r7, #1
 8005c5c:	2d00      	cmp	r5, #0
 8005c5e:	d1f4      	bne.n	8005c4a <ai_layers_forward_all+0x72>
 8005c60:	e7df      	b.n	8005c22 <ai_layers_forward_all+0x4a>
 8005c62:	2300      	movs	r3, #0
 8005c64:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8005c66:	3701      	adds	r7, #1
 8005c68:	e7db      	b.n	8005c22 <ai_layers_forward_all+0x4a>
 8005c6a:	bf00      	nop

08005c6c <forward_dense>:
 8005c6c:	6982      	ldr	r2, [r0, #24]
 8005c6e:	8813      	ldrh	r3, [r2, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d043      	beq.n	8005cfc <forward_dense+0x90>
 8005c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c78:	6855      	ldr	r5, [r2, #4]
 8005c7a:	6869      	ldr	r1, [r5, #4]
 8005c7c:	b08e      	sub	sp, #56	@ 0x38
 8005c7e:	b101      	cbz	r1, 8005c82 <forward_dense+0x16>
 8005c80:	6809      	ldr	r1, [r1, #0]
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d069      	beq.n	8005d5a <forward_dense+0xee>
 8005c86:	692a      	ldr	r2, [r5, #16]
 8005c88:	b102      	cbz	r2, 8005c8c <forward_dense+0x20>
 8005c8a:	6812      	ldr	r2, [r2, #0]
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d061      	beq.n	8005d54 <forward_dense+0xe8>
 8005c90:	69ec      	ldr	r4, [r5, #28]
 8005c92:	2c00      	cmp	r4, #0
 8005c94:	d057      	beq.n	8005d46 <forward_dense+0xda>
 8005c96:	8b2e      	ldrh	r6, [r5, #24]
 8005c98:	6820      	ldr	r0, [r4, #0]
 8005c9a:	2e01      	cmp	r6, #1
 8005c9c:	d955      	bls.n	8005d4a <forward_dense+0xde>
 8005c9e:	6864      	ldr	r4, [r4, #4]
 8005ca0:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8005ca4:	68cf      	ldr	r7, [r1, #12]
 8005ca6:	68d0      	ldr	r0, [r2, #12]
 8005ca8:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8005cac:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8005cb0:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 8005cb4:	f8d9 0000 	ldr.w	r0, [r9]
 8005cb8:	2b03      	cmp	r3, #3
 8005cba:	fb06 f807 	mul.w	r8, r6, r7
 8005cbe:	f020 4c7e 	bic.w	ip, r0, #4261412864	@ 0xfe000000
 8005cc2:	d044      	beq.n	8005d4e <forward_dense+0xe2>
 8005cc4:	6aad      	ldr	r5, [r5, #40]	@ 0x28
 8005cc6:	b11d      	cbz	r5, 8005cd0 <forward_dense+0x64>
 8005cc8:	682d      	ldr	r5, [r5, #0]
 8005cca:	b10d      	cbz	r5, 8005cd0 <forward_dense+0x64>
 8005ccc:	69ab      	ldr	r3, [r5, #24]
 8005cce:	689d      	ldr	r5, [r3, #8]
 8005cd0:	6992      	ldr	r2, [r2, #24]
 8005cd2:	698b      	ldr	r3, [r1, #24]
 8005cd4:	6890      	ldr	r0, [r2, #8]
 8005cd6:	6899      	ldr	r1, [r3, #8]
 8005cd8:	b10c      	cbz	r4, 8005cde <forward_dense+0x72>
 8005cda:	69a3      	ldr	r3, [r4, #24]
 8005cdc:	689c      	ldr	r4, [r3, #8]
 8005cde:	4b20      	ldr	r3, [pc, #128]	@ (8005d60 <forward_dense+0xf4>)
 8005ce0:	459c      	cmp	ip, r3
 8005ce2:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 8005ce6:	d023      	beq.n	8005d30 <forward_dense+0xc4>
 8005ce8:	4e1e      	ldr	r6, [pc, #120]	@ (8005d64 <forward_dense+0xf8>)
 8005cea:	45b4      	cmp	ip, r6
 8005cec:	d015      	beq.n	8005d1a <forward_dense+0xae>
 8005cee:	f5a3 039c 	sub.w	r3, r3, #5111808	@ 0x4e0000
 8005cf2:	459c      	cmp	ip, r3
 8005cf4:	d004      	beq.n	8005d00 <forward_dense+0x94>
 8005cf6:	b00e      	add	sp, #56	@ 0x38
 8005cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	deff      	udf	#255	@ 0xff
 8005d00:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8005d04:	a807      	add	r0, sp, #28
 8005d06:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	@ 0x28
 8005d0a:	e9cd e80c 	strd	lr, r8, [sp, #48]	@ 0x30
 8005d0e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d10:	f000 f9f8 	bl	8006104 <forward_lite_dense_if32of32wf32>
 8005d14:	b00e      	add	sp, #56	@ 0x38
 8005d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d1a:	e9cd e803 	strd	lr, r8, [sp, #12]
 8005d1e:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8005d22:	9500      	str	r5, [sp, #0]
 8005d24:	464b      	mov	r3, r9
 8005d26:	f000 fb47 	bl	80063b8 <forward_lite_dense_if32of32wf32_lut4>
 8005d2a:	b00e      	add	sp, #56	@ 0x38
 8005d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d30:	e9cd e803 	strd	lr, r8, [sp, #12]
 8005d34:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8005d38:	9500      	str	r5, [sp, #0]
 8005d3a:	464b      	mov	r3, r9
 8005d3c:	f000 fc64 	bl	8006608 <forward_lite_dense_if32of32wf32_lut8>
 8005d40:	b00e      	add	sp, #56	@ 0x38
 8005d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d46:	4620      	mov	r0, r4
 8005d48:	e7aa      	b.n	8005ca0 <forward_dense+0x34>
 8005d4a:	2400      	movs	r4, #0
 8005d4c:	e7a8      	b.n	8005ca0 <forward_dense+0x34>
 8005d4e:	2300      	movs	r3, #0
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	deff      	udf	#255	@ 0xff
 8005d54:	2300      	movs	r3, #0
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	deff      	udf	#255	@ 0xff
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	deff      	udf	#255	@ 0xff
 8005d60:	00d01040 	.word	0x00d01040
 8005d64:	00f01040 	.word	0x00f01040

08005d68 <forward_relu>:
 8005d68:	6982      	ldr	r2, [r0, #24]
 8005d6a:	8813      	ldrh	r3, [r2, #0]
 8005d6c:	b323      	cbz	r3, 8005db8 <forward_relu+0x50>
 8005d6e:	6851      	ldr	r1, [r2, #4]
 8005d70:	684a      	ldr	r2, [r1, #4]
 8005d72:	b102      	cbz	r2, 8005d76 <forward_relu+0xe>
 8005d74:	6812      	ldr	r2, [r2, #0]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	f000 808d 	beq.w	8005e96 <forward_relu+0x12e>
 8005d7c:	b470      	push	{r4, r5, r6}
 8005d7e:	6909      	ldr	r1, [r1, #16]
 8005d80:	b101      	cbz	r1, 8005d84 <forward_relu+0x1c>
 8005d82:	6809      	ldr	r1, [r1, #0]
 8005d84:	69c6      	ldr	r6, [r0, #28]
 8005d86:	b1ce      	cbz	r6, 8005dbc <forward_relu+0x54>
 8005d88:	6873      	ldr	r3, [r6, #4]
 8005d8a:	6988      	ldr	r0, [r1, #24]
 8005d8c:	6991      	ldr	r1, [r2, #24]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d044      	beq.n	8005e1c <forward_relu+0xb4>
 8005d92:	6893      	ldr	r3, [r2, #8]
 8005d94:	6880      	ldr	r0, [r0, #8]
 8005d96:	6889      	ldr	r1, [r1, #8]
 8005d98:	0a1b      	lsrs	r3, r3, #8
 8005d9a:	d073      	beq.n	8005e84 <forward_relu+0x11c>
 8005d9c:	68d5      	ldr	r5, [r2, #12]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005da4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8005da8:	429d      	cmp	r5, r3
 8005daa:	fb04 f202 	mul.w	r2, r4, r2
 8005dae:	d1f9      	bne.n	8005da4 <forward_relu+0x3c>
 8005db0:	68b3      	ldr	r3, [r6, #8]
 8005db2:	bc70      	pop	{r4, r5, r6}
 8005db4:	f000 b928 	b.w	8006008 <forward_lite_nl_relu_generic_if32of32_kernel>
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	deff      	udf	#255	@ 0xff
 8005dbc:	6893      	ldr	r3, [r2, #8]
 8005dbe:	6989      	ldr	r1, [r1, #24]
 8005dc0:	6990      	ldr	r0, [r2, #24]
 8005dc2:	6889      	ldr	r1, [r1, #8]
 8005dc4:	6884      	ldr	r4, [r0, #8]
 8005dc6:	0a1b      	lsrs	r3, r3, #8
 8005dc8:	d05e      	beq.n	8005e88 <forward_relu+0x120>
 8005dca:	68d5      	ldr	r5, [r2, #12]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005dd2:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8005dd6:	429d      	cmp	r5, r3
 8005dd8:	fb00 f202 	mul.w	r2, r0, r2
 8005ddc:	d1f9      	bne.n	8005dd2 <forward_relu+0x6a>
 8005dde:	f102 4380 	add.w	r3, r2, #1073741824	@ 0x40000000
 8005de2:	3b01      	subs	r3, #1
 8005de4:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8005de8:	4294      	cmp	r4, r2
 8005dea:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8005dee:	d813      	bhi.n	8005e18 <forward_relu+0xb0>
 8005df0:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8005e9c <forward_relu+0x134>
 8005df4:	3204      	adds	r2, #4
 8005df6:	3104      	adds	r1, #4
 8005df8:	4613      	mov	r3, r2
 8005dfa:	ed72 7a01 	vldmdb	r2!, {s15}
 8005dfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e06:	f1a3 0308 	sub.w	r3, r3, #8
 8005e0a:	bfb8      	it	lt
 8005e0c:	eef0 7a47 	vmovlt.f32	s15, s14
 8005e10:	429c      	cmp	r4, r3
 8005e12:	ed61 7a01 	vstmdb	r1!, {s15}
 8005e16:	d9ef      	bls.n	8005df8 <forward_relu+0x90>
 8005e18:	bc70      	pop	{r4, r5, r6}
 8005e1a:	4770      	bx	lr
 8005e1c:	688c      	ldr	r4, [r1, #8]
 8005e1e:	6891      	ldr	r1, [r2, #8]
 8005e20:	6880      	ldr	r0, [r0, #8]
 8005e22:	0a09      	lsrs	r1, r1, #8
 8005e24:	d032      	beq.n	8005e8c <forward_relu+0x124>
 8005e26:	68d5      	ldr	r5, [r2, #12]
 8005e28:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8005e2c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005e30:	4295      	cmp	r5, r2
 8005e32:	fb01 f303 	mul.w	r3, r1, r3
 8005e36:	d1f9      	bne.n	8005e2c <forward_relu+0xc4>
 8005e38:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8005e3c:	3a01      	subs	r2, #1
 8005e3e:	68b1      	ldr	r1, [r6, #8]
 8005e40:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005e44:	429c      	cmp	r4, r3
 8005e46:	ed91 7a00 	vldr	s14, [r1]
 8005e4a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8005e4e:	d8e3      	bhi.n	8005e18 <forward_relu+0xb0>
 8005e50:	2500      	movs	r5, #0
 8005e52:	3304      	adds	r3, #4
 8005e54:	1d02      	adds	r2, r0, #4
 8005e56:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005e5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e62:	f1a3 0104 	sub.w	r1, r3, #4
 8005e66:	f1a3 0308 	sub.w	r3, r3, #8
 8005e6a:	d405      	bmi.n	8005e78 <forward_relu+0x110>
 8005e6c:	429c      	cmp	r4, r3
 8005e6e:	f842 5d04 	str.w	r5, [r2, #-4]!
 8005e72:	d8d1      	bhi.n	8005e18 <forward_relu+0xb0>
 8005e74:	460b      	mov	r3, r1
 8005e76:	e7ee      	b.n	8005e56 <forward_relu+0xee>
 8005e78:	429c      	cmp	r4, r3
 8005e7a:	ed62 7a01 	vstmdb	r2!, {s15}
 8005e7e:	d8cb      	bhi.n	8005e18 <forward_relu+0xb0>
 8005e80:	460b      	mov	r3, r1
 8005e82:	e7e8      	b.n	8005e56 <forward_relu+0xee>
 8005e84:	2201      	movs	r2, #1
 8005e86:	e793      	b.n	8005db0 <forward_relu+0x48>
 8005e88:	4622      	mov	r2, r4
 8005e8a:	e7b1      	b.n	8005df0 <forward_relu+0x88>
 8005e8c:	68b2      	ldr	r2, [r6, #8]
 8005e8e:	4623      	mov	r3, r4
 8005e90:	ed92 7a00 	vldr	s14, [r2]
 8005e94:	e7dc      	b.n	8005e50 <forward_relu+0xe8>
 8005e96:	2300      	movs	r3, #0
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	deff      	udf	#255	@ 0xff
 8005e9c:	00000000 	.word	0x00000000

08005ea0 <forward_sm>:
 8005ea0:	6982      	ldr	r2, [r0, #24]
 8005ea2:	8813      	ldrh	r3, [r2, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d036      	beq.n	8005f16 <forward_sm+0x76>
 8005ea8:	b570      	push	{r4, r5, r6, lr}
 8005eaa:	6852      	ldr	r2, [r2, #4]
 8005eac:	6855      	ldr	r5, [r2, #4]
 8005eae:	b082      	sub	sp, #8
 8005eb0:	b105      	cbz	r5, 8005eb4 <forward_sm+0x14>
 8005eb2:	682d      	ldr	r5, [r5, #0]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d032      	beq.n	8005f1e <forward_sm+0x7e>
 8005eb8:	6916      	ldr	r6, [r2, #16]
 8005eba:	b106      	cbz	r6, 8005ebe <forward_sm+0x1e>
 8005ebc:	6836      	ldr	r6, [r6, #0]
 8005ebe:	68ab      	ldr	r3, [r5, #8]
 8005ec0:	ea5f 2c13 	movs.w	ip, r3, lsr #8
 8005ec4:	d029      	beq.n	8005f1a <forward_sm+0x7a>
 8005ec6:	68ec      	ldr	r4, [r5, #12]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	eb04 038c 	add.w	r3, r4, ip, lsl #2
 8005ece:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005ed2:	429c      	cmp	r4, r3
 8005ed4:	fb01 f202 	mul.w	r2, r1, r2
 8005ed8:	d1f9      	bne.n	8005ece <forward_sm+0x2e>
 8005eda:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8005ede:	69b0      	ldr	r0, [r6, #24]
 8005ee0:	4563      	cmp	r3, ip
 8005ee2:	bfb8      	it	lt
 8005ee4:	68e9      	ldrlt	r1, [r5, #12]
 8005ee6:	6880      	ldr	r0, [r0, #8]
 8005ee8:	bfb8      	it	lt
 8005eea:	f851 4023 	ldrlt.w	r4, [r1, r3, lsl #2]
 8005eee:	6929      	ldr	r1, [r5, #16]
 8005ef0:	bfa8      	it	ge
 8005ef2:	2401      	movge	r4, #1
 8005ef4:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8005ef8:	bfbc      	itt	lt
 8005efa:	6969      	ldrlt	r1, [r5, #20]
 8005efc:	f851 3023 	ldrlt.w	r3, [r1, r3, lsl #2]
 8005f00:	69a9      	ldr	r1, [r5, #24]
 8005f02:	bfb8      	it	lt
 8005f04:	089b      	lsrlt	r3, r3, #2
 8005f06:	6889      	ldr	r1, [r1, #8]
 8005f08:	9400      	str	r4, [sp, #0]
 8005f0a:	bfa8      	it	ge
 8005f0c:	2300      	movge	r3, #0
 8005f0e:	f000 fca9 	bl	8006864 <forward_lite_nl_softmax_if32of32>
 8005f12:	b002      	add	sp, #8
 8005f14:	bd70      	pop	{r4, r5, r6, pc}
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	deff      	udf	#255	@ 0xff
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	e7dd      	b.n	8005eda <forward_sm+0x3a>
 8005f1e:	2300      	movs	r3, #0
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	deff      	udf	#255	@ 0xff

08005f24 <forward_lite_nl_softmax_if32of32_kernel>:
 8005f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f28:	2a01      	cmp	r2, #1
 8005f2a:	ed2d 8b02 	vpush	{d8}
 8005f2e:	4691      	mov	r9, r2
 8005f30:	ed91 8a00 	vldr	s16, [r1]
 8005f34:	4698      	mov	r8, r3
 8005f36:	d960      	bls.n	8005ffa <forward_lite_nl_softmax_if32of32_kernel+0xd6>
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d14a      	bne.n	8005fd2 <forward_lite_nl_softmax_if32of32_kernel+0xae>
 8005f3c:	1d0c      	adds	r4, r1, #4
 8005f3e:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8005f42:	ecf4 7a01 	vldmia	r4!, {s15}
 8005f46:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f4e:	bfb8      	it	lt
 8005f50:	eeb0 8a67 	vmovlt.f32	s16, s15
 8005f54:	429c      	cmp	r4, r3
 8005f56:	d1f4      	bne.n	8005f42 <forward_lite_nl_softmax_if32of32_kernel+0x1e>
 8005f58:	f04f 0a04 	mov.w	sl, #4
 8005f5c:	eddf 8a29 	vldr	s17, [pc, #164]	@ 8006004 <forward_lite_nl_softmax_if32of32_kernel+0xe0>
 8005f60:	4607      	mov	r7, r0
 8005f62:	460c      	mov	r4, r1
 8005f64:	4606      	mov	r6, r0
 8005f66:	2500      	movs	r5, #0
 8005f68:	ed94 0a00 	vldr	s0, [r4]
 8005f6c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8005f70:	f001 fd7c 	bl	8007a6c <expf>
 8005f74:	3501      	adds	r5, #1
 8005f76:	45a9      	cmp	r9, r5
 8005f78:	ed86 0a00 	vstr	s0, [r6]
 8005f7c:	ee78 8a80 	vadd.f32	s17, s17, s0
 8005f80:	4454      	add	r4, sl
 8005f82:	4456      	add	r6, sl
 8005f84:	d8f0      	bhi.n	8005f68 <forward_lite_nl_softmax_if32of32_kernel+0x44>
 8005f86:	eef5 8a40 	vcmp.f32	s17, #0.0
 8005f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f8e:	d011      	beq.n	8005fb4 <forward_lite_nl_softmax_if32of32_kernel+0x90>
 8005f90:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005f94:	f1b8 0f01 	cmp.w	r8, #1
 8005f98:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8005f9c:	f04f 0300 	mov.w	r3, #0
 8005fa0:	d10c      	bne.n	8005fbc <forward_lite_nl_softmax_if32of32_kernel+0x98>
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	4599      	cmp	r9, r3
 8005fa6:	edd7 7a00 	vldr	s15, [r7]
 8005faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fae:	ece7 7a01 	vstmia	r7!, {s15}
 8005fb2:	d8f6      	bhi.n	8005fa2 <forward_lite_nl_softmax_if32of32_kernel+0x7e>
 8005fb4:	ecbd 8b02 	vpop	{d8}
 8005fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fbc:	edd7 7a00 	vldr	s15, [r7]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005fc6:	4599      	cmp	r9, r3
 8005fc8:	edc7 7a00 	vstr	s15, [r7]
 8005fcc:	4457      	add	r7, sl
 8005fce:	d8f5      	bhi.n	8005fbc <forward_lite_nl_softmax_if32of32_kernel+0x98>
 8005fd0:	e7f0      	b.n	8005fb4 <forward_lite_nl_softmax_if32of32_kernel+0x90>
 8005fd2:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8005fd6:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8005fda:	2301      	movs	r3, #1
 8005fdc:	edd2 7a00 	vldr	s15, [r2]
 8005fe0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fe8:	f103 0301 	add.w	r3, r3, #1
 8005fec:	bfb8      	it	lt
 8005fee:	eeb0 8a67 	vmovlt.f32	s16, s15
 8005ff2:	4599      	cmp	r9, r3
 8005ff4:	4452      	add	r2, sl
 8005ff6:	d1f1      	bne.n	8005fdc <forward_lite_nl_softmax_if32of32_kernel+0xb8>
 8005ff8:	e7b0      	b.n	8005f5c <forward_lite_nl_softmax_if32of32_kernel+0x38>
 8005ffa:	2a00      	cmp	r2, #0
 8005ffc:	d0da      	beq.n	8005fb4 <forward_lite_nl_softmax_if32of32_kernel+0x90>
 8005ffe:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8006002:	e7ab      	b.n	8005f5c <forward_lite_nl_softmax_if32of32_kernel+0x38>
 8006004:	00000000 	.word	0x00000000

08006008 <forward_lite_nl_relu_generic_if32of32_kernel>:
 8006008:	edd3 6a02 	vldr	s13, [r3, #8]
 800600c:	ed93 7a00 	vldr	s14, [r3]
 8006010:	ed93 6a01 	vldr	s12, [r3, #4]
 8006014:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8006018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800601c:	d42a      	bmi.n	8006074 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 800601e:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8006022:	3a01      	subs	r2, #1
 8006024:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8006028:	4561      	cmp	r1, ip
 800602a:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800602e:	d85d      	bhi.n	80060ec <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 8006030:	1d11      	adds	r1, r2, #4
 8006032:	f10c 0304 	add.w	r3, ip, #4
 8006036:	4408      	add	r0, r1
 8006038:	ebac 0202 	sub.w	r2, ip, r2
 800603c:	e00c      	b.n	8006058 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 800603e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006046:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800604a:	db01      	blt.n	8006050 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 800604c:	ee65 7a86 	vmul.f32	s15, s11, s12
 8006050:	4293      	cmp	r3, r2
 8006052:	ed60 7a01 	vstmdb	r0!, {s15}
 8006056:	d00c      	beq.n	8006072 <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 8006058:	ed73 7a01 	vldmdb	r3!, {s15}
 800605c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8006060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006064:	daeb      	bge.n	800603e <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 8006066:	eef0 7a66 	vmov.f32	s15, s13
 800606a:	4293      	cmp	r3, r2
 800606c:	ed60 7a01 	vstmdb	r0!, {s15}
 8006070:	d1f2      	bne.n	8006058 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8006072:	4770      	bx	lr
 8006074:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8006078:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800607c:	3a01      	subs	r2, #1
 800607e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006082:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8006086:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800608a:	d017      	beq.n	80060bc <forward_lite_nl_relu_generic_if32of32_kernel+0xb4>
 800608c:	4561      	cmp	r1, ip
 800608e:	d82d      	bhi.n	80060ec <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 8006090:	1d11      	adds	r1, r2, #4
 8006092:	f10c 0304 	add.w	r3, ip, #4
 8006096:	4401      	add	r1, r0
 8006098:	ebac 0202 	sub.w	r2, ip, r2
 800609c:	ed73 7a01 	vldmdb	r3!, {s15}
 80060a0:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80060a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ac:	ee66 6a86 	vmul.f32	s13, s13, s12
 80060b0:	d81d      	bhi.n	80060ee <forward_lite_nl_relu_generic_if32of32_kernel+0xe6>
 80060b2:	4293      	cmp	r3, r2
 80060b4:	ed61 6a01 	vstmdb	r1!, {s13}
 80060b8:	d1f0      	bne.n	800609c <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 80060ba:	4770      	bx	lr
 80060bc:	4561      	cmp	r1, ip
 80060be:	d815      	bhi.n	80060ec <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 80060c0:	1d11      	adds	r1, r2, #4
 80060c2:	b500      	push	{lr}
 80060c4:	f10c 0304 	add.w	r3, ip, #4
 80060c8:	f04f 0e00 	mov.w	lr, #0
 80060cc:	4401      	add	r1, r0
 80060ce:	ebac 0202 	sub.w	r2, ip, r2
 80060d2:	ed73 7a01 	vldmdb	r3!, {s15}
 80060d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80060da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060de:	d40b      	bmi.n	80060f8 <forward_lite_nl_relu_generic_if32of32_kernel+0xf0>
 80060e0:	4293      	cmp	r3, r2
 80060e2:	f841 ed04 	str.w	lr, [r1, #-4]!
 80060e6:	d1f4      	bne.n	80060d2 <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 80060e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	4293      	cmp	r3, r2
 80060f0:	ed61 7a01 	vstmdb	r1!, {s15}
 80060f4:	d1d2      	bne.n	800609c <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 80060f6:	4770      	bx	lr
 80060f8:	4293      	cmp	r3, r2
 80060fa:	ed61 7a01 	vstmdb	r1!, {s15}
 80060fe:	d1e8      	bne.n	80060d2 <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 8006100:	e7f2      	b.n	80060e8 <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 8006102:	bf00      	nop

08006104 <forward_lite_dense_if32of32wf32>:
 8006104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006108:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 800610c:	6801      	ldr	r1, [r0, #0]
 800610e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8006112:	fb02 f303 	mul.w	r3, r2, r3
 8006116:	b083      	sub	sp, #12
 8006118:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800611c:	4299      	cmp	r1, r3
 800611e:	9100      	str	r1, [sp, #0]
 8006120:	9301      	str	r3, [sp, #4]
 8006122:	f080 811e 	bcs.w	8006362 <forward_lite_dense_if32of32wf32+0x25e>
 8006126:	6904      	ldr	r4, [r0, #16]
 8006128:	4607      	mov	r7, r0
 800612a:	0096      	lsls	r6, r2, #2
 800612c:	9b00      	ldr	r3, [sp, #0]
 800612e:	68bd      	ldr	r5, [r7, #8]
 8006130:	eb03 0e06 	add.w	lr, r3, r6
 8006134:	459e      	cmp	lr, r3
 8006136:	461e      	mov	r6, r3
 8006138:	f240 8104 	bls.w	8006344 <forward_lite_dense_if32of32wf32+0x240>
 800613c:	f1a4 0c10 	sub.w	ip, r4, #16
 8006140:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8006144:	f10c 0c01 	add.w	ip, ip, #1
 8006148:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 800614c:	ea4f 0984 	mov.w	r9, r4, lsl #2
 8006150:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 8006154:	2c0f      	cmp	r4, #15
 8006156:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 80063b4 <forward_lite_dense_if32of32wf32+0x2b0>
 800615a:	f240 8105 	bls.w	8006368 <forward_lite_dense_if32of32wf32+0x264>
 800615e:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 8006162:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 8006166:	4621      	mov	r1, r4
 8006168:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 800616c:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 8006170:	ed12 6a10 	vldr	s12, [r2, #-64]	@ 0xffffffc0
 8006174:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 8006178:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 800617c:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 8006180:	ed12 3a0a 	vldr	s6, [r2, #-40]	@ 0xffffffd8
 8006184:	ed53 3a0a 	vldr	s7, [r3, #-40]	@ 0xffffffd8
 8006188:	ed12 4a09 	vldr	s8, [r2, #-36]	@ 0xffffffdc
 800618c:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 8006190:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 8006194:	ed12 2a05 	vldr	s4, [r2, #-20]	@ 0xffffffec
 8006198:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 800619c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80061a0:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 80061a4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80061a8:	3910      	subs	r1, #16
 80061aa:	290f      	cmp	r1, #15
 80061ac:	ed13 6a0e 	vldr	s12, [r3, #-56]	@ 0xffffffc8
 80061b0:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 80061b4:	eee5 7a86 	vfma.f32	s15, s11, s12
 80061b8:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 80061bc:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80061c0:	ed53 5a1c 	vldr	s11, [r3, #-112]	@ 0xffffff90
 80061c4:	ed12 6a1b 	vldr	s12, [r2, #-108]	@ 0xffffff94
 80061c8:	eee4 7aa6 	vfma.f32	s15, s9, s13
 80061cc:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
 80061d0:	ed53 4a19 	vldr	s9, [r3, #-100]	@ 0xffffff9c
 80061d4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80061d8:	ed12 5a18 	vldr	s10, [r2, #-96]	@ 0xffffffa0
 80061dc:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 80061e0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80061e4:	ed12 6a17 	vldr	s12, [r2, #-92]	@ 0xffffffa4
 80061e8:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 80061ec:	eee3 7a23 	vfma.f32	s15, s6, s7
 80061f0:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 80061f4:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 80061f8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80061fc:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 8006200:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8006204:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006208:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 800620c:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 8006210:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006214:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 8006218:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 800621c:	eee1 7a21 	vfma.f32	s15, s2, s3
 8006220:	eee2 7a22 	vfma.f32	s15, s4, s5
 8006224:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006228:	eee4 7a24 	vfma.f32	s15, s8, s9
 800622c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006230:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006234:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006238:	d896      	bhi.n	8006168 <forward_lite_dense_if32of32wf32+0x64>
 800623a:	eb05 020b 	add.w	r2, r5, fp
 800623e:	f004 010f 	and.w	r1, r4, #15
 8006242:	4663      	mov	r3, ip
 8006244:	2903      	cmp	r1, #3
 8006246:	d95f      	bls.n	8006308 <forward_lite_dense_if32of32wf32+0x204>
 8006248:	edd2 6a01 	vldr	s13, [r2, #4]
 800624c:	edd3 7a01 	vldr	s15, [r3, #4]
 8006250:	ed93 6a00 	vldr	s12, [r3]
 8006254:	ed93 5a02 	vldr	s10, [r3, #8]
 8006258:	edd2 5a02 	vldr	s11, [r2, #8]
 800625c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006260:	edd2 6a00 	vldr	s13, [r2]
 8006264:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006268:	1f08      	subs	r0, r1, #4
 800626a:	2803      	cmp	r0, #3
 800626c:	ed93 6a03 	vldr	s12, [r3, #12]
 8006270:	edd2 6a03 	vldr	s13, [r2, #12]
 8006274:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006278:	eee5 7a25 	vfma.f32	s15, s10, s11
 800627c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006280:	eeb0 7a67 	vmov.f32	s14, s15
 8006284:	d938      	bls.n	80062f8 <forward_lite_dense_if32of32wf32+0x1f4>
 8006286:	edd2 6a05 	vldr	s13, [r2, #20]
 800628a:	edd3 7a05 	vldr	s15, [r3, #20]
 800628e:	ed93 6a04 	vldr	s12, [r3, #16]
 8006292:	ed93 5a06 	vldr	s10, [r3, #24]
 8006296:	edd2 5a06 	vldr	s11, [r2, #24]
 800629a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800629e:	edd2 6a04 	vldr	s13, [r2, #16]
 80062a2:	eee6 7a26 	vfma.f32	s15, s12, s13
 80062a6:	f1a1 0a08 	sub.w	sl, r1, #8
 80062aa:	f1ba 0f03 	cmp.w	sl, #3
 80062ae:	ed93 6a07 	vldr	s12, [r3, #28]
 80062b2:	edd2 6a07 	vldr	s13, [r2, #28]
 80062b6:	eee5 7a25 	vfma.f32	s15, s10, s11
 80062ba:	eee6 7a26 	vfma.f32	s15, s12, s13
 80062be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80062c2:	d919      	bls.n	80062f8 <forward_lite_dense_if32of32wf32+0x1f4>
 80062c4:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80062c8:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 80062cc:	ed92 6a08 	vldr	s12, [r2, #32]
 80062d0:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 80062d4:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 80062d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80062dc:	edd3 6a08 	vldr	s13, [r3, #32]
 80062e0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80062e4:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 80062e8:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 80062ec:	eee5 7a25 	vfma.f32	s15, s10, s11
 80062f0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80062f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80062f8:	0880      	lsrs	r0, r0, #2
 80062fa:	3001      	adds	r0, #1
 80062fc:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8006300:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8006304:	f001 0103 	and.w	r1, r1, #3
 8006308:	b1a9      	cbz	r1, 8006336 <forward_lite_dense_if32of32wf32+0x232>
 800630a:	edd3 6a00 	vldr	s13, [r3]
 800630e:	edd2 7a00 	vldr	s15, [r2]
 8006312:	3901      	subs	r1, #1
 8006314:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006318:	d00d      	beq.n	8006336 <forward_lite_dense_if32of32wf32+0x232>
 800631a:	edd3 6a01 	vldr	s13, [r3, #4]
 800631e:	edd2 7a01 	vldr	s15, [r2, #4]
 8006322:	2901      	cmp	r1, #1
 8006324:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006328:	d005      	beq.n	8006336 <forward_lite_dense_if32of32wf32+0x232>
 800632a:	edd2 6a02 	vldr	s13, [r2, #8]
 800632e:	edd3 7a02 	vldr	s15, [r3, #8]
 8006332:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006336:	444d      	add	r5, r9
 8006338:	eca6 7a01 	vstmia	r6!, {s14}
 800633c:	45b6      	cmp	lr, r6
 800633e:	f63f af09 	bhi.w	8006154 <forward_lite_dense_if32of32wf32+0x50>
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	b99b      	cbnz	r3, 8006370 <forward_lite_dense_if32of32wf32+0x26c>
 8006348:	9b00      	ldr	r3, [sp, #0]
 800634a:	9901      	ldr	r1, [sp, #4]
 800634c:	693c      	ldr	r4, [r7, #16]
 800634e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8006352:	4299      	cmp	r1, r3
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 800635a:	ea4f 0682 	mov.w	r6, r2, lsl #2
 800635e:	f63f aee5 	bhi.w	800612c <forward_lite_dense_if32of32wf32+0x28>
 8006362:	b003      	add	sp, #12
 8006364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006368:	4621      	mov	r1, r4
 800636a:	462a      	mov	r2, r5
 800636c:	4643      	mov	r3, r8
 800636e:	e769      	b.n	8006244 <forward_lite_dense_if32of32wf32+0x140>
 8006370:	2a00      	cmp	r2, #0
 8006372:	d0e9      	beq.n	8006348 <forward_lite_dense_if32of32wf32+0x244>
 8006374:	9a00      	ldr	r2, [sp, #0]
 8006376:	ed93 7a00 	vldr	s14, [r3]
 800637a:	edd2 7a00 	vldr	s15, [r2]
 800637e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006382:	4613      	mov	r3, r2
 8006384:	edc2 7a00 	vstr	s15, [r2]
 8006388:	697a      	ldr	r2, [r7, #20]
 800638a:	2a01      	cmp	r2, #1
 800638c:	d9dc      	bls.n	8006348 <forward_lite_dense_if32of32wf32+0x244>
 800638e:	1d19      	adds	r1, r3, #4
 8006390:	2301      	movs	r3, #1
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	ed91 7a00 	vldr	s14, [r1]
 8006398:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800639c:	edd2 7a00 	vldr	s15, [r2]
 80063a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80063a4:	3301      	adds	r3, #1
 80063a6:	ece1 7a01 	vstmia	r1!, {s15}
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d8f0      	bhi.n	8006392 <forward_lite_dense_if32of32wf32+0x28e>
 80063b0:	e7ca      	b.n	8006348 <forward_lite_dense_if32of32wf32+0x244>
 80063b2:	bf00      	nop
 80063b4:	00000000 	.word	0x00000000

080063b8 <forward_lite_dense_if32of32wf32_lut4>:
 80063b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063bc:	b08d      	sub	sp, #52	@ 0x34
 80063be:	4605      	mov	r5, r0
 80063c0:	9005      	str	r0, [sp, #20]
 80063c2:	920a      	str	r2, [sp, #40]	@ 0x28
 80063c4:	4618      	mov	r0, r3
 80063c6:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 80063ca:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 80063cc:	fb02 f303 	mul.w	r3, r2, r3
 80063d0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80063d4:	460c      	mov	r4, r1
 80063d6:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 80063d8:	9308      	str	r3, [sp, #32]
 80063da:	b126      	cbz	r6, 80063e6 <forward_lite_dense_if32of32wf32_lut4+0x2e>
 80063dc:	2240      	movs	r2, #64	@ 0x40
 80063de:	4631      	mov	r1, r6
 80063e0:	f000 fa76 	bl	80068d0 <st_int8_copy>
 80063e4:	4630      	mov	r0, r6
 80063e6:	9b05      	ldr	r3, [sp, #20]
 80063e8:	9a08      	ldr	r2, [sp, #32]
 80063ea:	4293      	cmp	r3, r2
 80063ec:	f080 80f5 	bcs.w	80065da <forward_lite_dense_if32of32wf32_lut4+0x222>
 80063f0:	08eb      	lsrs	r3, r5, #3
 80063f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80063f4:	9301      	str	r3, [sp, #4]
 80063f6:	f005 0101 	and.w	r1, r5, #1
 80063fa:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	0092      	lsls	r2, r2, #2
 8006402:	f025 0801 	bic.w	r8, r5, #1
 8006406:	9102      	str	r1, [sp, #8]
 8006408:	9304      	str	r3, [sp, #16]
 800640a:	00a9      	lsls	r1, r5, #2
 800640c:	9b05      	ldr	r3, [sp, #20]
 800640e:	9207      	str	r2, [sp, #28]
 8006410:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8006414:	9109      	str	r1, [sp, #36]	@ 0x24
 8006416:	f104 0b20 	add.w	fp, r4, #32
 800641a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800641c:	9a07      	ldr	r2, [sp, #28]
 800641e:	eb03 0902 	add.w	r9, r3, r2
 8006422:	4599      	cmp	r9, r3
 8006424:	f1ab 0220 	sub.w	r2, fp, #32
 8006428:	9206      	str	r2, [sp, #24]
 800642a:	f240 80d9 	bls.w	80065e0 <forward_lite_dense_if32of32wf32_lut4+0x228>
 800642e:	469e      	mov	lr, r3
 8006430:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006432:	f108 33ff 	add.w	r3, r8, #4294967295
 8006436:	9303      	str	r3, [sp, #12]
 8006438:	9b01      	ldr	r3, [sp, #4]
 800643a:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8006604 <forward_lite_dense_if32of32wf32_lut4+0x24c>
 800643e:	2b00      	cmp	r3, #0
 8006440:	f000 80b2 	beq.w	80065a8 <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 8006444:	9b04      	ldr	r3, [sp, #16]
 8006446:	18d5      	adds	r5, r2, r3
 8006448:	465b      	mov	r3, fp
 800644a:	7814      	ldrb	r4, [r2, #0]
 800644c:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 8006450:	7851      	ldrb	r1, [r2, #1]
 8006452:	ed53 3a08 	vldr	s7, [r3, #-32]	@ 0xffffffe0
 8006456:	ed13 4a06 	vldr	s8, [r3, #-24]	@ 0xffffffe8
 800645a:	ed53 4a05 	vldr	s9, [r3, #-20]	@ 0xffffffec
 800645e:	ed13 5a04 	vldr	s10, [r3, #-16]
 8006462:	ed53 5a03 	vldr	s11, [r3, #-12]
 8006466:	ed13 6a02 	vldr	s12, [r3, #-8]
 800646a:	ed53 6a01 	vldr	s13, [r3, #-4]
 800646e:	f004 060f 	and.w	r6, r4, #15
 8006472:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8006476:	edd6 7a00 	vldr	s15, [r6]
 800647a:	0924      	lsrs	r4, r4, #4
 800647c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8006480:	ed94 3a00 	vldr	s6, [r4]
 8006484:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8006488:	090c      	lsrs	r4, r1, #4
 800648a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800648e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8006492:	f001 010f 	and.w	r1, r1, #15
 8006496:	edd4 3a00 	vldr	s7, [r4]
 800649a:	7894      	ldrb	r4, [r2, #2]
 800649c:	eee3 7a84 	vfma.f32	s15, s7, s8
 80064a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80064a4:	0926      	lsrs	r6, r4, #4
 80064a6:	ed91 4a00 	vldr	s8, [r1]
 80064aa:	78d1      	ldrb	r1, [r2, #3]
 80064ac:	eee4 7a24 	vfma.f32	s15, s8, s9
 80064b0:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80064b4:	f004 040f 	and.w	r4, r4, #15
 80064b8:	edd6 4a00 	vldr	s9, [r6]
 80064bc:	eee4 7a85 	vfma.f32	s15, s9, s10
 80064c0:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80064c4:	3204      	adds	r2, #4
 80064c6:	ed94 5a00 	vldr	s10, [r4]
 80064ca:	090c      	lsrs	r4, r1, #4
 80064cc:	eee5 7a25 	vfma.f32	s15, s10, s11
 80064d0:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80064d4:	f001 010f 	and.w	r1, r1, #15
 80064d8:	edd4 5a00 	vldr	s11, [r4]
 80064dc:	eee5 7a86 	vfma.f32	s15, s11, s12
 80064e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80064e4:	42aa      	cmp	r2, r5
 80064e6:	ed91 6a00 	vldr	s12, [r1]
 80064ea:	eee6 7a26 	vfma.f32	s15, s12, s13
 80064ee:	f103 0320 	add.w	r3, r3, #32
 80064f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80064f6:	d1a8      	bne.n	800644a <forward_lite_dense_if32of32wf32_lut4+0x92>
 80064f8:	4656      	mov	r6, sl
 80064fa:	4546      	cmp	r6, r8
 80064fc:	d258      	bcs.n	80065b0 <forward_lite_dense_if32of32wf32_lut4+0x1f8>
 80064fe:	9b03      	ldr	r3, [sp, #12]
 8006500:	1b9c      	subs	r4, r3, r6
 8006502:	08e7      	lsrs	r7, r4, #3
 8006504:	f106 0208 	add.w	r2, r6, #8
 8006508:	1e69      	subs	r1, r5, #1
 800650a:	eb05 04d4 	add.w	r4, r5, r4, lsr #3
 800650e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006512:	ed52 5a01 	vldr	s11, [r2, #-4]
 8006516:	ed52 6a02 	vldr	s13, [r2, #-8]
 800651a:	f003 0c0f 	and.w	ip, r3, #15
 800651e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8006522:	eddc 7a00 	vldr	s15, [ip]
 8006526:	091b      	lsrs	r3, r3, #4
 8006528:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800652c:	ed93 6a00 	vldr	s12, [r3]
 8006530:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006534:	42a1      	cmp	r1, r4
 8006536:	eee6 7a26 	vfma.f32	s15, s12, s13
 800653a:	f102 0208 	add.w	r2, r2, #8
 800653e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006542:	d1e4      	bne.n	800650e <forward_lite_dense_if32of32wf32_lut4+0x156>
 8006544:	3701      	adds	r7, #1
 8006546:	19ea      	adds	r2, r5, r7
 8006548:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 800654c:	9b02      	ldr	r3, [sp, #8]
 800654e:	b30b      	cbz	r3, 8006594 <forward_lite_dense_if32of32wf32_lut4+0x1dc>
 8006550:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006554:	edd6 7a00 	vldr	s15, [r6]
 8006558:	091b      	lsrs	r3, r3, #4
 800655a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800655e:	edd3 6a00 	vldr	s13, [r3]
 8006562:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006566:	ecae 7a01 	vstmia	lr!, {s14}
 800656a:	45f1      	cmp	r9, lr
 800656c:	f63f af64 	bhi.w	8006438 <forward_lite_dense_if32of32wf32_lut4+0x80>
 8006570:	9b05      	ldr	r3, [sp, #20]
 8006572:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006574:	1899      	adds	r1, r3, r2
 8006576:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006578:	b9e3      	cbnz	r3, 80065b4 <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 800657a:	9b08      	ldr	r3, [sp, #32]
 800657c:	428b      	cmp	r3, r1
 800657e:	d92c      	bls.n	80065da <forward_lite_dense_if32of32wf32_lut4+0x222>
 8006580:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006582:	4498      	add	r8, r3
 8006584:	449a      	add	sl, r3
 8006586:	449b      	add	fp, r3
 8006588:	9b05      	ldr	r3, [sp, #20]
 800658a:	4599      	cmp	r9, r3
 800658c:	d92a      	bls.n	80065e4 <forward_lite_dense_if32of32wf32_lut4+0x22c>
 800658e:	9105      	str	r1, [sp, #20]
 8006590:	460b      	mov	r3, r1
 8006592:	e743      	b.n	800641c <forward_lite_dense_if32of32wf32_lut4+0x64>
 8006594:	ecae 7a01 	vstmia	lr!, {s14}
 8006598:	45f1      	cmp	r9, lr
 800659a:	d9e9      	bls.n	8006570 <forward_lite_dense_if32of32wf32_lut4+0x1b8>
 800659c:	9b01      	ldr	r3, [sp, #4]
 800659e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8006604 <forward_lite_dense_if32of32wf32_lut4+0x24c>
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f47f af4e 	bne.w	8006444 <forward_lite_dense_if32of32wf32_lut4+0x8c>
 80065a8:	9e06      	ldr	r6, [sp, #24]
 80065aa:	4546      	cmp	r6, r8
 80065ac:	4615      	mov	r5, r2
 80065ae:	d3a6      	bcc.n	80064fe <forward_lite_dense_if32of32wf32_lut4+0x146>
 80065b0:	462a      	mov	r2, r5
 80065b2:	e7cb      	b.n	800654c <forward_lite_dense_if32of32wf32_lut4+0x194>
 80065b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d0df      	beq.n	800657a <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 80065ba:	9b07      	ldr	r3, [sp, #28]
 80065bc:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80065be:	1acb      	subs	r3, r1, r3
 80065c0:	edd3 7a00 	vldr	s15, [r3]
 80065c4:	ecb2 7a01 	vldmia	r2!, {s14}
 80065c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80065cc:	ece3 7a01 	vstmia	r3!, {s15}
 80065d0:	428b      	cmp	r3, r1
 80065d2:	d1f5      	bne.n	80065c0 <forward_lite_dense_if32of32wf32_lut4+0x208>
 80065d4:	9b08      	ldr	r3, [sp, #32]
 80065d6:	428b      	cmp	r3, r1
 80065d8:	d8d2      	bhi.n	8006580 <forward_lite_dense_if32of32wf32_lut4+0x1c8>
 80065da:	b00d      	add	sp, #52	@ 0x34
 80065dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065e0:	4619      	mov	r1, r3
 80065e2:	e7c8      	b.n	8006576 <forward_lite_dense_if32of32wf32_lut4+0x1be>
 80065e4:	9b07      	ldr	r3, [sp, #28]
 80065e6:	1acb      	subs	r3, r1, r3
 80065e8:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80065ea:	461a      	mov	r2, r3
 80065ec:	ed92 7a00 	vldr	s14, [r2]
 80065f0:	ecf0 7a01 	vldmia	r0!, {s15}
 80065f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80065f8:	ece2 7a01 	vstmia	r2!, {s15}
 80065fc:	428a      	cmp	r2, r1
 80065fe:	d1f5      	bne.n	80065ec <forward_lite_dense_if32of32wf32_lut4+0x234>
 8006600:	e7f2      	b.n	80065e8 <forward_lite_dense_if32of32wf32_lut4+0x230>
 8006602:	bf00      	nop
 8006604:	00000000 	.word	0x00000000

08006608 <forward_lite_dense_if32of32wf32_lut8>:
 8006608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800660c:	b087      	sub	sp, #28
 800660e:	460f      	mov	r7, r1
 8006610:	9204      	str	r2, [sp, #16]
 8006612:	e9dd 1213 	ldrd	r1, r2, [sp, #76]	@ 0x4c
 8006616:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006618:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800661a:	fb01 f202 	mul.w	r2, r1, r2
 800661e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006622:	4605      	mov	r5, r0
 8006624:	9202      	str	r2, [sp, #8]
 8006626:	b136      	cbz	r6, 8006636 <forward_lite_dense_if32of32wf32_lut8+0x2e>
 8006628:	4618      	mov	r0, r3
 800662a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800662e:	4631      	mov	r1, r6
 8006630:	f000 f94e 	bl	80068d0 <st_int8_copy>
 8006634:	4633      	mov	r3, r6
 8006636:	9a02      	ldr	r2, [sp, #8]
 8006638:	4295      	cmp	r5, r2
 800663a:	f080 80f9 	bcs.w	8006830 <forward_lite_dense_if32of32wf32_lut8+0x228>
 800663e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006640:	0092      	lsls	r2, r2, #2
 8006642:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 8006646:	9201      	str	r2, [sp, #4]
 8006648:	9205      	str	r2, [sp, #20]
 800664a:	462a      	mov	r2, r5
 800664c:	eb07 1849 	add.w	r8, r7, r9, lsl #5
 8006650:	ea4f 0ac9 	mov.w	sl, r9, lsl #3
 8006654:	464d      	mov	r5, r9
 8006656:	4691      	mov	r9, r2
 8006658:	9a01      	ldr	r2, [sp, #4]
 800665a:	eb09 0e02 	add.w	lr, r9, r2
 800665e:	00a1      	lsls	r1, r4, #2
 8006660:	3720      	adds	r7, #32
 8006662:	45ce      	cmp	lr, r9
 8006664:	f004 0007 	and.w	r0, r4, #7
 8006668:	9103      	str	r1, [sp, #12]
 800666a:	f1a7 0b20 	sub.w	fp, r7, #32
 800666e:	f240 80c8 	bls.w	8006802 <forward_lite_dense_if32of32wf32_lut8+0x1fa>
 8006672:	9a04      	ldr	r2, [sp, #16]
 8006674:	46cc      	mov	ip, r9
 8006676:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8006860 <forward_lite_dense_if32of32wf32_lut8+0x258>
 800667a:	2d00      	cmp	r5, #0
 800667c:	f000 80dd 	beq.w	800683a <forward_lite_dense_if32of32wf32_lut8+0x232>
 8006680:	eb02 060a 	add.w	r6, r2, sl
 8006684:	4639      	mov	r1, r7
 8006686:	7854      	ldrb	r4, [r2, #1]
 8006688:	ed11 3a07 	vldr	s6, [r1, #-28]	@ 0xffffffe4
 800668c:	ed51 3a08 	vldr	s7, [r1, #-32]	@ 0xffffffe0
 8006690:	ed11 4a06 	vldr	s8, [r1, #-24]	@ 0xffffffe8
 8006694:	ed51 4a05 	vldr	s9, [r1, #-20]	@ 0xffffffec
 8006698:	ed11 5a04 	vldr	s10, [r1, #-16]
 800669c:	ed51 5a03 	vldr	s11, [r1, #-12]
 80066a0:	ed11 6a02 	vldr	s12, [r1, #-8]
 80066a4:	ed51 6a01 	vldr	s13, [r1, #-4]
 80066a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80066ac:	edd4 7a00 	vldr	s15, [r4]
 80066b0:	7814      	ldrb	r4, [r2, #0]
 80066b2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80066b6:	ee67 7a83 	vmul.f32	s15, s15, s6
 80066ba:	ed94 3a00 	vldr	s6, [r4]
 80066be:	7894      	ldrb	r4, [r2, #2]
 80066c0:	eee3 7a23 	vfma.f32	s15, s6, s7
 80066c4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80066c8:	3208      	adds	r2, #8
 80066ca:	edd4 3a00 	vldr	s7, [r4]
 80066ce:	f812 4c05 	ldrb.w	r4, [r2, #-5]
 80066d2:	eee3 7a84 	vfma.f32	s15, s7, s8
 80066d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80066da:	3120      	adds	r1, #32
 80066dc:	ed94 4a00 	vldr	s8, [r4]
 80066e0:	f812 4c04 	ldrb.w	r4, [r2, #-4]
 80066e4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80066e8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80066ec:	edd4 4a00 	vldr	s9, [r4]
 80066f0:	f812 4c03 	ldrb.w	r4, [r2, #-3]
 80066f4:	eee4 7a85 	vfma.f32	s15, s9, s10
 80066f8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80066fc:	ed94 5a00 	vldr	s10, [r4]
 8006700:	f812 4c02 	ldrb.w	r4, [r2, #-2]
 8006704:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006708:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800670c:	edd4 5a00 	vldr	s11, [r4]
 8006710:	f812 4c01 	ldrb.w	r4, [r2, #-1]
 8006714:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006718:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800671c:	42b2      	cmp	r2, r6
 800671e:	ed94 6a00 	vldr	s12, [r4]
 8006722:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006726:	ee37 7a27 	vadd.f32	s14, s14, s15
 800672a:	d1ac      	bne.n	8006686 <forward_lite_dense_if32of32wf32_lut8+0x7e>
 800672c:	4642      	mov	r2, r8
 800672e:	2800      	cmp	r0, #0
 8006730:	f000 8081 	beq.w	8006836 <forward_lite_dense_if32of32wf32_lut8+0x22e>
 8006734:	7831      	ldrb	r1, [r6, #0]
 8006736:	edd2 7a00 	vldr	s15, [r2]
 800673a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800673e:	edd1 6a00 	vldr	s13, [r1]
 8006742:	2801      	cmp	r0, #1
 8006744:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006748:	d03f      	beq.n	80067ca <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800674a:	7871      	ldrb	r1, [r6, #1]
 800674c:	edd2 7a01 	vldr	s15, [r2, #4]
 8006750:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006754:	edd1 6a00 	vldr	s13, [r1]
 8006758:	2802      	cmp	r0, #2
 800675a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800675e:	d034      	beq.n	80067ca <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8006760:	78b1      	ldrb	r1, [r6, #2]
 8006762:	edd2 7a02 	vldr	s15, [r2, #8]
 8006766:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800676a:	edd1 6a00 	vldr	s13, [r1]
 800676e:	2803      	cmp	r0, #3
 8006770:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006774:	d029      	beq.n	80067ca <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8006776:	78f1      	ldrb	r1, [r6, #3]
 8006778:	edd2 6a03 	vldr	s13, [r2, #12]
 800677c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006780:	edd1 7a00 	vldr	s15, [r1]
 8006784:	2804      	cmp	r0, #4
 8006786:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800678a:	d01e      	beq.n	80067ca <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800678c:	7931      	ldrb	r1, [r6, #4]
 800678e:	edd2 6a04 	vldr	s13, [r2, #16]
 8006792:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006796:	edd1 7a00 	vldr	s15, [r1]
 800679a:	2805      	cmp	r0, #5
 800679c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80067a0:	d013      	beq.n	80067ca <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 80067a2:	7971      	ldrb	r1, [r6, #5]
 80067a4:	edd2 6a05 	vldr	s13, [r2, #20]
 80067a8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80067ac:	edd1 7a00 	vldr	s15, [r1]
 80067b0:	2806      	cmp	r0, #6
 80067b2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80067b6:	d008      	beq.n	80067ca <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 80067b8:	edd2 7a06 	vldr	s15, [r2, #24]
 80067bc:	79b2      	ldrb	r2, [r6, #6]
 80067be:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80067c2:	edd2 6a00 	vldr	s13, [r2]
 80067c6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80067ca:	1832      	adds	r2, r6, r0
 80067cc:	ecac 7a01 	vstmia	ip!, {s14}
 80067d0:	45e6      	cmp	lr, ip
 80067d2:	f63f af50 	bhi.w	8006676 <forward_lite_dense_if32of32wf32_lut8+0x6e>
 80067d6:	9a05      	ldr	r2, [sp, #20]
 80067d8:	eb09 0402 	add.w	r4, r9, r2
 80067dc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80067de:	b9a2      	cbnz	r2, 800680a <forward_lite_dense_if32of32wf32_lut8+0x202>
 80067e0:	9a02      	ldr	r2, [sp, #8]
 80067e2:	42a2      	cmp	r2, r4
 80067e4:	d924      	bls.n	8006830 <forward_lite_dense_if32of32wf32_lut8+0x228>
 80067e6:	9a03      	ldr	r2, [sp, #12]
 80067e8:	45ce      	cmp	lr, r9
 80067ea:	4490      	add	r8, r2
 80067ec:	4417      	add	r7, r2
 80067ee:	d927      	bls.n	8006840 <forward_lite_dense_if32of32wf32_lut8+0x238>
 80067f0:	9a01      	ldr	r2, [sp, #4]
 80067f2:	46a1      	mov	r9, r4
 80067f4:	eb09 0e02 	add.w	lr, r9, r2
 80067f8:	45ce      	cmp	lr, r9
 80067fa:	f1a7 0b20 	sub.w	fp, r7, #32
 80067fe:	f63f af38 	bhi.w	8006672 <forward_lite_dense_if32of32wf32_lut8+0x6a>
 8006802:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006804:	464c      	mov	r4, r9
 8006806:	2a00      	cmp	r2, #0
 8006808:	d0ea      	beq.n	80067e0 <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 800680a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800680c:	2a00      	cmp	r2, #0
 800680e:	d0e7      	beq.n	80067e0 <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 8006810:	9a01      	ldr	r2, [sp, #4]
 8006812:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006814:	1aa2      	subs	r2, r4, r2
 8006816:	edd2 7a00 	vldr	s15, [r2]
 800681a:	ecb1 7a01 	vldmia	r1!, {s14}
 800681e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006822:	ece2 7a01 	vstmia	r2!, {s15}
 8006826:	4294      	cmp	r4, r2
 8006828:	d1f5      	bne.n	8006816 <forward_lite_dense_if32of32wf32_lut8+0x20e>
 800682a:	9a02      	ldr	r2, [sp, #8]
 800682c:	42a2      	cmp	r2, r4
 800682e:	d8da      	bhi.n	80067e6 <forward_lite_dense_if32of32wf32_lut8+0x1de>
 8006830:	b007      	add	sp, #28
 8006832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006836:	4632      	mov	r2, r6
 8006838:	e7c8      	b.n	80067cc <forward_lite_dense_if32of32wf32_lut8+0x1c4>
 800683a:	4616      	mov	r6, r2
 800683c:	465a      	mov	r2, fp
 800683e:	e776      	b.n	800672e <forward_lite_dense_if32of32wf32_lut8+0x126>
 8006840:	9b01      	ldr	r3, [sp, #4]
 8006842:	1ae3      	subs	r3, r4, r3
 8006844:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006846:	461a      	mov	r2, r3
 8006848:	ed92 7a00 	vldr	s14, [r2]
 800684c:	ecf1 7a01 	vldmia	r1!, {s15}
 8006850:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006854:	ece2 7a01 	vstmia	r2!, {s15}
 8006858:	42a2      	cmp	r2, r4
 800685a:	d1f5      	bne.n	8006848 <forward_lite_dense_if32of32wf32_lut8+0x240>
 800685c:	e7f2      	b.n	8006844 <forward_lite_dense_if32of32wf32_lut8+0x23c>
 800685e:	bf00      	nop
 8006860:	00000000 	.word	0x00000000

08006864 <forward_lite_nl_softmax_if32of32>:
 8006864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006868:	fbb2 f2f3 	udiv	r2, r2, r3
 800686c:	b083      	sub	sp, #12
 800686e:	469b      	mov	fp, r3
 8006870:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8006872:	fbb2 f3f7 	udiv	r3, r2, r7
 8006876:	42ba      	cmp	r2, r7
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	d326      	bcc.n	80068ca <forward_lite_nl_softmax_if32of32+0x66>
 800687c:	fb07 f30b 	mul.w	r3, r7, fp
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	9301      	str	r3, [sp, #4]
 8006884:	f1bb 0f00 	cmp.w	fp, #0
 8006888:	d01f      	beq.n	80068ca <forward_lite_nl_softmax_if32of32+0x66>
 800688a:	970c      	str	r7, [sp, #48]	@ 0x30
 800688c:	465f      	mov	r7, fp
 800688e:	f8dd b030 	ldr.w	fp, [sp, #48]	@ 0x30
 8006892:	4680      	mov	r8, r0
 8006894:	4689      	mov	r9, r1
 8006896:	f04f 0a00 	mov.w	sl, #0
 800689a:	464e      	mov	r6, r9
 800689c:	4645      	mov	r5, r8
 800689e:	2400      	movs	r4, #0
 80068a0:	4631      	mov	r1, r6
 80068a2:	4628      	mov	r0, r5
 80068a4:	463b      	mov	r3, r7
 80068a6:	3401      	adds	r4, #1
 80068a8:	465a      	mov	r2, fp
 80068aa:	f7ff fb3b 	bl	8005f24 <forward_lite_nl_softmax_if32of32_kernel>
 80068ae:	42a7      	cmp	r7, r4
 80068b0:	f106 0604 	add.w	r6, r6, #4
 80068b4:	f105 0504 	add.w	r5, r5, #4
 80068b8:	d1f2      	bne.n	80068a0 <forward_lite_nl_softmax_if32of32+0x3c>
 80068ba:	9b01      	ldr	r3, [sp, #4]
 80068bc:	4499      	add	r9, r3
 80068be:	4498      	add	r8, r3
 80068c0:	9b00      	ldr	r3, [sp, #0]
 80068c2:	f10a 0a01 	add.w	sl, sl, #1
 80068c6:	4553      	cmp	r3, sl
 80068c8:	d8e7      	bhi.n	800689a <forward_lite_nl_softmax_if32of32+0x36>
 80068ca:	b003      	add	sp, #12
 80068cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080068d0 <st_int8_copy>:
 80068d0:	4288      	cmp	r0, r1
 80068d2:	d022      	beq.n	800691a <st_int8_copy+0x4a>
 80068d4:	b30a      	cbz	r2, 800691a <st_int8_copy+0x4a>
 80068d6:	4288      	cmp	r0, r1
 80068d8:	d312      	bcc.n	8006900 <st_int8_copy+0x30>
 80068da:	2a03      	cmp	r2, #3
 80068dc:	d81e      	bhi.n	800691c <st_int8_copy+0x4c>
 80068de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80068e2:	f801 3b01 	strb.w	r3, [r1], #1
 80068e6:	2a01      	cmp	r2, #1
 80068e8:	d017      	beq.n	800691a <st_int8_copy+0x4a>
 80068ea:	f810 3b01 	ldrb.w	r3, [r0], #1
 80068ee:	f801 3b01 	strb.w	r3, [r1], #1
 80068f2:	2a02      	cmp	r2, #2
 80068f4:	d011      	beq.n	800691a <st_int8_copy+0x4a>
 80068f6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80068fa:	f801 3b01 	strb.w	r3, [r1], #1
 80068fe:	4770      	bx	lr
 8006900:	1883      	adds	r3, r0, r2
 8006902:	4299      	cmp	r1, r3
 8006904:	d2e9      	bcs.n	80068da <st_int8_copy+0xa>
 8006906:	4298      	cmp	r0, r3
 8006908:	440a      	add	r2, r1
 800690a:	d206      	bcs.n	800691a <st_int8_copy+0x4a>
 800690c:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8006910:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8006914:	4298      	cmp	r0, r3
 8006916:	d1f9      	bne.n	800690c <st_int8_copy+0x3c>
 8006918:	4770      	bx	lr
 800691a:	4770      	bx	lr
 800691c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006920:	f001 0403 	and.w	r4, r1, #3
 8006924:	f1c4 0304 	rsb	r3, r4, #4
 8006928:	f000 0e03 	and.w	lr, r0, #3
 800692c:	eba2 0c03 	sub.w	ip, r2, r3
 8006930:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006934:	f801 3b01 	strb.w	r3, [r1], #1
 8006938:	2c03      	cmp	r4, #3
 800693a:	f1c4 0202 	rsb	r2, r4, #2
 800693e:	d00e      	beq.n	800695e <st_int8_copy+0x8e>
 8006940:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006944:	f801 3b01 	strb.w	r3, [r1], #1
 8006948:	2a00      	cmp	r2, #0
 800694a:	dd08      	ble.n	800695e <st_int8_copy+0x8e>
 800694c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006950:	f801 3b01 	strb.w	r3, [r1], #1
 8006954:	b91c      	cbnz	r4, 800695e <st_int8_copy+0x8e>
 8006956:	f810 3b01 	ldrb.w	r3, [r0], #1
 800695a:	f801 3b01 	strb.w	r3, [r1], #1
 800695e:	4574      	cmp	r4, lr
 8006960:	d02b      	beq.n	80069ba <st_int8_copy+0xea>
 8006962:	ea4f 131c 	mov.w	r3, ip, lsr #4
 8006966:	1e5a      	subs	r2, r3, #1
 8006968:	b153      	cbz	r3, 8006980 <st_int8_copy+0xb0>
 800696a:	f850 3b04 	ldr.w	r3, [r0], #4
 800696e:	f850 4b04 	ldr.w	r4, [r0], #4
 8006972:	f850 5b04 	ldr.w	r5, [r0], #4
 8006976:	f850 6b04 	ldr.w	r6, [r0], #4
 800697a:	c178      	stmia	r1!, {r3, r4, r5, r6}
 800697c:	3a01      	subs	r2, #1
 800697e:	d2f4      	bcs.n	800696a <st_int8_copy+0x9a>
 8006980:	f01c 0f08 	tst.w	ip, #8
 8006984:	d004      	beq.n	8006990 <st_int8_copy+0xc0>
 8006986:	f850 3b04 	ldr.w	r3, [r0], #4
 800698a:	f850 4b04 	ldr.w	r4, [r0], #4
 800698e:	c118      	stmia	r1!, {r3, r4}
 8006990:	f01c 0f04 	tst.w	ip, #4
 8006994:	d003      	beq.n	800699e <st_int8_copy+0xce>
 8006996:	f850 3b04 	ldr.w	r3, [r0], #4
 800699a:	f841 3b04 	str.w	r3, [r1], #4
 800699e:	f01c 0f02 	tst.w	ip, #2
 80069a2:	d003      	beq.n	80069ac <st_int8_copy+0xdc>
 80069a4:	f830 3b02 	ldrh.w	r3, [r0], #2
 80069a8:	f821 3b02 	strh.w	r3, [r1], #2
 80069ac:	f01c 0f01 	tst.w	ip, #1
 80069b0:	d001      	beq.n	80069b6 <st_int8_copy+0xe6>
 80069b2:	7803      	ldrb	r3, [r0, #0]
 80069b4:	700b      	strb	r3, [r1, #0]
 80069b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80069ba:	ea4f 139c 	mov.w	r3, ip, lsr #6
 80069be:	f103 39ff 	add.w	r9, r3, #4294967295
 80069c2:	b183      	cbz	r3, 80069e6 <st_int8_copy+0x116>
 80069c4:	4688      	mov	r8, r1
 80069c6:	4686      	mov	lr, r0
 80069c8:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80069cc:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80069d0:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80069d4:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80069d8:	f109 39ff 	add.w	r9, r9, #4294967295
 80069dc:	f1b9 3fff 	cmp.w	r9, #4294967295
 80069e0:	4641      	mov	r1, r8
 80069e2:	4670      	mov	r0, lr
 80069e4:	d1ee      	bne.n	80069c4 <st_int8_copy+0xf4>
 80069e6:	f01c 0f20 	tst.w	ip, #32
 80069ea:	d007      	beq.n	80069fc <st_int8_copy+0x12c>
 80069ec:	4688      	mov	r8, r1
 80069ee:	4686      	mov	lr, r0
 80069f0:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80069f4:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 80069f8:	4641      	mov	r1, r8
 80069fa:	4670      	mov	r0, lr
 80069fc:	f01c 0f10 	tst.w	ip, #16
 8006a00:	d001      	beq.n	8006a06 <st_int8_copy+0x136>
 8006a02:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 8006a04:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8006a06:	f01c 0f08 	tst.w	ip, #8
 8006a0a:	d0c1      	beq.n	8006990 <st_int8_copy+0xc0>
 8006a0c:	c818      	ldmia	r0!, {r3, r4}
 8006a0e:	c118      	stmia	r1!, {r3, r4}
 8006a10:	e7be      	b.n	8006990 <st_int8_copy+0xc0>
 8006a12:	bf00      	nop

08006a14 <ai_array_to_buffer_fmt>:
 8006a14:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d055      	beq.n	8006ac8 <ai_array_to_buffer_fmt+0xb4>
 8006a1c:	4a2d      	ldr	r2, [pc, #180]	@ (8006ad4 <ai_array_to_buffer_fmt+0xc0>)
 8006a1e:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d010      	beq.n	8006a48 <ai_array_to_buffer_fmt+0x34>
 8006a26:	dc21      	bgt.n	8006a6c <ai_array_to_buffer_fmt+0x58>
 8006a28:	4a2b      	ldr	r2, [pc, #172]	@ (8006ad8 <ai_array_to_buffer_fmt+0xc4>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d00c      	beq.n	8006a48 <ai_array_to_buffer_fmt+0x34>
 8006a2e:	dd0f      	ble.n	8006a50 <ai_array_to_buffer_fmt+0x3c>
 8006a30:	4a2a      	ldr	r2, [pc, #168]	@ (8006adc <ai_array_to_buffer_fmt+0xc8>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d008      	beq.n	8006a48 <ai_array_to_buffer_fmt+0x34>
 8006a36:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d004      	beq.n	8006a48 <ai_array_to_buffer_fmt+0x34>
 8006a3e:	4a28      	ldr	r2, [pc, #160]	@ (8006ae0 <ai_array_to_buffer_fmt+0xcc>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	bf0c      	ite	eq
 8006a44:	4613      	moveq	r3, r2
 8006a46:	2340      	movne	r3, #64	@ 0x40
 8006a48:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8006a4c:	4318      	orrs	r0, r3
 8006a4e:	4770      	bx	lr
 8006a50:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d0f7      	beq.n	8006a48 <ai_array_to_buffer_fmt+0x34>
 8006a58:	dd2c      	ble.n	8006ab4 <ai_array_to_buffer_fmt+0xa0>
 8006a5a:	4a22      	ldr	r2, [pc, #136]	@ (8006ae4 <ai_array_to_buffer_fmt+0xd0>)
 8006a5c:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8006a60:	4293      	cmp	r3, r2
 8006a62:	bf0c      	ite	eq
 8006a64:	4613      	moveq	r3, r2
 8006a66:	2340      	movne	r3, #64	@ 0x40
 8006a68:	4318      	orrs	r0, r3
 8006a6a:	4770      	bx	lr
 8006a6c:	4a1e      	ldr	r2, [pc, #120]	@ (8006ae8 <ai_array_to_buffer_fmt+0xd4>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d0ea      	beq.n	8006a48 <ai_array_to_buffer_fmt+0x34>
 8006a72:	dd10      	ble.n	8006a96 <ai_array_to_buffer_fmt+0x82>
 8006a74:	4a1d      	ldr	r2, [pc, #116]	@ (8006aec <ai_array_to_buffer_fmt+0xd8>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d0e6      	beq.n	8006a48 <ai_array_to_buffer_fmt+0x34>
 8006a7a:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d0e2      	beq.n	8006a48 <ai_array_to_buffer_fmt+0x34>
 8006a82:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 8006a86:	4293      	cmp	r3, r2
 8006a88:	bf0c      	ite	eq
 8006a8a:	4613      	moveq	r3, r2
 8006a8c:	2340      	movne	r3, #64	@ 0x40
 8006a8e:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8006a92:	4318      	orrs	r0, r3
 8006a94:	4770      	bx	lr
 8006a96:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d0d4      	beq.n	8006a48 <ai_array_to_buffer_fmt+0x34>
 8006a9e:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d0d0      	beq.n	8006a48 <ai_array_to_buffer_fmt+0x34>
 8006aa6:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	bf0c      	ite	eq
 8006aae:	4613      	moveq	r3, r2
 8006ab0:	2340      	movne	r3, #64	@ 0x40
 8006ab2:	e7c9      	b.n	8006a48 <ai_array_to_buffer_fmt+0x34>
 8006ab4:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d0c5      	beq.n	8006a48 <ai_array_to_buffer_fmt+0x34>
 8006abc:	3280      	adds	r2, #128	@ 0x80
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	bf0c      	ite	eq
 8006ac2:	4613      	moveq	r3, r2
 8006ac4:	2340      	movne	r3, #64	@ 0x40
 8006ac6:	e7bf      	b.n	8006a48 <ai_array_to_buffer_fmt+0x34>
 8006ac8:	4b09      	ldr	r3, [pc, #36]	@ (8006af0 <ai_array_to_buffer_fmt+0xdc>)
 8006aca:	4003      	ands	r3, r0
 8006acc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ad0:	e7ba      	b.n	8006a48 <ai_array_to_buffer_fmt+0x34>
 8006ad2:	bf00      	nop
 8006ad4:	00821040 	.word	0x00821040
 8006ad8:	00040840 	.word	0x00040840
 8006adc:	00041040 	.word	0x00041040
 8006ae0:	0004084f 	.word	0x0004084f
 8006ae4:	00040447 	.word	0x00040447
 8006ae8:	00840447 	.word	0x00840447
 8006aec:	0084084f 	.word	0x0084084f
 8006af0:	00803fff 	.word	0x00803fff

08006af4 <ai_array_get_data_byte_size>:
 8006af4:	b169      	cbz	r1, 8006b12 <ai_array_get_data_byte_size+0x1e>
 8006af6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8006afa:	fb03 f101 	mul.w	r1, r3, r1
 8006afe:	1dcb      	adds	r3, r1, #7
 8006b00:	f023 0307 	bic.w	r3, r3, #7
 8006b04:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8006b08:	fa23 f000 	lsr.w	r0, r3, r0
 8006b0c:	3007      	adds	r0, #7
 8006b0e:	08c0      	lsrs	r0, r0, #3
 8006b10:	4770      	bx	lr
 8006b12:	4608      	mov	r0, r1
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop

08006b18 <ai_version_get>:
 8006b18:	0212      	lsls	r2, r2, #8
 8006b1a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006b1e:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8006b22:	4770      	bx	lr

08006b24 <get_tensor_byte_size>:
 8006b24:	b410      	push	{r4}
 8006b26:	6983      	ldr	r3, [r0, #24]
 8006b28:	68c4      	ldr	r4, [r0, #12]
 8006b2a:	6941      	ldr	r1, [r0, #20]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68e0      	ldr	r0, [r4, #12]
 8006b30:	4a07      	ldr	r2, [pc, #28]	@ (8006b50 <get_tensor_byte_size+0x2c>)
 8006b32:	68c9      	ldr	r1, [r1, #12]
 8006b34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b38:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8006b3c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006b40:	fb01 f000 	mul.w	r0, r1, r0
 8006b44:	4293      	cmp	r3, r2
 8006b46:	bf04      	itt	eq
 8006b48:	3007      	addeq	r0, #7
 8006b4a:	08c0      	lsreq	r0, r0, #3
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	000400c0 	.word	0x000400c0

08006b54 <sbrk_aligned>:
 8006b54:	b570      	push	{r4, r5, r6, lr}
 8006b56:	4e0f      	ldr	r6, [pc, #60]	@ (8006b94 <sbrk_aligned+0x40>)
 8006b58:	460c      	mov	r4, r1
 8006b5a:	6831      	ldr	r1, [r6, #0]
 8006b5c:	4605      	mov	r5, r0
 8006b5e:	b911      	cbnz	r1, 8006b66 <sbrk_aligned+0x12>
 8006b60:	f000 faec 	bl	800713c <_sbrk_r>
 8006b64:	6030      	str	r0, [r6, #0]
 8006b66:	4621      	mov	r1, r4
 8006b68:	4628      	mov	r0, r5
 8006b6a:	f000 fae7 	bl	800713c <_sbrk_r>
 8006b6e:	1c43      	adds	r3, r0, #1
 8006b70:	d103      	bne.n	8006b7a <sbrk_aligned+0x26>
 8006b72:	f04f 34ff 	mov.w	r4, #4294967295
 8006b76:	4620      	mov	r0, r4
 8006b78:	bd70      	pop	{r4, r5, r6, pc}
 8006b7a:	1cc4      	adds	r4, r0, #3
 8006b7c:	f024 0403 	bic.w	r4, r4, #3
 8006b80:	42a0      	cmp	r0, r4
 8006b82:	d0f8      	beq.n	8006b76 <sbrk_aligned+0x22>
 8006b84:	1a21      	subs	r1, r4, r0
 8006b86:	4628      	mov	r0, r5
 8006b88:	f000 fad8 	bl	800713c <_sbrk_r>
 8006b8c:	3001      	adds	r0, #1
 8006b8e:	d1f2      	bne.n	8006b76 <sbrk_aligned+0x22>
 8006b90:	e7ef      	b.n	8006b72 <sbrk_aligned+0x1e>
 8006b92:	bf00      	nop
 8006b94:	20001e94 	.word	0x20001e94

08006b98 <_malloc_r>:
 8006b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b9c:	1ccd      	adds	r5, r1, #3
 8006b9e:	f025 0503 	bic.w	r5, r5, #3
 8006ba2:	3508      	adds	r5, #8
 8006ba4:	2d0c      	cmp	r5, #12
 8006ba6:	bf38      	it	cc
 8006ba8:	250c      	movcc	r5, #12
 8006baa:	2d00      	cmp	r5, #0
 8006bac:	4606      	mov	r6, r0
 8006bae:	db01      	blt.n	8006bb4 <_malloc_r+0x1c>
 8006bb0:	42a9      	cmp	r1, r5
 8006bb2:	d904      	bls.n	8006bbe <_malloc_r+0x26>
 8006bb4:	230c      	movs	r3, #12
 8006bb6:	6033      	str	r3, [r6, #0]
 8006bb8:	2000      	movs	r0, #0
 8006bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c94 <_malloc_r+0xfc>
 8006bc2:	f000 f869 	bl	8006c98 <__malloc_lock>
 8006bc6:	f8d8 3000 	ldr.w	r3, [r8]
 8006bca:	461c      	mov	r4, r3
 8006bcc:	bb44      	cbnz	r4, 8006c20 <_malloc_r+0x88>
 8006bce:	4629      	mov	r1, r5
 8006bd0:	4630      	mov	r0, r6
 8006bd2:	f7ff ffbf 	bl	8006b54 <sbrk_aligned>
 8006bd6:	1c43      	adds	r3, r0, #1
 8006bd8:	4604      	mov	r4, r0
 8006bda:	d158      	bne.n	8006c8e <_malloc_r+0xf6>
 8006bdc:	f8d8 4000 	ldr.w	r4, [r8]
 8006be0:	4627      	mov	r7, r4
 8006be2:	2f00      	cmp	r7, #0
 8006be4:	d143      	bne.n	8006c6e <_malloc_r+0xd6>
 8006be6:	2c00      	cmp	r4, #0
 8006be8:	d04b      	beq.n	8006c82 <_malloc_r+0xea>
 8006bea:	6823      	ldr	r3, [r4, #0]
 8006bec:	4639      	mov	r1, r7
 8006bee:	4630      	mov	r0, r6
 8006bf0:	eb04 0903 	add.w	r9, r4, r3
 8006bf4:	f000 faa2 	bl	800713c <_sbrk_r>
 8006bf8:	4581      	cmp	r9, r0
 8006bfa:	d142      	bne.n	8006c82 <_malloc_r+0xea>
 8006bfc:	6821      	ldr	r1, [r4, #0]
 8006bfe:	1a6d      	subs	r5, r5, r1
 8006c00:	4629      	mov	r1, r5
 8006c02:	4630      	mov	r0, r6
 8006c04:	f7ff ffa6 	bl	8006b54 <sbrk_aligned>
 8006c08:	3001      	adds	r0, #1
 8006c0a:	d03a      	beq.n	8006c82 <_malloc_r+0xea>
 8006c0c:	6823      	ldr	r3, [r4, #0]
 8006c0e:	442b      	add	r3, r5
 8006c10:	6023      	str	r3, [r4, #0]
 8006c12:	f8d8 3000 	ldr.w	r3, [r8]
 8006c16:	685a      	ldr	r2, [r3, #4]
 8006c18:	bb62      	cbnz	r2, 8006c74 <_malloc_r+0xdc>
 8006c1a:	f8c8 7000 	str.w	r7, [r8]
 8006c1e:	e00f      	b.n	8006c40 <_malloc_r+0xa8>
 8006c20:	6822      	ldr	r2, [r4, #0]
 8006c22:	1b52      	subs	r2, r2, r5
 8006c24:	d420      	bmi.n	8006c68 <_malloc_r+0xd0>
 8006c26:	2a0b      	cmp	r2, #11
 8006c28:	d917      	bls.n	8006c5a <_malloc_r+0xc2>
 8006c2a:	1961      	adds	r1, r4, r5
 8006c2c:	42a3      	cmp	r3, r4
 8006c2e:	6025      	str	r5, [r4, #0]
 8006c30:	bf18      	it	ne
 8006c32:	6059      	strne	r1, [r3, #4]
 8006c34:	6863      	ldr	r3, [r4, #4]
 8006c36:	bf08      	it	eq
 8006c38:	f8c8 1000 	streq.w	r1, [r8]
 8006c3c:	5162      	str	r2, [r4, r5]
 8006c3e:	604b      	str	r3, [r1, #4]
 8006c40:	4630      	mov	r0, r6
 8006c42:	f000 f82f 	bl	8006ca4 <__malloc_unlock>
 8006c46:	f104 000b 	add.w	r0, r4, #11
 8006c4a:	1d23      	adds	r3, r4, #4
 8006c4c:	f020 0007 	bic.w	r0, r0, #7
 8006c50:	1ac2      	subs	r2, r0, r3
 8006c52:	bf1c      	itt	ne
 8006c54:	1a1b      	subne	r3, r3, r0
 8006c56:	50a3      	strne	r3, [r4, r2]
 8006c58:	e7af      	b.n	8006bba <_malloc_r+0x22>
 8006c5a:	6862      	ldr	r2, [r4, #4]
 8006c5c:	42a3      	cmp	r3, r4
 8006c5e:	bf0c      	ite	eq
 8006c60:	f8c8 2000 	streq.w	r2, [r8]
 8006c64:	605a      	strne	r2, [r3, #4]
 8006c66:	e7eb      	b.n	8006c40 <_malloc_r+0xa8>
 8006c68:	4623      	mov	r3, r4
 8006c6a:	6864      	ldr	r4, [r4, #4]
 8006c6c:	e7ae      	b.n	8006bcc <_malloc_r+0x34>
 8006c6e:	463c      	mov	r4, r7
 8006c70:	687f      	ldr	r7, [r7, #4]
 8006c72:	e7b6      	b.n	8006be2 <_malloc_r+0x4a>
 8006c74:	461a      	mov	r2, r3
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	42a3      	cmp	r3, r4
 8006c7a:	d1fb      	bne.n	8006c74 <_malloc_r+0xdc>
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	6053      	str	r3, [r2, #4]
 8006c80:	e7de      	b.n	8006c40 <_malloc_r+0xa8>
 8006c82:	230c      	movs	r3, #12
 8006c84:	6033      	str	r3, [r6, #0]
 8006c86:	4630      	mov	r0, r6
 8006c88:	f000 f80c 	bl	8006ca4 <__malloc_unlock>
 8006c8c:	e794      	b.n	8006bb8 <_malloc_r+0x20>
 8006c8e:	6005      	str	r5, [r0, #0]
 8006c90:	e7d6      	b.n	8006c40 <_malloc_r+0xa8>
 8006c92:	bf00      	nop
 8006c94:	20001e98 	.word	0x20001e98

08006c98 <__malloc_lock>:
 8006c98:	4801      	ldr	r0, [pc, #4]	@ (8006ca0 <__malloc_lock+0x8>)
 8006c9a:	f000 ba9c 	b.w	80071d6 <__retarget_lock_acquire_recursive>
 8006c9e:	bf00      	nop
 8006ca0:	20001fdc 	.word	0x20001fdc

08006ca4 <__malloc_unlock>:
 8006ca4:	4801      	ldr	r0, [pc, #4]	@ (8006cac <__malloc_unlock+0x8>)
 8006ca6:	f000 ba97 	b.w	80071d8 <__retarget_lock_release_recursive>
 8006caa:	bf00      	nop
 8006cac:	20001fdc 	.word	0x20001fdc

08006cb0 <std>:
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	b510      	push	{r4, lr}
 8006cb4:	4604      	mov	r4, r0
 8006cb6:	e9c0 3300 	strd	r3, r3, [r0]
 8006cba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cbe:	6083      	str	r3, [r0, #8]
 8006cc0:	8181      	strh	r1, [r0, #12]
 8006cc2:	6643      	str	r3, [r0, #100]	@ 0x64
 8006cc4:	81c2      	strh	r2, [r0, #14]
 8006cc6:	6183      	str	r3, [r0, #24]
 8006cc8:	4619      	mov	r1, r3
 8006cca:	2208      	movs	r2, #8
 8006ccc:	305c      	adds	r0, #92	@ 0x5c
 8006cce:	f000 f9f9 	bl	80070c4 <memset>
 8006cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006d08 <std+0x58>)
 8006cd4:	6263      	str	r3, [r4, #36]	@ 0x24
 8006cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8006d0c <std+0x5c>)
 8006cd8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006cda:	4b0d      	ldr	r3, [pc, #52]	@ (8006d10 <std+0x60>)
 8006cdc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006cde:	4b0d      	ldr	r3, [pc, #52]	@ (8006d14 <std+0x64>)
 8006ce0:	6323      	str	r3, [r4, #48]	@ 0x30
 8006ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8006d18 <std+0x68>)
 8006ce4:	6224      	str	r4, [r4, #32]
 8006ce6:	429c      	cmp	r4, r3
 8006ce8:	d006      	beq.n	8006cf8 <std+0x48>
 8006cea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006cee:	4294      	cmp	r4, r2
 8006cf0:	d002      	beq.n	8006cf8 <std+0x48>
 8006cf2:	33d0      	adds	r3, #208	@ 0xd0
 8006cf4:	429c      	cmp	r4, r3
 8006cf6:	d105      	bne.n	8006d04 <std+0x54>
 8006cf8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d00:	f000 ba68 	b.w	80071d4 <__retarget_lock_init_recursive>
 8006d04:	bd10      	pop	{r4, pc}
 8006d06:	bf00      	nop
 8006d08:	08006f15 	.word	0x08006f15
 8006d0c:	08006f37 	.word	0x08006f37
 8006d10:	08006f6f 	.word	0x08006f6f
 8006d14:	08006f93 	.word	0x08006f93
 8006d18:	20001e9c 	.word	0x20001e9c

08006d1c <stdio_exit_handler>:
 8006d1c:	4a02      	ldr	r2, [pc, #8]	@ (8006d28 <stdio_exit_handler+0xc>)
 8006d1e:	4903      	ldr	r1, [pc, #12]	@ (8006d2c <stdio_exit_handler+0x10>)
 8006d20:	4803      	ldr	r0, [pc, #12]	@ (8006d30 <stdio_exit_handler+0x14>)
 8006d22:	f000 b869 	b.w	8006df8 <_fwalk_sglue>
 8006d26:	bf00      	nop
 8006d28:	20000b08 	.word	0x20000b08
 8006d2c:	08007915 	.word	0x08007915
 8006d30:	20000b18 	.word	0x20000b18

08006d34 <cleanup_stdio>:
 8006d34:	6841      	ldr	r1, [r0, #4]
 8006d36:	4b0c      	ldr	r3, [pc, #48]	@ (8006d68 <cleanup_stdio+0x34>)
 8006d38:	4299      	cmp	r1, r3
 8006d3a:	b510      	push	{r4, lr}
 8006d3c:	4604      	mov	r4, r0
 8006d3e:	d001      	beq.n	8006d44 <cleanup_stdio+0x10>
 8006d40:	f000 fde8 	bl	8007914 <_fflush_r>
 8006d44:	68a1      	ldr	r1, [r4, #8]
 8006d46:	4b09      	ldr	r3, [pc, #36]	@ (8006d6c <cleanup_stdio+0x38>)
 8006d48:	4299      	cmp	r1, r3
 8006d4a:	d002      	beq.n	8006d52 <cleanup_stdio+0x1e>
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	f000 fde1 	bl	8007914 <_fflush_r>
 8006d52:	68e1      	ldr	r1, [r4, #12]
 8006d54:	4b06      	ldr	r3, [pc, #24]	@ (8006d70 <cleanup_stdio+0x3c>)
 8006d56:	4299      	cmp	r1, r3
 8006d58:	d004      	beq.n	8006d64 <cleanup_stdio+0x30>
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d60:	f000 bdd8 	b.w	8007914 <_fflush_r>
 8006d64:	bd10      	pop	{r4, pc}
 8006d66:	bf00      	nop
 8006d68:	20001e9c 	.word	0x20001e9c
 8006d6c:	20001f04 	.word	0x20001f04
 8006d70:	20001f6c 	.word	0x20001f6c

08006d74 <global_stdio_init.part.0>:
 8006d74:	b510      	push	{r4, lr}
 8006d76:	4b0b      	ldr	r3, [pc, #44]	@ (8006da4 <global_stdio_init.part.0+0x30>)
 8006d78:	4c0b      	ldr	r4, [pc, #44]	@ (8006da8 <global_stdio_init.part.0+0x34>)
 8006d7a:	4a0c      	ldr	r2, [pc, #48]	@ (8006dac <global_stdio_init.part.0+0x38>)
 8006d7c:	601a      	str	r2, [r3, #0]
 8006d7e:	4620      	mov	r0, r4
 8006d80:	2200      	movs	r2, #0
 8006d82:	2104      	movs	r1, #4
 8006d84:	f7ff ff94 	bl	8006cb0 <std>
 8006d88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	2109      	movs	r1, #9
 8006d90:	f7ff ff8e 	bl	8006cb0 <std>
 8006d94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006d98:	2202      	movs	r2, #2
 8006d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d9e:	2112      	movs	r1, #18
 8006da0:	f7ff bf86 	b.w	8006cb0 <std>
 8006da4:	20001fd4 	.word	0x20001fd4
 8006da8:	20001e9c 	.word	0x20001e9c
 8006dac:	08006d1d 	.word	0x08006d1d

08006db0 <__sfp_lock_acquire>:
 8006db0:	4801      	ldr	r0, [pc, #4]	@ (8006db8 <__sfp_lock_acquire+0x8>)
 8006db2:	f000 ba10 	b.w	80071d6 <__retarget_lock_acquire_recursive>
 8006db6:	bf00      	nop
 8006db8:	20001fdd 	.word	0x20001fdd

08006dbc <__sfp_lock_release>:
 8006dbc:	4801      	ldr	r0, [pc, #4]	@ (8006dc4 <__sfp_lock_release+0x8>)
 8006dbe:	f000 ba0b 	b.w	80071d8 <__retarget_lock_release_recursive>
 8006dc2:	bf00      	nop
 8006dc4:	20001fdd 	.word	0x20001fdd

08006dc8 <__sinit>:
 8006dc8:	b510      	push	{r4, lr}
 8006dca:	4604      	mov	r4, r0
 8006dcc:	f7ff fff0 	bl	8006db0 <__sfp_lock_acquire>
 8006dd0:	6a23      	ldr	r3, [r4, #32]
 8006dd2:	b11b      	cbz	r3, 8006ddc <__sinit+0x14>
 8006dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dd8:	f7ff bff0 	b.w	8006dbc <__sfp_lock_release>
 8006ddc:	4b04      	ldr	r3, [pc, #16]	@ (8006df0 <__sinit+0x28>)
 8006dde:	6223      	str	r3, [r4, #32]
 8006de0:	4b04      	ldr	r3, [pc, #16]	@ (8006df4 <__sinit+0x2c>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1f5      	bne.n	8006dd4 <__sinit+0xc>
 8006de8:	f7ff ffc4 	bl	8006d74 <global_stdio_init.part.0>
 8006dec:	e7f2      	b.n	8006dd4 <__sinit+0xc>
 8006dee:	bf00      	nop
 8006df0:	08006d35 	.word	0x08006d35
 8006df4:	20001fd4 	.word	0x20001fd4

08006df8 <_fwalk_sglue>:
 8006df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dfc:	4607      	mov	r7, r0
 8006dfe:	4688      	mov	r8, r1
 8006e00:	4614      	mov	r4, r2
 8006e02:	2600      	movs	r6, #0
 8006e04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e08:	f1b9 0901 	subs.w	r9, r9, #1
 8006e0c:	d505      	bpl.n	8006e1a <_fwalk_sglue+0x22>
 8006e0e:	6824      	ldr	r4, [r4, #0]
 8006e10:	2c00      	cmp	r4, #0
 8006e12:	d1f7      	bne.n	8006e04 <_fwalk_sglue+0xc>
 8006e14:	4630      	mov	r0, r6
 8006e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e1a:	89ab      	ldrh	r3, [r5, #12]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d907      	bls.n	8006e30 <_fwalk_sglue+0x38>
 8006e20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e24:	3301      	adds	r3, #1
 8006e26:	d003      	beq.n	8006e30 <_fwalk_sglue+0x38>
 8006e28:	4629      	mov	r1, r5
 8006e2a:	4638      	mov	r0, r7
 8006e2c:	47c0      	blx	r8
 8006e2e:	4306      	orrs	r6, r0
 8006e30:	3568      	adds	r5, #104	@ 0x68
 8006e32:	e7e9      	b.n	8006e08 <_fwalk_sglue+0x10>

08006e34 <iprintf>:
 8006e34:	b40f      	push	{r0, r1, r2, r3}
 8006e36:	b507      	push	{r0, r1, r2, lr}
 8006e38:	4906      	ldr	r1, [pc, #24]	@ (8006e54 <iprintf+0x20>)
 8006e3a:	ab04      	add	r3, sp, #16
 8006e3c:	6808      	ldr	r0, [r1, #0]
 8006e3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e42:	6881      	ldr	r1, [r0, #8]
 8006e44:	9301      	str	r3, [sp, #4]
 8006e46:	f000 fa3d 	bl	80072c4 <_vfiprintf_r>
 8006e4a:	b003      	add	sp, #12
 8006e4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e50:	b004      	add	sp, #16
 8006e52:	4770      	bx	lr
 8006e54:	20000b14 	.word	0x20000b14

08006e58 <_puts_r>:
 8006e58:	6a03      	ldr	r3, [r0, #32]
 8006e5a:	b570      	push	{r4, r5, r6, lr}
 8006e5c:	6884      	ldr	r4, [r0, #8]
 8006e5e:	4605      	mov	r5, r0
 8006e60:	460e      	mov	r6, r1
 8006e62:	b90b      	cbnz	r3, 8006e68 <_puts_r+0x10>
 8006e64:	f7ff ffb0 	bl	8006dc8 <__sinit>
 8006e68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e6a:	07db      	lsls	r3, r3, #31
 8006e6c:	d405      	bmi.n	8006e7a <_puts_r+0x22>
 8006e6e:	89a3      	ldrh	r3, [r4, #12]
 8006e70:	0598      	lsls	r0, r3, #22
 8006e72:	d402      	bmi.n	8006e7a <_puts_r+0x22>
 8006e74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e76:	f000 f9ae 	bl	80071d6 <__retarget_lock_acquire_recursive>
 8006e7a:	89a3      	ldrh	r3, [r4, #12]
 8006e7c:	0719      	lsls	r1, r3, #28
 8006e7e:	d502      	bpl.n	8006e86 <_puts_r+0x2e>
 8006e80:	6923      	ldr	r3, [r4, #16]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d135      	bne.n	8006ef2 <_puts_r+0x9a>
 8006e86:	4621      	mov	r1, r4
 8006e88:	4628      	mov	r0, r5
 8006e8a:	f000 f8c5 	bl	8007018 <__swsetup_r>
 8006e8e:	b380      	cbz	r0, 8006ef2 <_puts_r+0x9a>
 8006e90:	f04f 35ff 	mov.w	r5, #4294967295
 8006e94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e96:	07da      	lsls	r2, r3, #31
 8006e98:	d405      	bmi.n	8006ea6 <_puts_r+0x4e>
 8006e9a:	89a3      	ldrh	r3, [r4, #12]
 8006e9c:	059b      	lsls	r3, r3, #22
 8006e9e:	d402      	bmi.n	8006ea6 <_puts_r+0x4e>
 8006ea0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ea2:	f000 f999 	bl	80071d8 <__retarget_lock_release_recursive>
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	bd70      	pop	{r4, r5, r6, pc}
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	da04      	bge.n	8006eb8 <_puts_r+0x60>
 8006eae:	69a2      	ldr	r2, [r4, #24]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	dc17      	bgt.n	8006ee4 <_puts_r+0x8c>
 8006eb4:	290a      	cmp	r1, #10
 8006eb6:	d015      	beq.n	8006ee4 <_puts_r+0x8c>
 8006eb8:	6823      	ldr	r3, [r4, #0]
 8006eba:	1c5a      	adds	r2, r3, #1
 8006ebc:	6022      	str	r2, [r4, #0]
 8006ebe:	7019      	strb	r1, [r3, #0]
 8006ec0:	68a3      	ldr	r3, [r4, #8]
 8006ec2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	60a3      	str	r3, [r4, #8]
 8006eca:	2900      	cmp	r1, #0
 8006ecc:	d1ed      	bne.n	8006eaa <_puts_r+0x52>
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	da11      	bge.n	8006ef6 <_puts_r+0x9e>
 8006ed2:	4622      	mov	r2, r4
 8006ed4:	210a      	movs	r1, #10
 8006ed6:	4628      	mov	r0, r5
 8006ed8:	f000 f85f 	bl	8006f9a <__swbuf_r>
 8006edc:	3001      	adds	r0, #1
 8006ede:	d0d7      	beq.n	8006e90 <_puts_r+0x38>
 8006ee0:	250a      	movs	r5, #10
 8006ee2:	e7d7      	b.n	8006e94 <_puts_r+0x3c>
 8006ee4:	4622      	mov	r2, r4
 8006ee6:	4628      	mov	r0, r5
 8006ee8:	f000 f857 	bl	8006f9a <__swbuf_r>
 8006eec:	3001      	adds	r0, #1
 8006eee:	d1e7      	bne.n	8006ec0 <_puts_r+0x68>
 8006ef0:	e7ce      	b.n	8006e90 <_puts_r+0x38>
 8006ef2:	3e01      	subs	r6, #1
 8006ef4:	e7e4      	b.n	8006ec0 <_puts_r+0x68>
 8006ef6:	6823      	ldr	r3, [r4, #0]
 8006ef8:	1c5a      	adds	r2, r3, #1
 8006efa:	6022      	str	r2, [r4, #0]
 8006efc:	220a      	movs	r2, #10
 8006efe:	701a      	strb	r2, [r3, #0]
 8006f00:	e7ee      	b.n	8006ee0 <_puts_r+0x88>
	...

08006f04 <puts>:
 8006f04:	4b02      	ldr	r3, [pc, #8]	@ (8006f10 <puts+0xc>)
 8006f06:	4601      	mov	r1, r0
 8006f08:	6818      	ldr	r0, [r3, #0]
 8006f0a:	f7ff bfa5 	b.w	8006e58 <_puts_r>
 8006f0e:	bf00      	nop
 8006f10:	20000b14 	.word	0x20000b14

08006f14 <__sread>:
 8006f14:	b510      	push	{r4, lr}
 8006f16:	460c      	mov	r4, r1
 8006f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f1c:	f000 f8fc 	bl	8007118 <_read_r>
 8006f20:	2800      	cmp	r0, #0
 8006f22:	bfab      	itete	ge
 8006f24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f26:	89a3      	ldrhlt	r3, [r4, #12]
 8006f28:	181b      	addge	r3, r3, r0
 8006f2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006f2e:	bfac      	ite	ge
 8006f30:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006f32:	81a3      	strhlt	r3, [r4, #12]
 8006f34:	bd10      	pop	{r4, pc}

08006f36 <__swrite>:
 8006f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f3a:	461f      	mov	r7, r3
 8006f3c:	898b      	ldrh	r3, [r1, #12]
 8006f3e:	05db      	lsls	r3, r3, #23
 8006f40:	4605      	mov	r5, r0
 8006f42:	460c      	mov	r4, r1
 8006f44:	4616      	mov	r6, r2
 8006f46:	d505      	bpl.n	8006f54 <__swrite+0x1e>
 8006f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f4c:	2302      	movs	r3, #2
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f000 f8d0 	bl	80070f4 <_lseek_r>
 8006f54:	89a3      	ldrh	r3, [r4, #12]
 8006f56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f5e:	81a3      	strh	r3, [r4, #12]
 8006f60:	4632      	mov	r2, r6
 8006f62:	463b      	mov	r3, r7
 8006f64:	4628      	mov	r0, r5
 8006f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f6a:	f000 b8f7 	b.w	800715c <_write_r>

08006f6e <__sseek>:
 8006f6e:	b510      	push	{r4, lr}
 8006f70:	460c      	mov	r4, r1
 8006f72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f76:	f000 f8bd 	bl	80070f4 <_lseek_r>
 8006f7a:	1c43      	adds	r3, r0, #1
 8006f7c:	89a3      	ldrh	r3, [r4, #12]
 8006f7e:	bf15      	itete	ne
 8006f80:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006f82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006f86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006f8a:	81a3      	strheq	r3, [r4, #12]
 8006f8c:	bf18      	it	ne
 8006f8e:	81a3      	strhne	r3, [r4, #12]
 8006f90:	bd10      	pop	{r4, pc}

08006f92 <__sclose>:
 8006f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f96:	f000 b89d 	b.w	80070d4 <_close_r>

08006f9a <__swbuf_r>:
 8006f9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9c:	460e      	mov	r6, r1
 8006f9e:	4614      	mov	r4, r2
 8006fa0:	4605      	mov	r5, r0
 8006fa2:	b118      	cbz	r0, 8006fac <__swbuf_r+0x12>
 8006fa4:	6a03      	ldr	r3, [r0, #32]
 8006fa6:	b90b      	cbnz	r3, 8006fac <__swbuf_r+0x12>
 8006fa8:	f7ff ff0e 	bl	8006dc8 <__sinit>
 8006fac:	69a3      	ldr	r3, [r4, #24]
 8006fae:	60a3      	str	r3, [r4, #8]
 8006fb0:	89a3      	ldrh	r3, [r4, #12]
 8006fb2:	071a      	lsls	r2, r3, #28
 8006fb4:	d501      	bpl.n	8006fba <__swbuf_r+0x20>
 8006fb6:	6923      	ldr	r3, [r4, #16]
 8006fb8:	b943      	cbnz	r3, 8006fcc <__swbuf_r+0x32>
 8006fba:	4621      	mov	r1, r4
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	f000 f82b 	bl	8007018 <__swsetup_r>
 8006fc2:	b118      	cbz	r0, 8006fcc <__swbuf_r+0x32>
 8006fc4:	f04f 37ff 	mov.w	r7, #4294967295
 8006fc8:	4638      	mov	r0, r7
 8006fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fcc:	6823      	ldr	r3, [r4, #0]
 8006fce:	6922      	ldr	r2, [r4, #16]
 8006fd0:	1a98      	subs	r0, r3, r2
 8006fd2:	6963      	ldr	r3, [r4, #20]
 8006fd4:	b2f6      	uxtb	r6, r6
 8006fd6:	4283      	cmp	r3, r0
 8006fd8:	4637      	mov	r7, r6
 8006fda:	dc05      	bgt.n	8006fe8 <__swbuf_r+0x4e>
 8006fdc:	4621      	mov	r1, r4
 8006fde:	4628      	mov	r0, r5
 8006fe0:	f000 fc98 	bl	8007914 <_fflush_r>
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	d1ed      	bne.n	8006fc4 <__swbuf_r+0x2a>
 8006fe8:	68a3      	ldr	r3, [r4, #8]
 8006fea:	3b01      	subs	r3, #1
 8006fec:	60a3      	str	r3, [r4, #8]
 8006fee:	6823      	ldr	r3, [r4, #0]
 8006ff0:	1c5a      	adds	r2, r3, #1
 8006ff2:	6022      	str	r2, [r4, #0]
 8006ff4:	701e      	strb	r6, [r3, #0]
 8006ff6:	6962      	ldr	r2, [r4, #20]
 8006ff8:	1c43      	adds	r3, r0, #1
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d004      	beq.n	8007008 <__swbuf_r+0x6e>
 8006ffe:	89a3      	ldrh	r3, [r4, #12]
 8007000:	07db      	lsls	r3, r3, #31
 8007002:	d5e1      	bpl.n	8006fc8 <__swbuf_r+0x2e>
 8007004:	2e0a      	cmp	r6, #10
 8007006:	d1df      	bne.n	8006fc8 <__swbuf_r+0x2e>
 8007008:	4621      	mov	r1, r4
 800700a:	4628      	mov	r0, r5
 800700c:	f000 fc82 	bl	8007914 <_fflush_r>
 8007010:	2800      	cmp	r0, #0
 8007012:	d0d9      	beq.n	8006fc8 <__swbuf_r+0x2e>
 8007014:	e7d6      	b.n	8006fc4 <__swbuf_r+0x2a>
	...

08007018 <__swsetup_r>:
 8007018:	b538      	push	{r3, r4, r5, lr}
 800701a:	4b29      	ldr	r3, [pc, #164]	@ (80070c0 <__swsetup_r+0xa8>)
 800701c:	4605      	mov	r5, r0
 800701e:	6818      	ldr	r0, [r3, #0]
 8007020:	460c      	mov	r4, r1
 8007022:	b118      	cbz	r0, 800702c <__swsetup_r+0x14>
 8007024:	6a03      	ldr	r3, [r0, #32]
 8007026:	b90b      	cbnz	r3, 800702c <__swsetup_r+0x14>
 8007028:	f7ff fece 	bl	8006dc8 <__sinit>
 800702c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007030:	0719      	lsls	r1, r3, #28
 8007032:	d422      	bmi.n	800707a <__swsetup_r+0x62>
 8007034:	06da      	lsls	r2, r3, #27
 8007036:	d407      	bmi.n	8007048 <__swsetup_r+0x30>
 8007038:	2209      	movs	r2, #9
 800703a:	602a      	str	r2, [r5, #0]
 800703c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007040:	81a3      	strh	r3, [r4, #12]
 8007042:	f04f 30ff 	mov.w	r0, #4294967295
 8007046:	e033      	b.n	80070b0 <__swsetup_r+0x98>
 8007048:	0758      	lsls	r0, r3, #29
 800704a:	d512      	bpl.n	8007072 <__swsetup_r+0x5a>
 800704c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800704e:	b141      	cbz	r1, 8007062 <__swsetup_r+0x4a>
 8007050:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007054:	4299      	cmp	r1, r3
 8007056:	d002      	beq.n	800705e <__swsetup_r+0x46>
 8007058:	4628      	mov	r0, r5
 800705a:	f000 f8bf 	bl	80071dc <_free_r>
 800705e:	2300      	movs	r3, #0
 8007060:	6363      	str	r3, [r4, #52]	@ 0x34
 8007062:	89a3      	ldrh	r3, [r4, #12]
 8007064:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007068:	81a3      	strh	r3, [r4, #12]
 800706a:	2300      	movs	r3, #0
 800706c:	6063      	str	r3, [r4, #4]
 800706e:	6923      	ldr	r3, [r4, #16]
 8007070:	6023      	str	r3, [r4, #0]
 8007072:	89a3      	ldrh	r3, [r4, #12]
 8007074:	f043 0308 	orr.w	r3, r3, #8
 8007078:	81a3      	strh	r3, [r4, #12]
 800707a:	6923      	ldr	r3, [r4, #16]
 800707c:	b94b      	cbnz	r3, 8007092 <__swsetup_r+0x7a>
 800707e:	89a3      	ldrh	r3, [r4, #12]
 8007080:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007084:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007088:	d003      	beq.n	8007092 <__swsetup_r+0x7a>
 800708a:	4621      	mov	r1, r4
 800708c:	4628      	mov	r0, r5
 800708e:	f000 fc8f 	bl	80079b0 <__smakebuf_r>
 8007092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007096:	f013 0201 	ands.w	r2, r3, #1
 800709a:	d00a      	beq.n	80070b2 <__swsetup_r+0x9a>
 800709c:	2200      	movs	r2, #0
 800709e:	60a2      	str	r2, [r4, #8]
 80070a0:	6962      	ldr	r2, [r4, #20]
 80070a2:	4252      	negs	r2, r2
 80070a4:	61a2      	str	r2, [r4, #24]
 80070a6:	6922      	ldr	r2, [r4, #16]
 80070a8:	b942      	cbnz	r2, 80070bc <__swsetup_r+0xa4>
 80070aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80070ae:	d1c5      	bne.n	800703c <__swsetup_r+0x24>
 80070b0:	bd38      	pop	{r3, r4, r5, pc}
 80070b2:	0799      	lsls	r1, r3, #30
 80070b4:	bf58      	it	pl
 80070b6:	6962      	ldrpl	r2, [r4, #20]
 80070b8:	60a2      	str	r2, [r4, #8]
 80070ba:	e7f4      	b.n	80070a6 <__swsetup_r+0x8e>
 80070bc:	2000      	movs	r0, #0
 80070be:	e7f7      	b.n	80070b0 <__swsetup_r+0x98>
 80070c0:	20000b14 	.word	0x20000b14

080070c4 <memset>:
 80070c4:	4402      	add	r2, r0
 80070c6:	4603      	mov	r3, r0
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d100      	bne.n	80070ce <memset+0xa>
 80070cc:	4770      	bx	lr
 80070ce:	f803 1b01 	strb.w	r1, [r3], #1
 80070d2:	e7f9      	b.n	80070c8 <memset+0x4>

080070d4 <_close_r>:
 80070d4:	b538      	push	{r3, r4, r5, lr}
 80070d6:	4d06      	ldr	r5, [pc, #24]	@ (80070f0 <_close_r+0x1c>)
 80070d8:	2300      	movs	r3, #0
 80070da:	4604      	mov	r4, r0
 80070dc:	4608      	mov	r0, r1
 80070de:	602b      	str	r3, [r5, #0]
 80070e0:	f000 fdf8 	bl	8007cd4 <_close>
 80070e4:	1c43      	adds	r3, r0, #1
 80070e6:	d102      	bne.n	80070ee <_close_r+0x1a>
 80070e8:	682b      	ldr	r3, [r5, #0]
 80070ea:	b103      	cbz	r3, 80070ee <_close_r+0x1a>
 80070ec:	6023      	str	r3, [r4, #0]
 80070ee:	bd38      	pop	{r3, r4, r5, pc}
 80070f0:	20001fd8 	.word	0x20001fd8

080070f4 <_lseek_r>:
 80070f4:	b538      	push	{r3, r4, r5, lr}
 80070f6:	4d07      	ldr	r5, [pc, #28]	@ (8007114 <_lseek_r+0x20>)
 80070f8:	4604      	mov	r4, r0
 80070fa:	4608      	mov	r0, r1
 80070fc:	4611      	mov	r1, r2
 80070fe:	2200      	movs	r2, #0
 8007100:	602a      	str	r2, [r5, #0]
 8007102:	461a      	mov	r2, r3
 8007104:	f000 fdfe 	bl	8007d04 <_lseek>
 8007108:	1c43      	adds	r3, r0, #1
 800710a:	d102      	bne.n	8007112 <_lseek_r+0x1e>
 800710c:	682b      	ldr	r3, [r5, #0]
 800710e:	b103      	cbz	r3, 8007112 <_lseek_r+0x1e>
 8007110:	6023      	str	r3, [r4, #0]
 8007112:	bd38      	pop	{r3, r4, r5, pc}
 8007114:	20001fd8 	.word	0x20001fd8

08007118 <_read_r>:
 8007118:	b538      	push	{r3, r4, r5, lr}
 800711a:	4d07      	ldr	r5, [pc, #28]	@ (8007138 <_read_r+0x20>)
 800711c:	4604      	mov	r4, r0
 800711e:	4608      	mov	r0, r1
 8007120:	4611      	mov	r1, r2
 8007122:	2200      	movs	r2, #0
 8007124:	602a      	str	r2, [r5, #0]
 8007126:	461a      	mov	r2, r3
 8007128:	f000 fdf4 	bl	8007d14 <_read>
 800712c:	1c43      	adds	r3, r0, #1
 800712e:	d102      	bne.n	8007136 <_read_r+0x1e>
 8007130:	682b      	ldr	r3, [r5, #0]
 8007132:	b103      	cbz	r3, 8007136 <_read_r+0x1e>
 8007134:	6023      	str	r3, [r4, #0]
 8007136:	bd38      	pop	{r3, r4, r5, pc}
 8007138:	20001fd8 	.word	0x20001fd8

0800713c <_sbrk_r>:
 800713c:	b538      	push	{r3, r4, r5, lr}
 800713e:	4d06      	ldr	r5, [pc, #24]	@ (8007158 <_sbrk_r+0x1c>)
 8007140:	2300      	movs	r3, #0
 8007142:	4604      	mov	r4, r0
 8007144:	4608      	mov	r0, r1
 8007146:	602b      	str	r3, [r5, #0]
 8007148:	f7f9 fed8 	bl	8000efc <_sbrk>
 800714c:	1c43      	adds	r3, r0, #1
 800714e:	d102      	bne.n	8007156 <_sbrk_r+0x1a>
 8007150:	682b      	ldr	r3, [r5, #0]
 8007152:	b103      	cbz	r3, 8007156 <_sbrk_r+0x1a>
 8007154:	6023      	str	r3, [r4, #0]
 8007156:	bd38      	pop	{r3, r4, r5, pc}
 8007158:	20001fd8 	.word	0x20001fd8

0800715c <_write_r>:
 800715c:	b538      	push	{r3, r4, r5, lr}
 800715e:	4d07      	ldr	r5, [pc, #28]	@ (800717c <_write_r+0x20>)
 8007160:	4604      	mov	r4, r0
 8007162:	4608      	mov	r0, r1
 8007164:	4611      	mov	r1, r2
 8007166:	2200      	movs	r2, #0
 8007168:	602a      	str	r2, [r5, #0]
 800716a:	461a      	mov	r2, r3
 800716c:	f000 fdda 	bl	8007d24 <_write>
 8007170:	1c43      	adds	r3, r0, #1
 8007172:	d102      	bne.n	800717a <_write_r+0x1e>
 8007174:	682b      	ldr	r3, [r5, #0]
 8007176:	b103      	cbz	r3, 800717a <_write_r+0x1e>
 8007178:	6023      	str	r3, [r4, #0]
 800717a:	bd38      	pop	{r3, r4, r5, pc}
 800717c:	20001fd8 	.word	0x20001fd8

08007180 <__errno>:
 8007180:	4b01      	ldr	r3, [pc, #4]	@ (8007188 <__errno+0x8>)
 8007182:	6818      	ldr	r0, [r3, #0]
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	20000b14 	.word	0x20000b14

0800718c <__libc_init_array>:
 800718c:	b570      	push	{r4, r5, r6, lr}
 800718e:	4d0d      	ldr	r5, [pc, #52]	@ (80071c4 <__libc_init_array+0x38>)
 8007190:	4c0d      	ldr	r4, [pc, #52]	@ (80071c8 <__libc_init_array+0x3c>)
 8007192:	1b64      	subs	r4, r4, r5
 8007194:	10a4      	asrs	r4, r4, #2
 8007196:	2600      	movs	r6, #0
 8007198:	42a6      	cmp	r6, r4
 800719a:	d109      	bne.n	80071b0 <__libc_init_array+0x24>
 800719c:	4d0b      	ldr	r5, [pc, #44]	@ (80071cc <__libc_init_array+0x40>)
 800719e:	4c0c      	ldr	r4, [pc, #48]	@ (80071d0 <__libc_init_array+0x44>)
 80071a0:	f000 fdc8 	bl	8007d34 <_init>
 80071a4:	1b64      	subs	r4, r4, r5
 80071a6:	10a4      	asrs	r4, r4, #2
 80071a8:	2600      	movs	r6, #0
 80071aa:	42a6      	cmp	r6, r4
 80071ac:	d105      	bne.n	80071ba <__libc_init_array+0x2e>
 80071ae:	bd70      	pop	{r4, r5, r6, pc}
 80071b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80071b4:	4798      	blx	r3
 80071b6:	3601      	adds	r6, #1
 80071b8:	e7ee      	b.n	8007198 <__libc_init_array+0xc>
 80071ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80071be:	4798      	blx	r3
 80071c0:	3601      	adds	r6, #1
 80071c2:	e7f2      	b.n	80071aa <__libc_init_array+0x1e>
 80071c4:	08055578 	.word	0x08055578
 80071c8:	08055578 	.word	0x08055578
 80071cc:	08055578 	.word	0x08055578
 80071d0:	0805557c 	.word	0x0805557c

080071d4 <__retarget_lock_init_recursive>:
 80071d4:	4770      	bx	lr

080071d6 <__retarget_lock_acquire_recursive>:
 80071d6:	4770      	bx	lr

080071d8 <__retarget_lock_release_recursive>:
 80071d8:	4770      	bx	lr
	...

080071dc <_free_r>:
 80071dc:	b538      	push	{r3, r4, r5, lr}
 80071de:	4605      	mov	r5, r0
 80071e0:	2900      	cmp	r1, #0
 80071e2:	d041      	beq.n	8007268 <_free_r+0x8c>
 80071e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071e8:	1f0c      	subs	r4, r1, #4
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	bfb8      	it	lt
 80071ee:	18e4      	addlt	r4, r4, r3
 80071f0:	f7ff fd52 	bl	8006c98 <__malloc_lock>
 80071f4:	4a1d      	ldr	r2, [pc, #116]	@ (800726c <_free_r+0x90>)
 80071f6:	6813      	ldr	r3, [r2, #0]
 80071f8:	b933      	cbnz	r3, 8007208 <_free_r+0x2c>
 80071fa:	6063      	str	r3, [r4, #4]
 80071fc:	6014      	str	r4, [r2, #0]
 80071fe:	4628      	mov	r0, r5
 8007200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007204:	f7ff bd4e 	b.w	8006ca4 <__malloc_unlock>
 8007208:	42a3      	cmp	r3, r4
 800720a:	d908      	bls.n	800721e <_free_r+0x42>
 800720c:	6820      	ldr	r0, [r4, #0]
 800720e:	1821      	adds	r1, r4, r0
 8007210:	428b      	cmp	r3, r1
 8007212:	bf01      	itttt	eq
 8007214:	6819      	ldreq	r1, [r3, #0]
 8007216:	685b      	ldreq	r3, [r3, #4]
 8007218:	1809      	addeq	r1, r1, r0
 800721a:	6021      	streq	r1, [r4, #0]
 800721c:	e7ed      	b.n	80071fa <_free_r+0x1e>
 800721e:	461a      	mov	r2, r3
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	b10b      	cbz	r3, 8007228 <_free_r+0x4c>
 8007224:	42a3      	cmp	r3, r4
 8007226:	d9fa      	bls.n	800721e <_free_r+0x42>
 8007228:	6811      	ldr	r1, [r2, #0]
 800722a:	1850      	adds	r0, r2, r1
 800722c:	42a0      	cmp	r0, r4
 800722e:	d10b      	bne.n	8007248 <_free_r+0x6c>
 8007230:	6820      	ldr	r0, [r4, #0]
 8007232:	4401      	add	r1, r0
 8007234:	1850      	adds	r0, r2, r1
 8007236:	4283      	cmp	r3, r0
 8007238:	6011      	str	r1, [r2, #0]
 800723a:	d1e0      	bne.n	80071fe <_free_r+0x22>
 800723c:	6818      	ldr	r0, [r3, #0]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	6053      	str	r3, [r2, #4]
 8007242:	4408      	add	r0, r1
 8007244:	6010      	str	r0, [r2, #0]
 8007246:	e7da      	b.n	80071fe <_free_r+0x22>
 8007248:	d902      	bls.n	8007250 <_free_r+0x74>
 800724a:	230c      	movs	r3, #12
 800724c:	602b      	str	r3, [r5, #0]
 800724e:	e7d6      	b.n	80071fe <_free_r+0x22>
 8007250:	6820      	ldr	r0, [r4, #0]
 8007252:	1821      	adds	r1, r4, r0
 8007254:	428b      	cmp	r3, r1
 8007256:	bf04      	itt	eq
 8007258:	6819      	ldreq	r1, [r3, #0]
 800725a:	685b      	ldreq	r3, [r3, #4]
 800725c:	6063      	str	r3, [r4, #4]
 800725e:	bf04      	itt	eq
 8007260:	1809      	addeq	r1, r1, r0
 8007262:	6021      	streq	r1, [r4, #0]
 8007264:	6054      	str	r4, [r2, #4]
 8007266:	e7ca      	b.n	80071fe <_free_r+0x22>
 8007268:	bd38      	pop	{r3, r4, r5, pc}
 800726a:	bf00      	nop
 800726c:	20001e98 	.word	0x20001e98

08007270 <__sfputc_r>:
 8007270:	6893      	ldr	r3, [r2, #8]
 8007272:	3b01      	subs	r3, #1
 8007274:	2b00      	cmp	r3, #0
 8007276:	b410      	push	{r4}
 8007278:	6093      	str	r3, [r2, #8]
 800727a:	da08      	bge.n	800728e <__sfputc_r+0x1e>
 800727c:	6994      	ldr	r4, [r2, #24]
 800727e:	42a3      	cmp	r3, r4
 8007280:	db01      	blt.n	8007286 <__sfputc_r+0x16>
 8007282:	290a      	cmp	r1, #10
 8007284:	d103      	bne.n	800728e <__sfputc_r+0x1e>
 8007286:	f85d 4b04 	ldr.w	r4, [sp], #4
 800728a:	f7ff be86 	b.w	8006f9a <__swbuf_r>
 800728e:	6813      	ldr	r3, [r2, #0]
 8007290:	1c58      	adds	r0, r3, #1
 8007292:	6010      	str	r0, [r2, #0]
 8007294:	7019      	strb	r1, [r3, #0]
 8007296:	4608      	mov	r0, r1
 8007298:	f85d 4b04 	ldr.w	r4, [sp], #4
 800729c:	4770      	bx	lr

0800729e <__sfputs_r>:
 800729e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072a0:	4606      	mov	r6, r0
 80072a2:	460f      	mov	r7, r1
 80072a4:	4614      	mov	r4, r2
 80072a6:	18d5      	adds	r5, r2, r3
 80072a8:	42ac      	cmp	r4, r5
 80072aa:	d101      	bne.n	80072b0 <__sfputs_r+0x12>
 80072ac:	2000      	movs	r0, #0
 80072ae:	e007      	b.n	80072c0 <__sfputs_r+0x22>
 80072b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072b4:	463a      	mov	r2, r7
 80072b6:	4630      	mov	r0, r6
 80072b8:	f7ff ffda 	bl	8007270 <__sfputc_r>
 80072bc:	1c43      	adds	r3, r0, #1
 80072be:	d1f3      	bne.n	80072a8 <__sfputs_r+0xa>
 80072c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080072c4 <_vfiprintf_r>:
 80072c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c8:	460d      	mov	r5, r1
 80072ca:	b09d      	sub	sp, #116	@ 0x74
 80072cc:	4614      	mov	r4, r2
 80072ce:	4698      	mov	r8, r3
 80072d0:	4606      	mov	r6, r0
 80072d2:	b118      	cbz	r0, 80072dc <_vfiprintf_r+0x18>
 80072d4:	6a03      	ldr	r3, [r0, #32]
 80072d6:	b90b      	cbnz	r3, 80072dc <_vfiprintf_r+0x18>
 80072d8:	f7ff fd76 	bl	8006dc8 <__sinit>
 80072dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072de:	07d9      	lsls	r1, r3, #31
 80072e0:	d405      	bmi.n	80072ee <_vfiprintf_r+0x2a>
 80072e2:	89ab      	ldrh	r3, [r5, #12]
 80072e4:	059a      	lsls	r2, r3, #22
 80072e6:	d402      	bmi.n	80072ee <_vfiprintf_r+0x2a>
 80072e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072ea:	f7ff ff74 	bl	80071d6 <__retarget_lock_acquire_recursive>
 80072ee:	89ab      	ldrh	r3, [r5, #12]
 80072f0:	071b      	lsls	r3, r3, #28
 80072f2:	d501      	bpl.n	80072f8 <_vfiprintf_r+0x34>
 80072f4:	692b      	ldr	r3, [r5, #16]
 80072f6:	b99b      	cbnz	r3, 8007320 <_vfiprintf_r+0x5c>
 80072f8:	4629      	mov	r1, r5
 80072fa:	4630      	mov	r0, r6
 80072fc:	f7ff fe8c 	bl	8007018 <__swsetup_r>
 8007300:	b170      	cbz	r0, 8007320 <_vfiprintf_r+0x5c>
 8007302:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007304:	07dc      	lsls	r4, r3, #31
 8007306:	d504      	bpl.n	8007312 <_vfiprintf_r+0x4e>
 8007308:	f04f 30ff 	mov.w	r0, #4294967295
 800730c:	b01d      	add	sp, #116	@ 0x74
 800730e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007312:	89ab      	ldrh	r3, [r5, #12]
 8007314:	0598      	lsls	r0, r3, #22
 8007316:	d4f7      	bmi.n	8007308 <_vfiprintf_r+0x44>
 8007318:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800731a:	f7ff ff5d 	bl	80071d8 <__retarget_lock_release_recursive>
 800731e:	e7f3      	b.n	8007308 <_vfiprintf_r+0x44>
 8007320:	2300      	movs	r3, #0
 8007322:	9309      	str	r3, [sp, #36]	@ 0x24
 8007324:	2320      	movs	r3, #32
 8007326:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800732a:	f8cd 800c 	str.w	r8, [sp, #12]
 800732e:	2330      	movs	r3, #48	@ 0x30
 8007330:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80074e0 <_vfiprintf_r+0x21c>
 8007334:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007338:	f04f 0901 	mov.w	r9, #1
 800733c:	4623      	mov	r3, r4
 800733e:	469a      	mov	sl, r3
 8007340:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007344:	b10a      	cbz	r2, 800734a <_vfiprintf_r+0x86>
 8007346:	2a25      	cmp	r2, #37	@ 0x25
 8007348:	d1f9      	bne.n	800733e <_vfiprintf_r+0x7a>
 800734a:	ebba 0b04 	subs.w	fp, sl, r4
 800734e:	d00b      	beq.n	8007368 <_vfiprintf_r+0xa4>
 8007350:	465b      	mov	r3, fp
 8007352:	4622      	mov	r2, r4
 8007354:	4629      	mov	r1, r5
 8007356:	4630      	mov	r0, r6
 8007358:	f7ff ffa1 	bl	800729e <__sfputs_r>
 800735c:	3001      	adds	r0, #1
 800735e:	f000 80a7 	beq.w	80074b0 <_vfiprintf_r+0x1ec>
 8007362:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007364:	445a      	add	r2, fp
 8007366:	9209      	str	r2, [sp, #36]	@ 0x24
 8007368:	f89a 3000 	ldrb.w	r3, [sl]
 800736c:	2b00      	cmp	r3, #0
 800736e:	f000 809f 	beq.w	80074b0 <_vfiprintf_r+0x1ec>
 8007372:	2300      	movs	r3, #0
 8007374:	f04f 32ff 	mov.w	r2, #4294967295
 8007378:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800737c:	f10a 0a01 	add.w	sl, sl, #1
 8007380:	9304      	str	r3, [sp, #16]
 8007382:	9307      	str	r3, [sp, #28]
 8007384:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007388:	931a      	str	r3, [sp, #104]	@ 0x68
 800738a:	4654      	mov	r4, sl
 800738c:	2205      	movs	r2, #5
 800738e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007392:	4853      	ldr	r0, [pc, #332]	@ (80074e0 <_vfiprintf_r+0x21c>)
 8007394:	f7f8 ff34 	bl	8000200 <memchr>
 8007398:	9a04      	ldr	r2, [sp, #16]
 800739a:	b9d8      	cbnz	r0, 80073d4 <_vfiprintf_r+0x110>
 800739c:	06d1      	lsls	r1, r2, #27
 800739e:	bf44      	itt	mi
 80073a0:	2320      	movmi	r3, #32
 80073a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073a6:	0713      	lsls	r3, r2, #28
 80073a8:	bf44      	itt	mi
 80073aa:	232b      	movmi	r3, #43	@ 0x2b
 80073ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073b0:	f89a 3000 	ldrb.w	r3, [sl]
 80073b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80073b6:	d015      	beq.n	80073e4 <_vfiprintf_r+0x120>
 80073b8:	9a07      	ldr	r2, [sp, #28]
 80073ba:	4654      	mov	r4, sl
 80073bc:	2000      	movs	r0, #0
 80073be:	f04f 0c0a 	mov.w	ip, #10
 80073c2:	4621      	mov	r1, r4
 80073c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073c8:	3b30      	subs	r3, #48	@ 0x30
 80073ca:	2b09      	cmp	r3, #9
 80073cc:	d94b      	bls.n	8007466 <_vfiprintf_r+0x1a2>
 80073ce:	b1b0      	cbz	r0, 80073fe <_vfiprintf_r+0x13a>
 80073d0:	9207      	str	r2, [sp, #28]
 80073d2:	e014      	b.n	80073fe <_vfiprintf_r+0x13a>
 80073d4:	eba0 0308 	sub.w	r3, r0, r8
 80073d8:	fa09 f303 	lsl.w	r3, r9, r3
 80073dc:	4313      	orrs	r3, r2
 80073de:	9304      	str	r3, [sp, #16]
 80073e0:	46a2      	mov	sl, r4
 80073e2:	e7d2      	b.n	800738a <_vfiprintf_r+0xc6>
 80073e4:	9b03      	ldr	r3, [sp, #12]
 80073e6:	1d19      	adds	r1, r3, #4
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	9103      	str	r1, [sp, #12]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	bfbb      	ittet	lt
 80073f0:	425b      	neglt	r3, r3
 80073f2:	f042 0202 	orrlt.w	r2, r2, #2
 80073f6:	9307      	strge	r3, [sp, #28]
 80073f8:	9307      	strlt	r3, [sp, #28]
 80073fa:	bfb8      	it	lt
 80073fc:	9204      	strlt	r2, [sp, #16]
 80073fe:	7823      	ldrb	r3, [r4, #0]
 8007400:	2b2e      	cmp	r3, #46	@ 0x2e
 8007402:	d10a      	bne.n	800741a <_vfiprintf_r+0x156>
 8007404:	7863      	ldrb	r3, [r4, #1]
 8007406:	2b2a      	cmp	r3, #42	@ 0x2a
 8007408:	d132      	bne.n	8007470 <_vfiprintf_r+0x1ac>
 800740a:	9b03      	ldr	r3, [sp, #12]
 800740c:	1d1a      	adds	r2, r3, #4
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	9203      	str	r2, [sp, #12]
 8007412:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007416:	3402      	adds	r4, #2
 8007418:	9305      	str	r3, [sp, #20]
 800741a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80074f0 <_vfiprintf_r+0x22c>
 800741e:	7821      	ldrb	r1, [r4, #0]
 8007420:	2203      	movs	r2, #3
 8007422:	4650      	mov	r0, sl
 8007424:	f7f8 feec 	bl	8000200 <memchr>
 8007428:	b138      	cbz	r0, 800743a <_vfiprintf_r+0x176>
 800742a:	9b04      	ldr	r3, [sp, #16]
 800742c:	eba0 000a 	sub.w	r0, r0, sl
 8007430:	2240      	movs	r2, #64	@ 0x40
 8007432:	4082      	lsls	r2, r0
 8007434:	4313      	orrs	r3, r2
 8007436:	3401      	adds	r4, #1
 8007438:	9304      	str	r3, [sp, #16]
 800743a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800743e:	4829      	ldr	r0, [pc, #164]	@ (80074e4 <_vfiprintf_r+0x220>)
 8007440:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007444:	2206      	movs	r2, #6
 8007446:	f7f8 fedb 	bl	8000200 <memchr>
 800744a:	2800      	cmp	r0, #0
 800744c:	d03f      	beq.n	80074ce <_vfiprintf_r+0x20a>
 800744e:	4b26      	ldr	r3, [pc, #152]	@ (80074e8 <_vfiprintf_r+0x224>)
 8007450:	bb1b      	cbnz	r3, 800749a <_vfiprintf_r+0x1d6>
 8007452:	9b03      	ldr	r3, [sp, #12]
 8007454:	3307      	adds	r3, #7
 8007456:	f023 0307 	bic.w	r3, r3, #7
 800745a:	3308      	adds	r3, #8
 800745c:	9303      	str	r3, [sp, #12]
 800745e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007460:	443b      	add	r3, r7
 8007462:	9309      	str	r3, [sp, #36]	@ 0x24
 8007464:	e76a      	b.n	800733c <_vfiprintf_r+0x78>
 8007466:	fb0c 3202 	mla	r2, ip, r2, r3
 800746a:	460c      	mov	r4, r1
 800746c:	2001      	movs	r0, #1
 800746e:	e7a8      	b.n	80073c2 <_vfiprintf_r+0xfe>
 8007470:	2300      	movs	r3, #0
 8007472:	3401      	adds	r4, #1
 8007474:	9305      	str	r3, [sp, #20]
 8007476:	4619      	mov	r1, r3
 8007478:	f04f 0c0a 	mov.w	ip, #10
 800747c:	4620      	mov	r0, r4
 800747e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007482:	3a30      	subs	r2, #48	@ 0x30
 8007484:	2a09      	cmp	r2, #9
 8007486:	d903      	bls.n	8007490 <_vfiprintf_r+0x1cc>
 8007488:	2b00      	cmp	r3, #0
 800748a:	d0c6      	beq.n	800741a <_vfiprintf_r+0x156>
 800748c:	9105      	str	r1, [sp, #20]
 800748e:	e7c4      	b.n	800741a <_vfiprintf_r+0x156>
 8007490:	fb0c 2101 	mla	r1, ip, r1, r2
 8007494:	4604      	mov	r4, r0
 8007496:	2301      	movs	r3, #1
 8007498:	e7f0      	b.n	800747c <_vfiprintf_r+0x1b8>
 800749a:	ab03      	add	r3, sp, #12
 800749c:	9300      	str	r3, [sp, #0]
 800749e:	462a      	mov	r2, r5
 80074a0:	4b12      	ldr	r3, [pc, #72]	@ (80074ec <_vfiprintf_r+0x228>)
 80074a2:	a904      	add	r1, sp, #16
 80074a4:	4630      	mov	r0, r6
 80074a6:	f3af 8000 	nop.w
 80074aa:	4607      	mov	r7, r0
 80074ac:	1c78      	adds	r0, r7, #1
 80074ae:	d1d6      	bne.n	800745e <_vfiprintf_r+0x19a>
 80074b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074b2:	07d9      	lsls	r1, r3, #31
 80074b4:	d405      	bmi.n	80074c2 <_vfiprintf_r+0x1fe>
 80074b6:	89ab      	ldrh	r3, [r5, #12]
 80074b8:	059a      	lsls	r2, r3, #22
 80074ba:	d402      	bmi.n	80074c2 <_vfiprintf_r+0x1fe>
 80074bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074be:	f7ff fe8b 	bl	80071d8 <__retarget_lock_release_recursive>
 80074c2:	89ab      	ldrh	r3, [r5, #12]
 80074c4:	065b      	lsls	r3, r3, #25
 80074c6:	f53f af1f 	bmi.w	8007308 <_vfiprintf_r+0x44>
 80074ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074cc:	e71e      	b.n	800730c <_vfiprintf_r+0x48>
 80074ce:	ab03      	add	r3, sp, #12
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	462a      	mov	r2, r5
 80074d4:	4b05      	ldr	r3, [pc, #20]	@ (80074ec <_vfiprintf_r+0x228>)
 80074d6:	a904      	add	r1, sp, #16
 80074d8:	4630      	mov	r0, r6
 80074da:	f000 f879 	bl	80075d0 <_printf_i>
 80074de:	e7e4      	b.n	80074aa <_vfiprintf_r+0x1e6>
 80074e0:	08007ea5 	.word	0x08007ea5
 80074e4:	08007eaf 	.word	0x08007eaf
 80074e8:	00000000 	.word	0x00000000
 80074ec:	0800729f 	.word	0x0800729f
 80074f0:	08007eab 	.word	0x08007eab

080074f4 <_printf_common>:
 80074f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074f8:	4616      	mov	r6, r2
 80074fa:	4698      	mov	r8, r3
 80074fc:	688a      	ldr	r2, [r1, #8]
 80074fe:	690b      	ldr	r3, [r1, #16]
 8007500:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007504:	4293      	cmp	r3, r2
 8007506:	bfb8      	it	lt
 8007508:	4613      	movlt	r3, r2
 800750a:	6033      	str	r3, [r6, #0]
 800750c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007510:	4607      	mov	r7, r0
 8007512:	460c      	mov	r4, r1
 8007514:	b10a      	cbz	r2, 800751a <_printf_common+0x26>
 8007516:	3301      	adds	r3, #1
 8007518:	6033      	str	r3, [r6, #0]
 800751a:	6823      	ldr	r3, [r4, #0]
 800751c:	0699      	lsls	r1, r3, #26
 800751e:	bf42      	ittt	mi
 8007520:	6833      	ldrmi	r3, [r6, #0]
 8007522:	3302      	addmi	r3, #2
 8007524:	6033      	strmi	r3, [r6, #0]
 8007526:	6825      	ldr	r5, [r4, #0]
 8007528:	f015 0506 	ands.w	r5, r5, #6
 800752c:	d106      	bne.n	800753c <_printf_common+0x48>
 800752e:	f104 0a19 	add.w	sl, r4, #25
 8007532:	68e3      	ldr	r3, [r4, #12]
 8007534:	6832      	ldr	r2, [r6, #0]
 8007536:	1a9b      	subs	r3, r3, r2
 8007538:	42ab      	cmp	r3, r5
 800753a:	dc26      	bgt.n	800758a <_printf_common+0x96>
 800753c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007540:	6822      	ldr	r2, [r4, #0]
 8007542:	3b00      	subs	r3, #0
 8007544:	bf18      	it	ne
 8007546:	2301      	movne	r3, #1
 8007548:	0692      	lsls	r2, r2, #26
 800754a:	d42b      	bmi.n	80075a4 <_printf_common+0xb0>
 800754c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007550:	4641      	mov	r1, r8
 8007552:	4638      	mov	r0, r7
 8007554:	47c8      	blx	r9
 8007556:	3001      	adds	r0, #1
 8007558:	d01e      	beq.n	8007598 <_printf_common+0xa4>
 800755a:	6823      	ldr	r3, [r4, #0]
 800755c:	6922      	ldr	r2, [r4, #16]
 800755e:	f003 0306 	and.w	r3, r3, #6
 8007562:	2b04      	cmp	r3, #4
 8007564:	bf02      	ittt	eq
 8007566:	68e5      	ldreq	r5, [r4, #12]
 8007568:	6833      	ldreq	r3, [r6, #0]
 800756a:	1aed      	subeq	r5, r5, r3
 800756c:	68a3      	ldr	r3, [r4, #8]
 800756e:	bf0c      	ite	eq
 8007570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007574:	2500      	movne	r5, #0
 8007576:	4293      	cmp	r3, r2
 8007578:	bfc4      	itt	gt
 800757a:	1a9b      	subgt	r3, r3, r2
 800757c:	18ed      	addgt	r5, r5, r3
 800757e:	2600      	movs	r6, #0
 8007580:	341a      	adds	r4, #26
 8007582:	42b5      	cmp	r5, r6
 8007584:	d11a      	bne.n	80075bc <_printf_common+0xc8>
 8007586:	2000      	movs	r0, #0
 8007588:	e008      	b.n	800759c <_printf_common+0xa8>
 800758a:	2301      	movs	r3, #1
 800758c:	4652      	mov	r2, sl
 800758e:	4641      	mov	r1, r8
 8007590:	4638      	mov	r0, r7
 8007592:	47c8      	blx	r9
 8007594:	3001      	adds	r0, #1
 8007596:	d103      	bne.n	80075a0 <_printf_common+0xac>
 8007598:	f04f 30ff 	mov.w	r0, #4294967295
 800759c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075a0:	3501      	adds	r5, #1
 80075a2:	e7c6      	b.n	8007532 <_printf_common+0x3e>
 80075a4:	18e1      	adds	r1, r4, r3
 80075a6:	1c5a      	adds	r2, r3, #1
 80075a8:	2030      	movs	r0, #48	@ 0x30
 80075aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80075ae:	4422      	add	r2, r4
 80075b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80075b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80075b8:	3302      	adds	r3, #2
 80075ba:	e7c7      	b.n	800754c <_printf_common+0x58>
 80075bc:	2301      	movs	r3, #1
 80075be:	4622      	mov	r2, r4
 80075c0:	4641      	mov	r1, r8
 80075c2:	4638      	mov	r0, r7
 80075c4:	47c8      	blx	r9
 80075c6:	3001      	adds	r0, #1
 80075c8:	d0e6      	beq.n	8007598 <_printf_common+0xa4>
 80075ca:	3601      	adds	r6, #1
 80075cc:	e7d9      	b.n	8007582 <_printf_common+0x8e>
	...

080075d0 <_printf_i>:
 80075d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075d4:	7e0f      	ldrb	r7, [r1, #24]
 80075d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80075d8:	2f78      	cmp	r7, #120	@ 0x78
 80075da:	4691      	mov	r9, r2
 80075dc:	4680      	mov	r8, r0
 80075de:	460c      	mov	r4, r1
 80075e0:	469a      	mov	sl, r3
 80075e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80075e6:	d807      	bhi.n	80075f8 <_printf_i+0x28>
 80075e8:	2f62      	cmp	r7, #98	@ 0x62
 80075ea:	d80a      	bhi.n	8007602 <_printf_i+0x32>
 80075ec:	2f00      	cmp	r7, #0
 80075ee:	f000 80d1 	beq.w	8007794 <_printf_i+0x1c4>
 80075f2:	2f58      	cmp	r7, #88	@ 0x58
 80075f4:	f000 80b8 	beq.w	8007768 <_printf_i+0x198>
 80075f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007600:	e03a      	b.n	8007678 <_printf_i+0xa8>
 8007602:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007606:	2b15      	cmp	r3, #21
 8007608:	d8f6      	bhi.n	80075f8 <_printf_i+0x28>
 800760a:	a101      	add	r1, pc, #4	@ (adr r1, 8007610 <_printf_i+0x40>)
 800760c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007610:	08007669 	.word	0x08007669
 8007614:	0800767d 	.word	0x0800767d
 8007618:	080075f9 	.word	0x080075f9
 800761c:	080075f9 	.word	0x080075f9
 8007620:	080075f9 	.word	0x080075f9
 8007624:	080075f9 	.word	0x080075f9
 8007628:	0800767d 	.word	0x0800767d
 800762c:	080075f9 	.word	0x080075f9
 8007630:	080075f9 	.word	0x080075f9
 8007634:	080075f9 	.word	0x080075f9
 8007638:	080075f9 	.word	0x080075f9
 800763c:	0800777b 	.word	0x0800777b
 8007640:	080076a7 	.word	0x080076a7
 8007644:	08007735 	.word	0x08007735
 8007648:	080075f9 	.word	0x080075f9
 800764c:	080075f9 	.word	0x080075f9
 8007650:	0800779d 	.word	0x0800779d
 8007654:	080075f9 	.word	0x080075f9
 8007658:	080076a7 	.word	0x080076a7
 800765c:	080075f9 	.word	0x080075f9
 8007660:	080075f9 	.word	0x080075f9
 8007664:	0800773d 	.word	0x0800773d
 8007668:	6833      	ldr	r3, [r6, #0]
 800766a:	1d1a      	adds	r2, r3, #4
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	6032      	str	r2, [r6, #0]
 8007670:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007674:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007678:	2301      	movs	r3, #1
 800767a:	e09c      	b.n	80077b6 <_printf_i+0x1e6>
 800767c:	6833      	ldr	r3, [r6, #0]
 800767e:	6820      	ldr	r0, [r4, #0]
 8007680:	1d19      	adds	r1, r3, #4
 8007682:	6031      	str	r1, [r6, #0]
 8007684:	0606      	lsls	r6, r0, #24
 8007686:	d501      	bpl.n	800768c <_printf_i+0xbc>
 8007688:	681d      	ldr	r5, [r3, #0]
 800768a:	e003      	b.n	8007694 <_printf_i+0xc4>
 800768c:	0645      	lsls	r5, r0, #25
 800768e:	d5fb      	bpl.n	8007688 <_printf_i+0xb8>
 8007690:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007694:	2d00      	cmp	r5, #0
 8007696:	da03      	bge.n	80076a0 <_printf_i+0xd0>
 8007698:	232d      	movs	r3, #45	@ 0x2d
 800769a:	426d      	negs	r5, r5
 800769c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076a0:	4858      	ldr	r0, [pc, #352]	@ (8007804 <_printf_i+0x234>)
 80076a2:	230a      	movs	r3, #10
 80076a4:	e011      	b.n	80076ca <_printf_i+0xfa>
 80076a6:	6821      	ldr	r1, [r4, #0]
 80076a8:	6833      	ldr	r3, [r6, #0]
 80076aa:	0608      	lsls	r0, r1, #24
 80076ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80076b0:	d402      	bmi.n	80076b8 <_printf_i+0xe8>
 80076b2:	0649      	lsls	r1, r1, #25
 80076b4:	bf48      	it	mi
 80076b6:	b2ad      	uxthmi	r5, r5
 80076b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80076ba:	4852      	ldr	r0, [pc, #328]	@ (8007804 <_printf_i+0x234>)
 80076bc:	6033      	str	r3, [r6, #0]
 80076be:	bf14      	ite	ne
 80076c0:	230a      	movne	r3, #10
 80076c2:	2308      	moveq	r3, #8
 80076c4:	2100      	movs	r1, #0
 80076c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80076ca:	6866      	ldr	r6, [r4, #4]
 80076cc:	60a6      	str	r6, [r4, #8]
 80076ce:	2e00      	cmp	r6, #0
 80076d0:	db05      	blt.n	80076de <_printf_i+0x10e>
 80076d2:	6821      	ldr	r1, [r4, #0]
 80076d4:	432e      	orrs	r6, r5
 80076d6:	f021 0104 	bic.w	r1, r1, #4
 80076da:	6021      	str	r1, [r4, #0]
 80076dc:	d04b      	beq.n	8007776 <_printf_i+0x1a6>
 80076de:	4616      	mov	r6, r2
 80076e0:	fbb5 f1f3 	udiv	r1, r5, r3
 80076e4:	fb03 5711 	mls	r7, r3, r1, r5
 80076e8:	5dc7      	ldrb	r7, [r0, r7]
 80076ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80076ee:	462f      	mov	r7, r5
 80076f0:	42bb      	cmp	r3, r7
 80076f2:	460d      	mov	r5, r1
 80076f4:	d9f4      	bls.n	80076e0 <_printf_i+0x110>
 80076f6:	2b08      	cmp	r3, #8
 80076f8:	d10b      	bne.n	8007712 <_printf_i+0x142>
 80076fa:	6823      	ldr	r3, [r4, #0]
 80076fc:	07df      	lsls	r7, r3, #31
 80076fe:	d508      	bpl.n	8007712 <_printf_i+0x142>
 8007700:	6923      	ldr	r3, [r4, #16]
 8007702:	6861      	ldr	r1, [r4, #4]
 8007704:	4299      	cmp	r1, r3
 8007706:	bfde      	ittt	le
 8007708:	2330      	movle	r3, #48	@ 0x30
 800770a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800770e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007712:	1b92      	subs	r2, r2, r6
 8007714:	6122      	str	r2, [r4, #16]
 8007716:	f8cd a000 	str.w	sl, [sp]
 800771a:	464b      	mov	r3, r9
 800771c:	aa03      	add	r2, sp, #12
 800771e:	4621      	mov	r1, r4
 8007720:	4640      	mov	r0, r8
 8007722:	f7ff fee7 	bl	80074f4 <_printf_common>
 8007726:	3001      	adds	r0, #1
 8007728:	d14a      	bne.n	80077c0 <_printf_i+0x1f0>
 800772a:	f04f 30ff 	mov.w	r0, #4294967295
 800772e:	b004      	add	sp, #16
 8007730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007734:	6823      	ldr	r3, [r4, #0]
 8007736:	f043 0320 	orr.w	r3, r3, #32
 800773a:	6023      	str	r3, [r4, #0]
 800773c:	4832      	ldr	r0, [pc, #200]	@ (8007808 <_printf_i+0x238>)
 800773e:	2778      	movs	r7, #120	@ 0x78
 8007740:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007744:	6823      	ldr	r3, [r4, #0]
 8007746:	6831      	ldr	r1, [r6, #0]
 8007748:	061f      	lsls	r7, r3, #24
 800774a:	f851 5b04 	ldr.w	r5, [r1], #4
 800774e:	d402      	bmi.n	8007756 <_printf_i+0x186>
 8007750:	065f      	lsls	r7, r3, #25
 8007752:	bf48      	it	mi
 8007754:	b2ad      	uxthmi	r5, r5
 8007756:	6031      	str	r1, [r6, #0]
 8007758:	07d9      	lsls	r1, r3, #31
 800775a:	bf44      	itt	mi
 800775c:	f043 0320 	orrmi.w	r3, r3, #32
 8007760:	6023      	strmi	r3, [r4, #0]
 8007762:	b11d      	cbz	r5, 800776c <_printf_i+0x19c>
 8007764:	2310      	movs	r3, #16
 8007766:	e7ad      	b.n	80076c4 <_printf_i+0xf4>
 8007768:	4826      	ldr	r0, [pc, #152]	@ (8007804 <_printf_i+0x234>)
 800776a:	e7e9      	b.n	8007740 <_printf_i+0x170>
 800776c:	6823      	ldr	r3, [r4, #0]
 800776e:	f023 0320 	bic.w	r3, r3, #32
 8007772:	6023      	str	r3, [r4, #0]
 8007774:	e7f6      	b.n	8007764 <_printf_i+0x194>
 8007776:	4616      	mov	r6, r2
 8007778:	e7bd      	b.n	80076f6 <_printf_i+0x126>
 800777a:	6833      	ldr	r3, [r6, #0]
 800777c:	6825      	ldr	r5, [r4, #0]
 800777e:	6961      	ldr	r1, [r4, #20]
 8007780:	1d18      	adds	r0, r3, #4
 8007782:	6030      	str	r0, [r6, #0]
 8007784:	062e      	lsls	r6, r5, #24
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	d501      	bpl.n	800778e <_printf_i+0x1be>
 800778a:	6019      	str	r1, [r3, #0]
 800778c:	e002      	b.n	8007794 <_printf_i+0x1c4>
 800778e:	0668      	lsls	r0, r5, #25
 8007790:	d5fb      	bpl.n	800778a <_printf_i+0x1ba>
 8007792:	8019      	strh	r1, [r3, #0]
 8007794:	2300      	movs	r3, #0
 8007796:	6123      	str	r3, [r4, #16]
 8007798:	4616      	mov	r6, r2
 800779a:	e7bc      	b.n	8007716 <_printf_i+0x146>
 800779c:	6833      	ldr	r3, [r6, #0]
 800779e:	1d1a      	adds	r2, r3, #4
 80077a0:	6032      	str	r2, [r6, #0]
 80077a2:	681e      	ldr	r6, [r3, #0]
 80077a4:	6862      	ldr	r2, [r4, #4]
 80077a6:	2100      	movs	r1, #0
 80077a8:	4630      	mov	r0, r6
 80077aa:	f7f8 fd29 	bl	8000200 <memchr>
 80077ae:	b108      	cbz	r0, 80077b4 <_printf_i+0x1e4>
 80077b0:	1b80      	subs	r0, r0, r6
 80077b2:	6060      	str	r0, [r4, #4]
 80077b4:	6863      	ldr	r3, [r4, #4]
 80077b6:	6123      	str	r3, [r4, #16]
 80077b8:	2300      	movs	r3, #0
 80077ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077be:	e7aa      	b.n	8007716 <_printf_i+0x146>
 80077c0:	6923      	ldr	r3, [r4, #16]
 80077c2:	4632      	mov	r2, r6
 80077c4:	4649      	mov	r1, r9
 80077c6:	4640      	mov	r0, r8
 80077c8:	47d0      	blx	sl
 80077ca:	3001      	adds	r0, #1
 80077cc:	d0ad      	beq.n	800772a <_printf_i+0x15a>
 80077ce:	6823      	ldr	r3, [r4, #0]
 80077d0:	079b      	lsls	r3, r3, #30
 80077d2:	d413      	bmi.n	80077fc <_printf_i+0x22c>
 80077d4:	68e0      	ldr	r0, [r4, #12]
 80077d6:	9b03      	ldr	r3, [sp, #12]
 80077d8:	4298      	cmp	r0, r3
 80077da:	bfb8      	it	lt
 80077dc:	4618      	movlt	r0, r3
 80077de:	e7a6      	b.n	800772e <_printf_i+0x15e>
 80077e0:	2301      	movs	r3, #1
 80077e2:	4632      	mov	r2, r6
 80077e4:	4649      	mov	r1, r9
 80077e6:	4640      	mov	r0, r8
 80077e8:	47d0      	blx	sl
 80077ea:	3001      	adds	r0, #1
 80077ec:	d09d      	beq.n	800772a <_printf_i+0x15a>
 80077ee:	3501      	adds	r5, #1
 80077f0:	68e3      	ldr	r3, [r4, #12]
 80077f2:	9903      	ldr	r1, [sp, #12]
 80077f4:	1a5b      	subs	r3, r3, r1
 80077f6:	42ab      	cmp	r3, r5
 80077f8:	dcf2      	bgt.n	80077e0 <_printf_i+0x210>
 80077fa:	e7eb      	b.n	80077d4 <_printf_i+0x204>
 80077fc:	2500      	movs	r5, #0
 80077fe:	f104 0619 	add.w	r6, r4, #25
 8007802:	e7f5      	b.n	80077f0 <_printf_i+0x220>
 8007804:	08007eb6 	.word	0x08007eb6
 8007808:	08007ec7 	.word	0x08007ec7

0800780c <__sflush_r>:
 800780c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007814:	0716      	lsls	r6, r2, #28
 8007816:	4605      	mov	r5, r0
 8007818:	460c      	mov	r4, r1
 800781a:	d454      	bmi.n	80078c6 <__sflush_r+0xba>
 800781c:	684b      	ldr	r3, [r1, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	dc02      	bgt.n	8007828 <__sflush_r+0x1c>
 8007822:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007824:	2b00      	cmp	r3, #0
 8007826:	dd48      	ble.n	80078ba <__sflush_r+0xae>
 8007828:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800782a:	2e00      	cmp	r6, #0
 800782c:	d045      	beq.n	80078ba <__sflush_r+0xae>
 800782e:	2300      	movs	r3, #0
 8007830:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007834:	682f      	ldr	r7, [r5, #0]
 8007836:	6a21      	ldr	r1, [r4, #32]
 8007838:	602b      	str	r3, [r5, #0]
 800783a:	d030      	beq.n	800789e <__sflush_r+0x92>
 800783c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800783e:	89a3      	ldrh	r3, [r4, #12]
 8007840:	0759      	lsls	r1, r3, #29
 8007842:	d505      	bpl.n	8007850 <__sflush_r+0x44>
 8007844:	6863      	ldr	r3, [r4, #4]
 8007846:	1ad2      	subs	r2, r2, r3
 8007848:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800784a:	b10b      	cbz	r3, 8007850 <__sflush_r+0x44>
 800784c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800784e:	1ad2      	subs	r2, r2, r3
 8007850:	2300      	movs	r3, #0
 8007852:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007854:	6a21      	ldr	r1, [r4, #32]
 8007856:	4628      	mov	r0, r5
 8007858:	47b0      	blx	r6
 800785a:	1c43      	adds	r3, r0, #1
 800785c:	89a3      	ldrh	r3, [r4, #12]
 800785e:	d106      	bne.n	800786e <__sflush_r+0x62>
 8007860:	6829      	ldr	r1, [r5, #0]
 8007862:	291d      	cmp	r1, #29
 8007864:	d82b      	bhi.n	80078be <__sflush_r+0xb2>
 8007866:	4a2a      	ldr	r2, [pc, #168]	@ (8007910 <__sflush_r+0x104>)
 8007868:	40ca      	lsrs	r2, r1
 800786a:	07d6      	lsls	r6, r2, #31
 800786c:	d527      	bpl.n	80078be <__sflush_r+0xb2>
 800786e:	2200      	movs	r2, #0
 8007870:	6062      	str	r2, [r4, #4]
 8007872:	04d9      	lsls	r1, r3, #19
 8007874:	6922      	ldr	r2, [r4, #16]
 8007876:	6022      	str	r2, [r4, #0]
 8007878:	d504      	bpl.n	8007884 <__sflush_r+0x78>
 800787a:	1c42      	adds	r2, r0, #1
 800787c:	d101      	bne.n	8007882 <__sflush_r+0x76>
 800787e:	682b      	ldr	r3, [r5, #0]
 8007880:	b903      	cbnz	r3, 8007884 <__sflush_r+0x78>
 8007882:	6560      	str	r0, [r4, #84]	@ 0x54
 8007884:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007886:	602f      	str	r7, [r5, #0]
 8007888:	b1b9      	cbz	r1, 80078ba <__sflush_r+0xae>
 800788a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800788e:	4299      	cmp	r1, r3
 8007890:	d002      	beq.n	8007898 <__sflush_r+0x8c>
 8007892:	4628      	mov	r0, r5
 8007894:	f7ff fca2 	bl	80071dc <_free_r>
 8007898:	2300      	movs	r3, #0
 800789a:	6363      	str	r3, [r4, #52]	@ 0x34
 800789c:	e00d      	b.n	80078ba <__sflush_r+0xae>
 800789e:	2301      	movs	r3, #1
 80078a0:	4628      	mov	r0, r5
 80078a2:	47b0      	blx	r6
 80078a4:	4602      	mov	r2, r0
 80078a6:	1c50      	adds	r0, r2, #1
 80078a8:	d1c9      	bne.n	800783e <__sflush_r+0x32>
 80078aa:	682b      	ldr	r3, [r5, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d0c6      	beq.n	800783e <__sflush_r+0x32>
 80078b0:	2b1d      	cmp	r3, #29
 80078b2:	d001      	beq.n	80078b8 <__sflush_r+0xac>
 80078b4:	2b16      	cmp	r3, #22
 80078b6:	d11e      	bne.n	80078f6 <__sflush_r+0xea>
 80078b8:	602f      	str	r7, [r5, #0]
 80078ba:	2000      	movs	r0, #0
 80078bc:	e022      	b.n	8007904 <__sflush_r+0xf8>
 80078be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078c2:	b21b      	sxth	r3, r3
 80078c4:	e01b      	b.n	80078fe <__sflush_r+0xf2>
 80078c6:	690f      	ldr	r7, [r1, #16]
 80078c8:	2f00      	cmp	r7, #0
 80078ca:	d0f6      	beq.n	80078ba <__sflush_r+0xae>
 80078cc:	0793      	lsls	r3, r2, #30
 80078ce:	680e      	ldr	r6, [r1, #0]
 80078d0:	bf08      	it	eq
 80078d2:	694b      	ldreq	r3, [r1, #20]
 80078d4:	600f      	str	r7, [r1, #0]
 80078d6:	bf18      	it	ne
 80078d8:	2300      	movne	r3, #0
 80078da:	eba6 0807 	sub.w	r8, r6, r7
 80078de:	608b      	str	r3, [r1, #8]
 80078e0:	f1b8 0f00 	cmp.w	r8, #0
 80078e4:	dde9      	ble.n	80078ba <__sflush_r+0xae>
 80078e6:	6a21      	ldr	r1, [r4, #32]
 80078e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80078ea:	4643      	mov	r3, r8
 80078ec:	463a      	mov	r2, r7
 80078ee:	4628      	mov	r0, r5
 80078f0:	47b0      	blx	r6
 80078f2:	2800      	cmp	r0, #0
 80078f4:	dc08      	bgt.n	8007908 <__sflush_r+0xfc>
 80078f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078fe:	81a3      	strh	r3, [r4, #12]
 8007900:	f04f 30ff 	mov.w	r0, #4294967295
 8007904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007908:	4407      	add	r7, r0
 800790a:	eba8 0800 	sub.w	r8, r8, r0
 800790e:	e7e7      	b.n	80078e0 <__sflush_r+0xd4>
 8007910:	20400001 	.word	0x20400001

08007914 <_fflush_r>:
 8007914:	b538      	push	{r3, r4, r5, lr}
 8007916:	690b      	ldr	r3, [r1, #16]
 8007918:	4605      	mov	r5, r0
 800791a:	460c      	mov	r4, r1
 800791c:	b913      	cbnz	r3, 8007924 <_fflush_r+0x10>
 800791e:	2500      	movs	r5, #0
 8007920:	4628      	mov	r0, r5
 8007922:	bd38      	pop	{r3, r4, r5, pc}
 8007924:	b118      	cbz	r0, 800792e <_fflush_r+0x1a>
 8007926:	6a03      	ldr	r3, [r0, #32]
 8007928:	b90b      	cbnz	r3, 800792e <_fflush_r+0x1a>
 800792a:	f7ff fa4d 	bl	8006dc8 <__sinit>
 800792e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d0f3      	beq.n	800791e <_fflush_r+0xa>
 8007936:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007938:	07d0      	lsls	r0, r2, #31
 800793a:	d404      	bmi.n	8007946 <_fflush_r+0x32>
 800793c:	0599      	lsls	r1, r3, #22
 800793e:	d402      	bmi.n	8007946 <_fflush_r+0x32>
 8007940:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007942:	f7ff fc48 	bl	80071d6 <__retarget_lock_acquire_recursive>
 8007946:	4628      	mov	r0, r5
 8007948:	4621      	mov	r1, r4
 800794a:	f7ff ff5f 	bl	800780c <__sflush_r>
 800794e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007950:	07da      	lsls	r2, r3, #31
 8007952:	4605      	mov	r5, r0
 8007954:	d4e4      	bmi.n	8007920 <_fflush_r+0xc>
 8007956:	89a3      	ldrh	r3, [r4, #12]
 8007958:	059b      	lsls	r3, r3, #22
 800795a:	d4e1      	bmi.n	8007920 <_fflush_r+0xc>
 800795c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800795e:	f7ff fc3b 	bl	80071d8 <__retarget_lock_release_recursive>
 8007962:	e7dd      	b.n	8007920 <_fflush_r+0xc>

08007964 <__swhatbuf_r>:
 8007964:	b570      	push	{r4, r5, r6, lr}
 8007966:	460c      	mov	r4, r1
 8007968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800796c:	2900      	cmp	r1, #0
 800796e:	b096      	sub	sp, #88	@ 0x58
 8007970:	4615      	mov	r5, r2
 8007972:	461e      	mov	r6, r3
 8007974:	da0d      	bge.n	8007992 <__swhatbuf_r+0x2e>
 8007976:	89a3      	ldrh	r3, [r4, #12]
 8007978:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800797c:	f04f 0100 	mov.w	r1, #0
 8007980:	bf14      	ite	ne
 8007982:	2340      	movne	r3, #64	@ 0x40
 8007984:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007988:	2000      	movs	r0, #0
 800798a:	6031      	str	r1, [r6, #0]
 800798c:	602b      	str	r3, [r5, #0]
 800798e:	b016      	add	sp, #88	@ 0x58
 8007990:	bd70      	pop	{r4, r5, r6, pc}
 8007992:	466a      	mov	r2, sp
 8007994:	f000 f848 	bl	8007a28 <_fstat_r>
 8007998:	2800      	cmp	r0, #0
 800799a:	dbec      	blt.n	8007976 <__swhatbuf_r+0x12>
 800799c:	9901      	ldr	r1, [sp, #4]
 800799e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80079a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80079a6:	4259      	negs	r1, r3
 80079a8:	4159      	adcs	r1, r3
 80079aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079ae:	e7eb      	b.n	8007988 <__swhatbuf_r+0x24>

080079b0 <__smakebuf_r>:
 80079b0:	898b      	ldrh	r3, [r1, #12]
 80079b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079b4:	079d      	lsls	r5, r3, #30
 80079b6:	4606      	mov	r6, r0
 80079b8:	460c      	mov	r4, r1
 80079ba:	d507      	bpl.n	80079cc <__smakebuf_r+0x1c>
 80079bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80079c0:	6023      	str	r3, [r4, #0]
 80079c2:	6123      	str	r3, [r4, #16]
 80079c4:	2301      	movs	r3, #1
 80079c6:	6163      	str	r3, [r4, #20]
 80079c8:	b003      	add	sp, #12
 80079ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079cc:	ab01      	add	r3, sp, #4
 80079ce:	466a      	mov	r2, sp
 80079d0:	f7ff ffc8 	bl	8007964 <__swhatbuf_r>
 80079d4:	9f00      	ldr	r7, [sp, #0]
 80079d6:	4605      	mov	r5, r0
 80079d8:	4639      	mov	r1, r7
 80079da:	4630      	mov	r0, r6
 80079dc:	f7ff f8dc 	bl	8006b98 <_malloc_r>
 80079e0:	b948      	cbnz	r0, 80079f6 <__smakebuf_r+0x46>
 80079e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079e6:	059a      	lsls	r2, r3, #22
 80079e8:	d4ee      	bmi.n	80079c8 <__smakebuf_r+0x18>
 80079ea:	f023 0303 	bic.w	r3, r3, #3
 80079ee:	f043 0302 	orr.w	r3, r3, #2
 80079f2:	81a3      	strh	r3, [r4, #12]
 80079f4:	e7e2      	b.n	80079bc <__smakebuf_r+0xc>
 80079f6:	89a3      	ldrh	r3, [r4, #12]
 80079f8:	6020      	str	r0, [r4, #0]
 80079fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079fe:	81a3      	strh	r3, [r4, #12]
 8007a00:	9b01      	ldr	r3, [sp, #4]
 8007a02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007a06:	b15b      	cbz	r3, 8007a20 <__smakebuf_r+0x70>
 8007a08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	f000 f81d 	bl	8007a4c <_isatty_r>
 8007a12:	b128      	cbz	r0, 8007a20 <__smakebuf_r+0x70>
 8007a14:	89a3      	ldrh	r3, [r4, #12]
 8007a16:	f023 0303 	bic.w	r3, r3, #3
 8007a1a:	f043 0301 	orr.w	r3, r3, #1
 8007a1e:	81a3      	strh	r3, [r4, #12]
 8007a20:	89a3      	ldrh	r3, [r4, #12]
 8007a22:	431d      	orrs	r5, r3
 8007a24:	81a5      	strh	r5, [r4, #12]
 8007a26:	e7cf      	b.n	80079c8 <__smakebuf_r+0x18>

08007a28 <_fstat_r>:
 8007a28:	b538      	push	{r3, r4, r5, lr}
 8007a2a:	4d07      	ldr	r5, [pc, #28]	@ (8007a48 <_fstat_r+0x20>)
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	4604      	mov	r4, r0
 8007a30:	4608      	mov	r0, r1
 8007a32:	4611      	mov	r1, r2
 8007a34:	602b      	str	r3, [r5, #0]
 8007a36:	f000 f955 	bl	8007ce4 <_fstat>
 8007a3a:	1c43      	adds	r3, r0, #1
 8007a3c:	d102      	bne.n	8007a44 <_fstat_r+0x1c>
 8007a3e:	682b      	ldr	r3, [r5, #0]
 8007a40:	b103      	cbz	r3, 8007a44 <_fstat_r+0x1c>
 8007a42:	6023      	str	r3, [r4, #0]
 8007a44:	bd38      	pop	{r3, r4, r5, pc}
 8007a46:	bf00      	nop
 8007a48:	20001fd8 	.word	0x20001fd8

08007a4c <_isatty_r>:
 8007a4c:	b538      	push	{r3, r4, r5, lr}
 8007a4e:	4d06      	ldr	r5, [pc, #24]	@ (8007a68 <_isatty_r+0x1c>)
 8007a50:	2300      	movs	r3, #0
 8007a52:	4604      	mov	r4, r0
 8007a54:	4608      	mov	r0, r1
 8007a56:	602b      	str	r3, [r5, #0]
 8007a58:	f000 f94c 	bl	8007cf4 <_isatty>
 8007a5c:	1c43      	adds	r3, r0, #1
 8007a5e:	d102      	bne.n	8007a66 <_isatty_r+0x1a>
 8007a60:	682b      	ldr	r3, [r5, #0]
 8007a62:	b103      	cbz	r3, 8007a66 <_isatty_r+0x1a>
 8007a64:	6023      	str	r3, [r4, #0]
 8007a66:	bd38      	pop	{r3, r4, r5, pc}
 8007a68:	20001fd8 	.word	0x20001fd8

08007a6c <expf>:
 8007a6c:	b508      	push	{r3, lr}
 8007a6e:	ed2d 8b02 	vpush	{d8}
 8007a72:	eef0 8a40 	vmov.f32	s17, s0
 8007a76:	f000 f85f 	bl	8007b38 <__ieee754_expf>
 8007a7a:	eeb0 8a40 	vmov.f32	s16, s0
 8007a7e:	eeb0 0a68 	vmov.f32	s0, s17
 8007a82:	f000 f829 	bl	8007ad8 <finitef>
 8007a86:	b160      	cbz	r0, 8007aa2 <expf+0x36>
 8007a88:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8007ac8 <expf+0x5c>
 8007a8c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8007a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a94:	dd0a      	ble.n	8007aac <expf+0x40>
 8007a96:	f7ff fb73 	bl	8007180 <__errno>
 8007a9a:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 8007acc <expf+0x60>
 8007a9e:	2322      	movs	r3, #34	@ 0x22
 8007aa0:	6003      	str	r3, [r0, #0]
 8007aa2:	eeb0 0a48 	vmov.f32	s0, s16
 8007aa6:	ecbd 8b02 	vpop	{d8}
 8007aaa:	bd08      	pop	{r3, pc}
 8007aac:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8007ad0 <expf+0x64>
 8007ab0:	eef4 8ae7 	vcmpe.f32	s17, s15
 8007ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ab8:	d5f3      	bpl.n	8007aa2 <expf+0x36>
 8007aba:	f7ff fb61 	bl	8007180 <__errno>
 8007abe:	2322      	movs	r3, #34	@ 0x22
 8007ac0:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 8007ad4 <expf+0x68>
 8007ac4:	6003      	str	r3, [r0, #0]
 8007ac6:	e7ec      	b.n	8007aa2 <expf+0x36>
 8007ac8:	42b17217 	.word	0x42b17217
 8007acc:	7f800000 	.word	0x7f800000
 8007ad0:	c2cff1b5 	.word	0xc2cff1b5
 8007ad4:	00000000 	.word	0x00000000

08007ad8 <finitef>:
 8007ad8:	ee10 3a10 	vmov	r3, s0
 8007adc:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8007ae0:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8007ae4:	bfac      	ite	ge
 8007ae6:	2000      	movge	r0, #0
 8007ae8:	2001      	movlt	r0, #1
 8007aea:	4770      	bx	lr

08007aec <with_errnof>:
 8007aec:	b510      	push	{r4, lr}
 8007aee:	ed2d 8b02 	vpush	{d8}
 8007af2:	eeb0 8a40 	vmov.f32	s16, s0
 8007af6:	4604      	mov	r4, r0
 8007af8:	f7ff fb42 	bl	8007180 <__errno>
 8007afc:	eeb0 0a48 	vmov.f32	s0, s16
 8007b00:	ecbd 8b02 	vpop	{d8}
 8007b04:	6004      	str	r4, [r0, #0]
 8007b06:	bd10      	pop	{r4, pc}

08007b08 <xflowf>:
 8007b08:	b130      	cbz	r0, 8007b18 <xflowf+0x10>
 8007b0a:	eef1 7a40 	vneg.f32	s15, s0
 8007b0e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007b12:	2022      	movs	r0, #34	@ 0x22
 8007b14:	f7ff bfea 	b.w	8007aec <with_errnof>
 8007b18:	eef0 7a40 	vmov.f32	s15, s0
 8007b1c:	e7f7      	b.n	8007b0e <xflowf+0x6>
	...

08007b20 <__math_uflowf>:
 8007b20:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007b28 <__math_uflowf+0x8>
 8007b24:	f7ff bff0 	b.w	8007b08 <xflowf>
 8007b28:	10000000 	.word	0x10000000

08007b2c <__math_oflowf>:
 8007b2c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007b34 <__math_oflowf+0x8>
 8007b30:	f7ff bfea 	b.w	8007b08 <xflowf>
 8007b34:	70000000 	.word	0x70000000

08007b38 <__ieee754_expf>:
 8007b38:	ee10 2a10 	vmov	r2, s0
 8007b3c:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8007b40:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8007b44:	d902      	bls.n	8007b4c <__ieee754_expf+0x14>
 8007b46:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007b4a:	4770      	bx	lr
 8007b4c:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8007b50:	d106      	bne.n	8007b60 <__ieee754_expf+0x28>
 8007b52:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8007c8c <__ieee754_expf+0x154>
 8007b56:	2900      	cmp	r1, #0
 8007b58:	bf18      	it	ne
 8007b5a:	eeb0 0a67 	vmovne.f32	s0, s15
 8007b5e:	4770      	bx	lr
 8007b60:	484b      	ldr	r0, [pc, #300]	@ (8007c90 <__ieee754_expf+0x158>)
 8007b62:	4282      	cmp	r2, r0
 8007b64:	dd02      	ble.n	8007b6c <__ieee754_expf+0x34>
 8007b66:	2000      	movs	r0, #0
 8007b68:	f7ff bfe0 	b.w	8007b2c <__math_oflowf>
 8007b6c:	2a00      	cmp	r2, #0
 8007b6e:	da05      	bge.n	8007b7c <__ieee754_expf+0x44>
 8007b70:	4a48      	ldr	r2, [pc, #288]	@ (8007c94 <__ieee754_expf+0x15c>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d902      	bls.n	8007b7c <__ieee754_expf+0x44>
 8007b76:	2000      	movs	r0, #0
 8007b78:	f7ff bfd2 	b.w	8007b20 <__math_uflowf>
 8007b7c:	4a46      	ldr	r2, [pc, #280]	@ (8007c98 <__ieee754_expf+0x160>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8007b84:	d952      	bls.n	8007c2c <__ieee754_expf+0xf4>
 8007b86:	4a45      	ldr	r2, [pc, #276]	@ (8007c9c <__ieee754_expf+0x164>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8007b8e:	d834      	bhi.n	8007bfa <__ieee754_expf+0xc2>
 8007b90:	4b43      	ldr	r3, [pc, #268]	@ (8007ca0 <__ieee754_expf+0x168>)
 8007b92:	4413      	add	r3, r2
 8007b94:	ed93 7a00 	vldr	s14, [r3]
 8007b98:	4b42      	ldr	r3, [pc, #264]	@ (8007ca4 <__ieee754_expf+0x16c>)
 8007b9a:	4413      	add	r3, r2
 8007b9c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8007ba0:	f081 0201 	eor.w	r2, r1, #1
 8007ba4:	edd3 7a00 	vldr	s15, [r3]
 8007ba8:	1a52      	subs	r2, r2, r1
 8007baa:	ee37 0a67 	vsub.f32	s0, s14, s15
 8007bae:	ee20 6a00 	vmul.f32	s12, s0, s0
 8007bb2:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 8007ca8 <__ieee754_expf+0x170>
 8007bb6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007cac <__ieee754_expf+0x174>
 8007bba:	eee6 6a05 	vfma.f32	s13, s12, s10
 8007bbe:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8007cb0 <__ieee754_expf+0x178>
 8007bc2:	eea6 5a86 	vfma.f32	s10, s13, s12
 8007bc6:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007cb4 <__ieee754_expf+0x17c>
 8007bca:	eee5 6a06 	vfma.f32	s13, s10, s12
 8007bce:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8007cb8 <__ieee754_expf+0x180>
 8007bd2:	eea6 5a86 	vfma.f32	s10, s13, s12
 8007bd6:	eef0 6a40 	vmov.f32	s13, s0
 8007bda:	eee5 6a46 	vfms.f32	s13, s10, s12
 8007bde:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8007be2:	ee20 5a26 	vmul.f32	s10, s0, s13
 8007be6:	bb92      	cbnz	r2, 8007c4e <__ieee754_expf+0x116>
 8007be8:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8007bec:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8007bf0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007bf4:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8007bf8:	4770      	bx	lr
 8007bfa:	4b30      	ldr	r3, [pc, #192]	@ (8007cbc <__ieee754_expf+0x184>)
 8007bfc:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8007cc0 <__ieee754_expf+0x188>
 8007c00:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8007cc4 <__ieee754_expf+0x18c>
 8007c04:	4413      	add	r3, r2
 8007c06:	edd3 7a00 	vldr	s15, [r3]
 8007c0a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007c0e:	eeb0 7a40 	vmov.f32	s14, s0
 8007c12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c16:	ee17 2a90 	vmov	r2, s15
 8007c1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c1e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8007c22:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8007cc8 <__ieee754_expf+0x190>
 8007c26:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007c2a:	e7be      	b.n	8007baa <__ieee754_expf+0x72>
 8007c2c:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 8007c30:	d20b      	bcs.n	8007c4a <__ieee754_expf+0x112>
 8007c32:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007ccc <__ieee754_expf+0x194>
 8007c36:	ee70 6a26 	vadd.f32	s13, s0, s13
 8007c3a:	eef4 6ae5 	vcmpe.f32	s13, s11
 8007c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c42:	dd02      	ble.n	8007c4a <__ieee754_expf+0x112>
 8007c44:	ee30 0a25 	vadd.f32	s0, s0, s11
 8007c48:	4770      	bx	lr
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	e7af      	b.n	8007bae <__ieee754_expf+0x76>
 8007c4e:	ee36 6a66 	vsub.f32	s12, s12, s13
 8007c52:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 8007c56:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8007c5a:	bfb8      	it	lt
 8007c5c:	3264      	addlt	r2, #100	@ 0x64
 8007c5e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007c62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007c66:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8007c6a:	ee17 3a90 	vmov	r3, s15
 8007c6e:	bfab      	itete	ge
 8007c70:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8007c74:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8007c78:	ee00 3a10 	vmovge	s0, r3
 8007c7c:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 8007cd0 <__ieee754_expf+0x198>
 8007c80:	bfbc      	itt	lt
 8007c82:	ee00 3a10 	vmovlt	s0, r3
 8007c86:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8007c8a:	4770      	bx	lr
 8007c8c:	00000000 	.word	0x00000000
 8007c90:	42b17217 	.word	0x42b17217
 8007c94:	42cff1b5 	.word	0x42cff1b5
 8007c98:	3eb17218 	.word	0x3eb17218
 8007c9c:	3f851591 	.word	0x3f851591
 8007ca0:	08055560 	.word	0x08055560
 8007ca4:	08055558 	.word	0x08055558
 8007ca8:	3331bb4c 	.word	0x3331bb4c
 8007cac:	b5ddea0e 	.word	0xb5ddea0e
 8007cb0:	388ab355 	.word	0x388ab355
 8007cb4:	bb360b61 	.word	0xbb360b61
 8007cb8:	3e2aaaab 	.word	0x3e2aaaab
 8007cbc:	08055568 	.word	0x08055568
 8007cc0:	3fb8aa3b 	.word	0x3fb8aa3b
 8007cc4:	3f317180 	.word	0x3f317180
 8007cc8:	3717f7d1 	.word	0x3717f7d1
 8007ccc:	7149f2ca 	.word	0x7149f2ca
 8007cd0:	0d800000 	.word	0x0d800000

08007cd4 <_close>:
 8007cd4:	4b02      	ldr	r3, [pc, #8]	@ (8007ce0 <_close+0xc>)
 8007cd6:	2258      	movs	r2, #88	@ 0x58
 8007cd8:	601a      	str	r2, [r3, #0]
 8007cda:	f04f 30ff 	mov.w	r0, #4294967295
 8007cde:	4770      	bx	lr
 8007ce0:	20001fd8 	.word	0x20001fd8

08007ce4 <_fstat>:
 8007ce4:	4b02      	ldr	r3, [pc, #8]	@ (8007cf0 <_fstat+0xc>)
 8007ce6:	2258      	movs	r2, #88	@ 0x58
 8007ce8:	601a      	str	r2, [r3, #0]
 8007cea:	f04f 30ff 	mov.w	r0, #4294967295
 8007cee:	4770      	bx	lr
 8007cf0:	20001fd8 	.word	0x20001fd8

08007cf4 <_isatty>:
 8007cf4:	4b02      	ldr	r3, [pc, #8]	@ (8007d00 <_isatty+0xc>)
 8007cf6:	2258      	movs	r2, #88	@ 0x58
 8007cf8:	601a      	str	r2, [r3, #0]
 8007cfa:	2000      	movs	r0, #0
 8007cfc:	4770      	bx	lr
 8007cfe:	bf00      	nop
 8007d00:	20001fd8 	.word	0x20001fd8

08007d04 <_lseek>:
 8007d04:	4b02      	ldr	r3, [pc, #8]	@ (8007d10 <_lseek+0xc>)
 8007d06:	2258      	movs	r2, #88	@ 0x58
 8007d08:	601a      	str	r2, [r3, #0]
 8007d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d0e:	4770      	bx	lr
 8007d10:	20001fd8 	.word	0x20001fd8

08007d14 <_read>:
 8007d14:	4b02      	ldr	r3, [pc, #8]	@ (8007d20 <_read+0xc>)
 8007d16:	2258      	movs	r2, #88	@ 0x58
 8007d18:	601a      	str	r2, [r3, #0]
 8007d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d1e:	4770      	bx	lr
 8007d20:	20001fd8 	.word	0x20001fd8

08007d24 <_write>:
 8007d24:	4b02      	ldr	r3, [pc, #8]	@ (8007d30 <_write+0xc>)
 8007d26:	2258      	movs	r2, #88	@ 0x58
 8007d28:	601a      	str	r2, [r3, #0]
 8007d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d2e:	4770      	bx	lr
 8007d30:	20001fd8 	.word	0x20001fd8

08007d34 <_init>:
 8007d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d36:	bf00      	nop
 8007d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d3a:	bc08      	pop	{r3}
 8007d3c:	469e      	mov	lr, r3
 8007d3e:	4770      	bx	lr

08007d40 <_fini>:
 8007d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d42:	bf00      	nop
 8007d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d46:	bc08      	pop	{r3}
 8007d48:	469e      	mov	lr, r3
 8007d4a:	4770      	bx	lr
